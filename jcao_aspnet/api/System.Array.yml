items:
- uid: System.Array
  commentId: T:System.Array
  id: Array
  parent: System
  children:
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch(System.Array,System.Object)
  - System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch``1(``0[],``0)
  - System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Array.Clear(System.Array,System.Int32,System.Int32)
  - System.Array.Clone
  - System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.Copy(System.Array,System.Array,System.Int32)
  - System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.CopyTo(System.Array,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  - System.Array.Empty``1
  - System.Array.Exists``1(``0[],System.Predicate{``0})
  - System.Array.Find``1(``0[],System.Predicate{``0})
  - System.Array.FindAll``1(``0[],System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Predicate{``0})
  - System.Array.FindLast``1(``0[],System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  - System.Array.GetEnumerator
  - System.Array.GetLength(System.Int32)
  - System.Array.GetLowerBound(System.Int32)
  - System.Array.GetUpperBound(System.Int32)
  - System.Array.GetValue(System.Int32)
  - System.Array.GetValue(System.Int32[])
  - System.Array.IndexOf(System.Array,System.Object)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.IndexOf``1(``0[],``0)
  - System.Array.IndexOf``1(``0[],``0,System.Int32)
  - System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Initialize
  - System.Array.LastIndexOf(System.Array,System.Object)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Length
  - System.Array.Rank
  - System.Array.Resize``1(``0[]@,System.Int32)
  - System.Array.Reverse(System.Array)
  - System.Array.Reverse(System.Array,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32[])
  - System.Array.Sort(System.Array)
  - System.Array.Sort(System.Array,System.Array)
  - System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort``1(``0[])
  - System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``1(``0[],System.Comparison{``0})
  - System.Array.Sort``1(``0[],System.Int32,System.Int32)
  - System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[])
  - System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.System#Collections#ICollection#Count
  - System.Array.System#Collections#ICollection#IsSynchronized
  - System.Array.System#Collections#ICollection#SyncRoot
  - System.Array.System#Collections#IList#Add(System.Object)
  - System.Array.System#Collections#IList#Clear
  - System.Array.System#Collections#IList#Contains(System.Object)
  - System.Array.System#Collections#IList#IndexOf(System.Object)
  - System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Array.System#Collections#IList#IsFixedSize
  - System.Array.System#Collections#IList#IsReadOnly
  - System.Array.System#Collections#IList#Item(System.Int32)
  - System.Array.System#Collections#IList#Remove(System.Object)
  - System.Array.System#Collections#IList#RemoveAt(System.Int32)
  - System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  langs:
  - csharp
  - vb
  name: Array
  nameWithType: Array
  fullName: System.Array
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Array
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 67
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: 'public abstract class Array : IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable'
    content.vb: >-
      Public MustInherit Class Array
          Implements IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Array.Length
  commentId: P:System.Array.Length
  id: Length
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Array.Length
  fullName: System.Array.Length
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 70
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Array.Rank
  commentId: P:System.Array.Rank
  id: Rank
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Rank
  nameWithType: Array.Rank
  fullName: System.Array.Rank
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rank
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 71
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public int Rank { get; }
    content.vb: Public ReadOnly Property Rank As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Array.System#Collections#ICollection#Count
  commentId: P:System.Array.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.Count
  nameWithType: Array.ICollection.Count
  fullName: System.Array.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.Count
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 72
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int ICollection.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  nameWithType.vb: Array.System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.Count
- uid: System.Array.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Array.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: Array.ICollection.IsSynchronized
  fullName: System.Array.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 73
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Array.System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Array.System#Collections#ICollection#SyncRoot
  commentId: P:System.Array.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: Array.ICollection.SyncRoot
  fullName: System.Array.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: Array.System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Array.System#Collections#IList#IsFixedSize
  commentId: P:System.Array.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  nameWithType: Array.IList.IsFixedSize
  fullName: System.Array.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsFixedSize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 75
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsFixedSize
  nameWithType.vb: Array.System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Array.System#Collections#IList#IsReadOnly
  commentId: P:System.Array.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  nameWithType: Array.IList.IsReadOnly
  fullName: System.Array.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsReadOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 76
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsReadOnly
  nameWithType.vb: Array.System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Array.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: Array.IList.Item[Int32]
  fullName: System.Array.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.this[]
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 77
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: Array.System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Array.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Int32, Int32, Object)
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object)
  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 78
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch(Array array, int index, int length, object value)
    content.vb: Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: value
      type: System.Object
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Int32, Int32, Object, IComparer)
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)
  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 79
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer)
    content.vb: Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: value
      type: System.Object
    - id: comparer
      type: System.Collections.IComparer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch(System.Array,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object)
  id: BinarySearch(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Object)
  nameWithType: Array.BinarySearch(Array, Object)
  fullName: System.Array.BinarySearch(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 80
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch(Array array, object value)
    content.vb: Public Shared Function BinarySearch(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Object, IComparer)
  nameWithType: Array.BinarySearch(Array, Object, IComparer)
  fullName: System.Array.BinarySearch(System.Array, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 81
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch(Array array, object value, IComparer comparer)
    content.vb: Public Shared Function BinarySearch(array As Array, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    - id: comparer
      type: System.Collections.IComparer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch``1(``0[],``0)
  commentId: M:System.Array.BinarySearch``1(``0[],``0)
  id: BinarySearch``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T)
  nameWithType: Array.BinarySearch<T>(T[], T)
  fullName: System.Array.BinarySearch<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 82
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch<T>(T[] array, T value)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.BinarySearch(Of T)(T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), T)
  name.vb: BinarySearch(Of T)(T(), T)
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T, IComparer<T>)
  nameWithType: Array.BinarySearch<T>(T[], T, IComparer<T>)
  fullName: System.Array.BinarySearch<T>(T[], T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 83
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), value As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.BinarySearch(Of T)(T(), T, IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), T, IComparer(Of T))
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T)
  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 84
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch<T>(T[] array, int index, int length, T value)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.BinarySearch(Of T)(T(), Int32, Int32, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T)
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T)
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 85
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: value
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Clear(Array, Int32, Int32)
  nameWithType: Array.Clear(Array, Int32, Int32)
  fullName: System.Array.Clear(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 86
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Clear(Array array, int index, int length)
    content.vb: Public Shared Sub Clear(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Clone
  commentId: M:System.Array.Clone
  id: Clone
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Array.Clone()
  fullName: System.Array.Clone()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 87
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public object Clone()
    content.vb: Public Function Clone As Object
    return:
      type: System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  nameWithType: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  fullName: System.Array.ConstrainedCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConstrainedCopy
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 88
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    content.vb: Public Shared Sub ConstrainedCopy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: sourceIndex
      type: System.Int32
    - id: destinationArray
      type: System.Array
    - id: destinationIndex
      type: System.Int32
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  id: Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Copy(Array, Array, Int32)
  nameWithType: Array.Copy(Array, Array, Int32)
  fullName: System.Array.Copy(System.Array, System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Copy
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Copy(Array sourceArray, Array destinationArray, int length)
    content.vb: Public Shared Sub Copy(sourceArray As Array, destinationArray As Array, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: destinationArray
      type: System.Array
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Copy(Array, Int32, Array, Int32, Int32)
  nameWithType: Array.Copy(Array, Int32, Array, Int32, Int32)
  fullName: System.Array.Copy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Copy
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 90
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    content.vb: Public Shared Sub Copy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: sourceIndex
      type: System.Int32
    - id: destinationArray
      type: System.Array
    - id: destinationIndex
      type: System.Int32
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.CopyTo(System.Array,System.Int32)
  commentId: M:System.Array.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: Array.CopyTo(Array, Int32)
  fullName: System.Array.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 91
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32)
  id: CreateInstance(System.Type,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32)
  nameWithType: Array.CreateInstance(Type, Int32)
  fullName: System.Array.CreateInstance(System.Type, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 92
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static Array CreateInstance(Type elementType, int length)
    content.vb: Public Shared Function CreateInstance(elementType As Type, length As Integer) As Array
    parameters:
    - id: elementType
      type: System.Type
    - id: length
      type: System.Int32
    return:
      type: System.Array
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[])
  id: CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32[])
  nameWithType: Array.CreateInstance(Type, Int32[])
  fullName: System.Array.CreateInstance(System.Type, System.Int32[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 93
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static Array CreateInstance(Type elementType, params int[] lengths)
    content.vb: Public Shared Function CreateInstance(elementType As Type, ParamArray lengths As Integer()) As Array
    parameters:
    - id: elementType
      type: System.Type
    - id: lengths
      type: System.Int32[]
    return:
      type: System.Array
  nameWithType.vb: Array.CreateInstance(Type, Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32())
  name.vb: CreateInstance(Type, Int32())
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  id: CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32[], Int32[])
  nameWithType: Array.CreateInstance(Type, Int32[], Int32[])
  fullName: System.Array.CreateInstance(System.Type, System.Int32[], System.Int32[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 94
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds)
    content.vb: Public Shared Function CreateInstance(elementType As Type, lengths As Integer(), lowerBounds As Integer()) As Array
    parameters:
    - id: elementType
      type: System.Type
    - id: lengths
      type: System.Int32[]
    - id: lowerBounds
      type: System.Int32[]
    return:
      type: System.Array
  nameWithType.vb: Array.CreateInstance(Type, Int32(), Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32(), System.Int32())
  name.vb: CreateInstance(Type, Int32(), Int32())
- uid: System.Array.Empty``1
  commentId: M:System.Array.Empty``1
  id: Empty``1
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Empty<T>()
  nameWithType: Array.Empty<T>()
  fullName: System.Array.Empty<T>()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 95
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static T[] Empty<T>()
    content.vb: Public Shared Function Empty(Of T) As T()
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
  nameWithType.vb: Array.Empty(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Empty(Of T)()
  name.vb: Empty(Of T)()
- uid: System.Array.Exists``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  id: Exists``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Exists<T>(T[], Predicate<T>)
  nameWithType: Array.Exists<T>(T[], Predicate<T>)
  fullName: System.Array.Exists<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 96
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static bool Exists<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function Exists(Of T)(array As T(), match As Predicate(Of T)) As Boolean
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
  nameWithType.vb: Array.Exists(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Exists(Of T)(T(), System.Predicate(Of T))
  name.vb: Exists(Of T)(T(), Predicate(Of T))
- uid: System.Array.Find``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  id: Find``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Find<T>(T[], Predicate<T>)
  nameWithType: Array.Find<T>(T[], Predicate<T>)
  fullName: System.Array.Find<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 97
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static T Find<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function Find(Of T)(array As T(), match As Predicate(Of T)) As T
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
  nameWithType.vb: Array.Find(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Find(Of T)(T(), System.Predicate(Of T))
  name.vb: Find(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  id: FindAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindAll<T>(T[], Predicate<T>)
  nameWithType: Array.FindAll<T>(T[], Predicate<T>)
  fullName: System.Array.FindAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 98
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static T[] FindAll<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindAll(Of T)(array As T(), match As Predicate(Of T)) As T()
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
  nameWithType.vb: Array.FindAll(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindAll(Of T)(T(), System.Predicate(Of T))
  name.vb: FindAll(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 99
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Int32, Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 100
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: startIndex
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.FindIndex(Of T)(T(), Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Predicate{``0})
  id: FindIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 101
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int FindIndex<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.FindIndex(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindLast``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  id: FindLast``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLast<T>(T[], Predicate<T>)
  nameWithType: Array.FindLast<T>(T[], Predicate<T>)
  fullName: System.Array.FindLast<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLast
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 102
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static T FindLast<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindLast(Of T)(array As T(), match As Predicate(Of T)) As T
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
  nameWithType.vb: Array.FindLast(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLast(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLast(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 103
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 104
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: startIndex
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 105
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int FindLastIndex<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Predicate(Of T))
- uid: System.Array.GetEnumerator
  commentId: M:System.Array.GetEnumerator
  id: GetEnumerator
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Array.GetEnumerator()
  fullName: System.Array.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 106
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetLength(System.Int32)
  commentId: M:System.Array.GetLength(System.Int32)
  id: GetLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetLength(Int32)
  nameWithType: Array.GetLength(Int32)
  fullName: System.Array.GetLength(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetLength
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 107
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public int GetLength(int dimension)
    content.vb: Public Function GetLength(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetLowerBound(System.Int32)
  commentId: M:System.Array.GetLowerBound(System.Int32)
  id: GetLowerBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetLowerBound(Int32)
  nameWithType: Array.GetLowerBound(Int32)
  fullName: System.Array.GetLowerBound(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetLowerBound
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 108
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public int GetLowerBound(int dimension)
    content.vb: Public Function GetLowerBound(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetUpperBound(System.Int32)
  commentId: M:System.Array.GetUpperBound(System.Int32)
  id: GetUpperBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetUpperBound(Int32)
  nameWithType: Array.GetUpperBound(Int32)
  fullName: System.Array.GetUpperBound(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetUpperBound
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 109
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public int GetUpperBound(int dimension)
    content.vb: Public Function GetUpperBound(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetValue(System.Int32)
  commentId: M:System.Array.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  nameWithType: Array.GetValue(Int32)
  fullName: System.Array.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 110
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public object GetValue(int index)
    content.vb: Public Function GetValue(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetValue(System.Int32[])
  commentId: M:System.Array.GetValue(System.Int32[])
  id: GetValue(System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetValue(Int32[])
  nameWithType: Array.GetValue(Int32[])
  fullName: System.Array.GetValue(System.Int32[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 111
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public object GetValue(params int[] indices)
    content.vb: Public Function GetValue(ParamArray indices As Integer()) As Object
    parameters:
    - id: indices
      type: System.Int32[]
    return:
      type: System.Object
  nameWithType.vb: Array.GetValue(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Array.GetValue(System.Int32())
  name.vb: GetValue(Int32())
- uid: System.Array.IndexOf(System.Array,System.Object)
  commentId: M:System.Array.IndexOf(System.Array,System.Object)
  id: IndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object)
  nameWithType: Array.IndexOf(Array, Object)
  fullName: System.Array.IndexOf(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 112
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int IndexOf(Array array, object value)
    content.vb: Public Shared Function IndexOf(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object, Int32)
  nameWithType: Array.IndexOf(Array, Object, Int32)
  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 113
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int IndexOf(Array array, object value, int startIndex)
    content.vb: Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    - id: startIndex
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object, Int32, Int32)
  nameWithType: Array.IndexOf(Array, Object, Int32, Int32)
  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 114
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int IndexOf(Array array, object value, int startIndex, int count)
    content.vb: Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.IndexOf``1(``0[],``0)
  commentId: M:System.Array.IndexOf``1(``0[],``0)
  id: IndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T)
  nameWithType: Array.IndexOf<T>(T[], T)
  fullName: System.Array.IndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 115
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int IndexOf<T>(T[] array, T value)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.IndexOf(Of T)(T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T)
  name.vb: IndexOf(Of T)(T(), T)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32)
  fullName: System.Array.IndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 116
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int IndexOf<T>(T[] array, T value, int startIndex)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    - id: startIndex
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.IndexOf(Of T)(T(), T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32, Int32)
  fullName: System.Array.IndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 117
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int IndexOf<T>(T[] array, T value, int startIndex, int count)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.IndexOf(Of T)(T(), T, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32, Int32)
- uid: System.Array.Initialize
  commentId: M:System.Array.Initialize
  id: Initialize
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: Array.Initialize()
  fullName: System.Array.Initialize()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Initialize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 118
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  id: LastIndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object)
  nameWithType: Array.LastIndexOf(Array, Object)
  fullName: System.Array.LastIndexOf(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 119
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int LastIndexOf(Array array, object value)
    content.vb: Public Shared Function LastIndexOf(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object, Int32)
  nameWithType: Array.LastIndexOf(Array, Object, Int32)
  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 120
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int LastIndexOf(Array array, object value, int startIndex)
    content.vb: Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    - id: startIndex
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object, Int32, Int32)
  nameWithType: Array.LastIndexOf(Array, Object, Int32, Int32)
  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 121
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int LastIndexOf(Array array, object value, int startIndex, int count)
    content.vb: Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
    - id: value
      type: System.Object
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.LastIndexOf``1(``0[],``0)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0)
  id: LastIndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T)
  nameWithType: Array.LastIndexOf<T>(T[], T)
  fullName: System.Array.LastIndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 122
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T)
  name.vb: LastIndexOf(Of T)(T(), T)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32)
  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 123
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    - id: startIndex
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32, Int32)
  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 124
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
    - id: value
      type: '{T}'
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Int32
  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32, Int32)
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  commentId: M:System.Array.Resize``1(``0[]@,System.Int32)
  id: Resize``1(``0[]@,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Resize<T>(ref T[], Int32)
  nameWithType: Array.Resize<T>(ref T[], Int32)
  fullName: System.Array.Resize<T>(ref T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Resize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 125
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Resize<T>(ref T[] array, int newSize)
    content.vb: Public Shared Sub Resize(Of T)(ByRef array As T(), newSize As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: newSize
      type: System.Int32
    typeParameters:
    - id: T
  nameWithType.vb: Array.Resize(Of T)(ByRef T(), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Resize(Of T)(ByRef T(), System.Int32)
  name.vb: Resize(Of T)(ByRef T(), Int32)
- uid: System.Array.Reverse(System.Array)
  commentId: M:System.Array.Reverse(System.Array)
  id: Reverse(System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Reverse(Array)
  nameWithType: Array.Reverse(Array)
  fullName: System.Array.Reverse(System.Array)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 126
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Reverse(Array array)
    content.vb: Public Shared Sub Reverse(array As Array)
    parameters:
    - id: array
      type: System.Array
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Reverse(Array, Int32, Int32)
  nameWithType: Array.Reverse(Array, Int32, Int32)
  fullName: System.Array.Reverse(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 127
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Reverse(Array array, int index, int length)
    content.vb: Public Shared Sub Reverse(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.SetValue(System.Object,System.Int32)
  commentId: M:System.Array.SetValue(System.Object,System.Int32)
  id: SetValue(System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: SetValue(Object, Int32)
  nameWithType: Array.SetValue(Object, Int32)
  fullName: System.Array.SetValue(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 128
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public void SetValue(object value, int index)
    content.vb: Public Sub SetValue(value As Object, index As Integer)
    parameters:
    - id: value
      type: System.Object
    - id: index
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.SetValue(System.Object,System.Int32[])
  commentId: M:System.Array.SetValue(System.Object,System.Int32[])
  id: SetValue(System.Object,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: SetValue(Object, Int32[])
  nameWithType: Array.SetValue(Object, Int32[])
  fullName: System.Array.SetValue(System.Object, System.Int32[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 129
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public void SetValue(object value, params int[] indices)
    content.vb: Public Sub SetValue(value As Object, ParamArray indices As Integer())
    parameters:
    - id: value
      type: System.Object
    - id: indices
      type: System.Int32[]
  nameWithType.vb: Array.SetValue(Object, Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Array.SetValue(System.Object, System.Int32())
  name.vb: SetValue(Object, Int32())
- uid: System.Array.Sort(System.Array)
  commentId: M:System.Array.Sort(System.Array)
  id: Sort(System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array)
  nameWithType: Array.Sort(Array)
  fullName: System.Array.Sort(System.Array)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 130
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array array)
    content.vb: Public Shared Sub Sort(array As Array)
    parameters:
    - id: array
      type: System.Array
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array)
  commentId: M:System.Array.Sort(System.Array,System.Array)
  id: Sort(System.Array,System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array)
  nameWithType: Array.Sort(Array, Array)
  fullName: System.Array.Sort(System.Array, System.Array)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 131
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array keys, Array items)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array)
    parameters:
    - id: keys
      type: System.Array
    - id: items
      type: System.Array
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, IComparer)
  nameWithType: Array.Sort(Array, Array, IComparer)
  fullName: System.Array.Sort(System.Array, System.Array, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 132
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array keys, Array items, IComparer comparer)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array, comparer As IComparer)
    parameters:
    - id: keys
      type: System.Array
    - id: items
      type: System.Array
    - id: comparer
      type: System.Collections.IComparer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, Int32, Int32)
  nameWithType: Array.Sort(Array, Array, Int32, Int32)
  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 133
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array keys, Array items, int index, int length)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer)
    parameters:
    - id: keys
      type: System.Array
    - id: items
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, Int32, Int32, IComparer)
  nameWithType: Array.Sort(Array, Array, Int32, Int32, IComparer)
  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 134
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array keys, Array items, int index, int length, IComparer comparer)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer, comparer As IComparer)
    parameters:
    - id: keys
      type: System.Array
    - id: items
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: comparer
      type: System.Collections.IComparer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, IComparer)
  nameWithType: Array.Sort(Array, IComparer)
  fullName: System.Array.Sort(System.Array, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 135
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array array, IComparer comparer)
    content.vb: Public Shared Sub Sort(array As Array, comparer As IComparer)
    parameters:
    - id: array
      type: System.Array
    - id: comparer
      type: System.Collections.IComparer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Int32, Int32)
  nameWithType: Array.Sort(Array, Int32, Int32)
  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 136
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array array, int index, int length)
    content.vb: Public Shared Sub Sort(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Int32, Int32, IComparer)
  nameWithType: Array.Sort(Array, Int32, Int32, IComparer)
  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 137
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort(Array array, int index, int length, IComparer comparer)
    content.vb: Public Shared Sub Sort(array As Array, index As Integer, length As Integer, comparer As IComparer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: comparer
      type: System.Collections.IComparer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort``1(``0[])
  commentId: M:System.Array.Sort``1(``0[])
  id: Sort``1(``0[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[])
  nameWithType: Array.Sort<T>(T[])
  fullName: System.Array.Sort<T>(T[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 138
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<T>(T[] array)
    content.vb: Public Shared Sub Sort(Of T)(array As T())
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
  nameWithType.vb: Array.Sort(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T())
  name.vb: Sort(Of T)(T())
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], IComparer<T>)
  nameWithType: Array.Sort<T>(T[], IComparer<T>)
  fullName: System.Array.Sort<T>(T[], System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 139
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<T>(T[] array, IComparer<T> comparer)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), comparer As IComparer(Of T))
    parameters:
    - id: array
      type: '{T}[]'
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    typeParameters:
    - id: T
  nameWithType.vb: Array.Sort(Of T)(T(), IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), IComparer(Of T))
- uid: System.Array.Sort``1(``0[],System.Comparison{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Comparison{``0})
  id: Sort``1(``0[],System.Comparison{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Comparison<T>)
  nameWithType: Array.Sort<T>(T[], Comparison<T>)
  fullName: System.Array.Sort<T>(T[], System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 140
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<T>(T[] array, Comparison<T> comparison)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), comparison As Comparison(Of T))
    parameters:
    - id: array
      type: '{T}[]'
    - id: comparison
      type: System.Comparison{{T}}
    typeParameters:
    - id: T
  nameWithType.vb: Array.Sort(Of T)(T(), Comparison(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Comparison(Of T))
  name.vb: Sort(Of T)(T(), Comparison(Of T))
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32)
  id: Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32)
  nameWithType: Array.Sort<T>(T[], Int32, Int32)
  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 141
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<T>(T[] array, int index, int length)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
  nameWithType.vb: Array.Sort(Of T)(T(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32)
  name.vb: Sort(Of T)(T(), Int32, Int32)
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32, IComparer<T>)
  nameWithType: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)
  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 142
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    typeParameters:
    - id: T
  nameWithType.vb: Array.Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
- uid: System.Array.Sort``2(``0[],``1[])
  commentId: M:System.Array.Sort``2(``0[],``1[])
  id: Sort``2(``0[],``1[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[])
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[])
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[])
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 143
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue())
    parameters:
    - id: keys
      type: '{TKey}[]'
    - id: items
      type: '{TValue}[]'
    typeParameters:
    - id: TKey
    - id: TValue
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue())
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue())
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 144
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), comparer As IComparer(Of TKey))
    parameters:
    - id: keys
      type: '{TKey}[]'
    - id: items
      type: '{TValue}[]'
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TKey
    - id: TValue
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Collections.Generic.IComparer(Of TKey))
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  id: Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 145
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer)
    parameters:
    - id: keys
      type: '{TKey}[]'
    - id: items
      type: '{TValue}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: TKey
    - id: TValue
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32)
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 146
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer, comparer As IComparer(Of TKey))
    parameters:
    - id: keys
      type: '{TKey}[]'
    - id: items
      type: '{TValue}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TKey
    - id: TValue
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of TKey))
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))
- uid: System.Array.System#Collections#IList#Add(System.Object)
  commentId: M:System.Array.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  nameWithType: Array.IList.Add(Object)
  fullName: System.Array.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Add
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 147
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: Array.System.Collections.IList.Add(Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.Array.System#Collections#IList#Clear
  commentId: M:System.Array.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Clear()
  nameWithType: Array.IList.Clear()
  fullName: System.Array.System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Clear
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 148
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  implements:
  - System.Collections.IList.Clear
  nameWithType.vb: Array.System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Array.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  nameWithType: Array.IList.Contains(Object)
  fullName: System.Array.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Contains
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 149
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: Array.System.Collections.IList.Contains(Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Array.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  nameWithType: Array.IList.IndexOf(Object)
  fullName: System.Array.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 150
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: Array.System.Collections.IList.IndexOf(Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  nameWithType: Array.IList.Insert(Int32, Object)
  fullName: System.Array.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Insert
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 151
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: Array.System.Collections.IList.Insert(Int32, Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Array.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: Array.IList.Remove(Object)
  fullName: System.Array.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 152
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: Array.System.Collections.IList.Remove(Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Array.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.RemoveAt(Int32)
  nameWithType: Array.IList.RemoveAt(Int32)
  fullName: System.Array.System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.RemoveAt
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 153
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: void IList.RemoveAt(int index)
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
    parameters:
    - id: index
      type: System.Int32
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: Array.System.Collections.IList.RemoveAt(Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: Array.IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Array.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 154
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
    parameters:
    - id: other
      type: System.Object
    - id: comparer
      type: System.Collections.IComparer
    return:
      type: System.Int32
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  nameWithType.vb: Array.System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 155
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
    parameters:
    - id: other
      type: System.Object
    - id: comparer
      type: System.Collections.IEqualityComparer
    return:
      type: System.Boolean
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  nameWithType.vb: Array.System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 156
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
    return:
      type: System.Int32
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  nameWithType.vb: Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  id: TrueForAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: TrueForAll<T>(T[], Predicate<T>)
  nameWithType: Array.TrueForAll<T>(T[], Predicate<T>)
  fullName: System.Array.TrueForAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrueForAll
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 157
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static bool TrueForAll<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function TrueForAll(Of T)(array As T(), match As Predicate(Of T)) As Boolean
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
  nameWithType.vb: Array.TrueForAll(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.TrueForAll(Of T)(T(), System.Predicate(Of T))
  name.vb: TrueForAll(Of T)(T(), Predicate(Of T))
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: Collections.IList
  nameWithType: Collections.IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IStructuralComparable
  commentId: T:System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  nameWithType: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  commentId: T:System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  nameWithType: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: false
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.IComparer
  commentId: T:System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  nameWithType: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: '!:System.Collections.Generic.IComparer{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: false
  name: Collections.Generic.IComparer<>
  nameWithType: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  nameWithType.vb: Collections.Generic.IComparer(Of )
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: false
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Predicate{{T}}
  commentId: '!:System.Predicate{``0}'
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: false
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullname.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  nameWithType: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Comparison{{T}}
  commentId: '!:System.Comparison{`0}'
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: false
  name: Comparison<>
  nameWithType: Comparison<>
  fullName: System.Comparison<>
  nameWithType.vb: Comparison(Of )
  fullname.vb: System.Comparison(Of )
  name.vb: Comparison(Of )
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}[]'
  name: TKey[]
  nameWithType: TKey[]
  fullName: TKey[]
  nameWithType.vb: TKey()
  fullname.vb: TKey()
  name.vb: TKey()
  spec.csharp:
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{TValue}[]'
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  nameWithType.vb: TValue()
  fullname.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IComparer{{TKey}}
  commentId: '!:System.Collections.Generic.IComparer{``1}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  nameWithType: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  nameWithType.vb: Collections.Generic.IComparer(Of TKey)
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: false
  name: CompareTo(Object, IComparer)
  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    nameWithType: IStructuralComparable.CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    nameWithType: IStructuralComparable.CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals(Object, IEqualityComparer)
  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    nameWithType: IStructuralEquatable.Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    nameWithType: IStructuralEquatable.Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEqualityComparer
  commentId: T:System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  nameWithType: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    nameWithType: IStructuralEquatable.GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    nameWithType: IStructuralEquatable.GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    nameWithType: )
    fullName: )
