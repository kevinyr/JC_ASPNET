items:
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  id: ConcurrentDictionary`2
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values
  name: ConcurrentDictionary<TKey, TValue>
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 32
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.
  syntax:
    content: 'public class ConcurrentDictionary<TKey, TValue> : Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IDictionary<TKey, TValue>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: Public Class ConcurrentDictionary(Of TKey, TValue) Inherits Generic.ICollection(Of Generic.KeyValuePair(Of TKey, TValue)) Implements Generic.IDictionary(Of TKey, TValue), Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)), Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue)), Generic.IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
    - id: TValue
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 115
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary()
    content.vb: Public Sub New
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>)
  name.vb: ConcurrentDictionary(Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  type: Constructor
  source:
    remote: &o1
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 75
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection)
    content.vb: Public Sub New(collection As Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are copied to the new <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* or any of its keys is  null.'
  - type: System.ArgumentException
    description: '*collection* contains one or more duplicate keys.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, Generic.IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)), Generic.IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 76
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> has the default concurrency level, has the default initial capacity, and uses the specified  <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection, Generic.IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(collection As Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)), comparer As Generic.IEqualityComparer(Of TKey))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are copied to the new <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* or *comparer* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary(Generic.IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Generic.IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 77
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the default concurrency level and capacity, and uses the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ConcurrentDictionary(Generic.IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As Generic.IEqualityComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The equality comparison implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*comparer* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary(Int32, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, Generic.IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Int32, Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)), Generic.IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 78
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref>, and uses the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection, Generic.IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, collection As Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)), comparer As Generic.IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> concurrently.
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are copied to the new <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* or *comparer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*concurrencyLevel* is less than 1.'
  - type: System.ArgumentException
    description: '*collection* contains one or more duplicate keys.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary(Int32, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 132
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer)
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> concurrently.
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*concurrencyLevel* is less than 1.-or-*capacity* is less than 0.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary(Int32, Int32, Generic.IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Int32, Int32, Generic.IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 80
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity, Generic.IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer, comparer As Generic.IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> concurrently.
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*comparer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*concurrencyLevel* or *capacity* is less than 1.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Count
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 924
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets the number of key/value pairs contained in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.IsEmpty
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1110
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> is empty.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> is empty; otherwise, false.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Item[TKey]
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Item(TKey)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 878
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get or set.
    return:
      type: '{TValue}'
      description: The value of the key/value pair at the specified index.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
  - type: System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and *key* does not exist in the collection.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  id: Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1185
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a collection containing the keys in the <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Generic.ICollection<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As Generic.ICollection(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: A collection of keys in the <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  id: Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1208
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a collection that contains the values in the <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Generic.ICollection<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As Generic.ICollection(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: A collection that contains the values in the <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>)
  name.vb: AddOrUpdate(TKey, TValue, Func(Of TKey, TValue, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, TValue, System.Func(Of TKey, TValue, TValue))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 96
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> if the key does not already exist, or updates a key/value pair in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> by using the specified function if the key already exists.
  syntax:
    content: public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValue
      type: '{TValue}'
      description: The value to be added for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value
    return:
      type: '{TValue}'
      description: The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* or *updateValueFactory* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  name.vb: AddOrUpdate(TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 97
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Uses the specified functions to add a key/value pair to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> if the key does not already exist, or to update a key/value pair in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> if the key already exists.
  syntax:
    content: public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value
    return:
      type: '{TValue}'
      description: The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
  exceptions:
  - type: System.ArgumentNullException
    description: '*key*, *addValueFactory*, or *updateValueFactory* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Clear()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 571
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Removes all keys and values from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 325
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Determines whether the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> contains the specified key.
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> contains an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 738
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator for the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  id: GetOrAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: GetOrAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 994
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd(TKey key, TValue value)
    content.vb: Public Function GetOrAdd(key As TKey, value As TValue) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: the value to be added, if the key does not already exist
    return:
      type: '{TValue}'
      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  id: GetOrAdd(`0,System.Func{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: GetOrAdd(TKey, Func<TKey, TValue>)
  name.vb: GetOrAdd(TKey, Func(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, System.Func(Of TKey, TValue))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 102
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> by using the specified function, if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)
    content.vb: Public Function GetOrAdd(key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for the key
    return:
      type: '{TValue}'
      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* or *valueFactory* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ToArray()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 645
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the key and value pairs stored in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> to a new array.
  syntax:
    content: public Generic.KeyValuePair<TKey, TValue>[] ToArray()
    content.vb: Public Function ToArray As Generic.KeyValuePair(Of TKey, TValue)()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: A new array containing a snapshot of key and value pairs copied from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: TryAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 308
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified key and value to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool TryAdd(TKey key, TValue value)
    content.vb: Public Function TryAdd(key As TKey, value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be  null for reference types.
    return:
      type: System.Boolean
      description: true if the key/value pair was added to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> successfully; false if the key already exists.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>).
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: TryGetValue(TKey, out TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 433
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to get the value associated with the specified key from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, contains the object from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> that has the specified key, or the default value of the type if the operation failed.
    return:
      type: System.Boolean
      description: true if the key was found in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  id: TryRemove(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: TryRemove(TKey, out TValue)
  name.vb: TryRemove(TKey, ByRef TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryRemove(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 345
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return the value that has the specified key from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool TryRemove(TKey key, out TValue value)
    content.vb: Public Function TryRemove(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove and return.
    - id: value
      type: '{TValue}'
      description: When this method returns, contains the object removed from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>, or the default value of  the TValue type if *key* does not exist.
    return:
      type: System.Boolean
      description: true if the object was removed successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  id: TryUpdate(`0,`1,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  name: TryUpdate(TKey, TValue, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryUpdate(TKey, TValue, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 481
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
  syntax:
    content: public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue)
    content.vb: Public Function TryUpdate(key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value is compared with *comparisonValue* and possibly replaced.
    - id: newValue
      type: '{TValue}'
      description: The value that replaces the value of the element that has the specified *key* if the comparison results in equality.
    - id: comparisonValue
      type: '{TValue}'
      description: The value that is compared to the value of the element that has the specified *key*.
    return:
      type: System.Boolean
      description: true if the value with *key* was equal to *comparisonValue* and was replaced with *newValue*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  name.vb: IDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<TKey, TValue>>
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<TKey, TValue>
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  name.vb: Collections.Generic.IDictionary(Of , )
  fullName: System.Collections.Generic.IDictionary<, >
  fullName.vb: System.Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<>
  name.vb: IReadOnlyCollection(Of )
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: IReadOnlyDictionary<, >
  name.vb: IReadOnlyDictionary(Of , )
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: IEqualityComparer<>
  name.vb: IEqualityComparer(Of )
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.ICollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  name.vb: ICollection(Of TKey)
  fullName: System.Collections.Generic.ICollection<TKey>
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.ICollection<>
  name.vb: Collections.Generic.ICollection(Of )
  fullName: System.Collections.Generic.ICollection<>
  fullName.vb: System.Collections.Generic.ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: Collections.Generic.ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: Collections.Generic.ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  name.vb: ICollection(Of TValue)
  fullName: System.Collections.Generic.ICollection<TValue>
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func{{TKey},{TValue},{TValue}}
  definition: System.Func`3
  name: Func<TKey, TValue, TValue>
  name.vb: Func(Of TKey, TValue, TValue)
  fullName: System.Func<TKey, TValue, TValue>
  fullName.vb: System.Func(Of TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},{TValue}}
  definition: System.Func`2
  name: Func<TKey, TValue>
  name.vb: Func(Of TKey, TValue)
  fullName: System.Func<TKey, TValue>
  fullName.vb: System.Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  name.vb: Func(Of , )
  fullName: System.Func<, >
  fullName.vb: System.Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  name.vb: Collections.Generic.IEnumerator(Of )
  fullName: System.Collections.Generic.IEnumerator<>
  fullName.vb: System.Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  name.vb: KeyValuePair(Of TKey, TValue)()
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
