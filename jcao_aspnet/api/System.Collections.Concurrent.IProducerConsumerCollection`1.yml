items:
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  commentId: T:System.Collections.Concurrent.IProducerConsumerCollection`1
  id: IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  langs:
  - csharp
  - vb
  name: IProducerConsumerCollection<T>
  nameWithType: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  type: Interface
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IProducerConsumerCollection
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 173
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: 'public interface IProducerConsumerCollection<T> : Generic.IEnumerable<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Interface IProducerConsumerCollection(Of T)
          Inherits Generic.IEnumerable(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
  nameWithType.vb: IProducerConsumerCollection(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 175
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: void CopyTo(T[] array, int index)
    content.vb: Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
  nameWithType.vb: IProducerConsumerCollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: IProducerConsumerCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 176
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: T[] ToArray()
    content.vb: Function ToArray As T()
    return:
      type: '{T}[]'
  nameWithType.vb: IProducerConsumerCollection(Of T).ToArray()
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).ToArray()
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T)
  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 177
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool TryAdd(T item)
    content.vb: Function TryAdd(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: IProducerConsumerCollection(Of T).TryAdd(T)
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryAdd(T)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T)
  nameWithType: IProducerConsumerCollection<T>.TryTake(out T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 178
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool TryTake(out T item)
    content.vb: Function TryTake(ByRef item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: IProducerConsumerCollection(Of T).TryTake(ByRef T)
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryTake(ByRef T)
  name.vb: TryTake(ByRef T)
references:
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
