items:
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  id: OrderablePartitioner`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  name: OrderablePartitioner<TSource>
  name.vb: OrderablePartitioner(Of TSource)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 61
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Represents a particular manner of splitting an orderable data source into multiple partitions.
  syntax:
    content: 'public abstract class OrderablePartitioner<TSource> : Partitioner<TSource>'
    content.vb: Public MustInherit Class OrderablePartitioner(Of TSource) Inherits Partitioner(Of TSource)
    typeParameters:
    - id: TSource
  inheritance:
  - System.Object
  - System.Collections.Concurrent.Partitioner{{TSource}}
  inheritedMembers:
  - System.Collections.Concurrent.Partitioner{{TSource}}.SupportsDynamicPartitions
- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner(Boolean, Boolean, Boolean)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.OrderablePartitioner(System.Boolean, System.Boolean, System.Boolean)
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).OrderablePartitioner(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 82
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Called from constructors in derived classes to initialize the <xref href="System.Collections.Concurrent.OrderablePartitioner`1" data-throw-if-not-resolved="false"></xref> class with the specified constraints on the index keys.
  syntax:
    content: protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized)
    content.vb: Protected Sub New(keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)
    parameters:
    - id: keysOrderedInEachPartition
      type: System.Boolean
      description: Indicates whether the elements in each partition are yielded in the order of increasing keys.
    - id: keysOrderedAcrossPartitions
      type: System.Boolean
      description: Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.
    - id: keysNormalized
      type: System.Boolean
      description: Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  id: KeysNormalized
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: KeysNormalized
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysNormalized
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysNormalized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 154
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether order keys are normalized.
  syntax:
    content: public bool KeysNormalized { get; }
    content.vb: Public ReadOnly Property KeysNormalized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the keys are normalized; otherwise false.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  id: KeysOrderedAcrossPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: KeysOrderedAcrossPartitions
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysOrderedAcrossPartitions
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 144
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether elements in an earlier partition always come before elements in a later partition.
  syntax:
    content: public bool KeysOrderedAcrossPartitions { get; }
    content.vb: Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the elements in an earlier partition always come before elements in a later partition; otherwise false.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  id: KeysOrderedInEachPartition
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: KeysOrderedInEachPartition
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysOrderedInEachPartition
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 134
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether elements in each partition are yielded in the order of increasing keys.
  syntax:
    content: public bool KeysOrderedInEachPartition { get; }
    content.vb: Public ReadOnly Property KeysOrderedInEachPartition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the elements in each partition are yielded in the order of increasing keys; otherwise false.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetDynamicPartitions()
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetDynamicPartitions()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 206
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  syntax:
    content: public override Generic.IEnumerable<TSource> GetDynamicPartitions()
    content.vb: Public Overrides Function GetDynamicPartitions As Generic.IEnumerable(Of TSource)
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An object that can create partitions over the underlying data source.
  overridden: System.Collections.Concurrent.Partitioner{{TSource}}.GetDynamicPartitions
  exceptions:
  - type: System.NotSupportedException
    description: Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  id: GetOrderableDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: GetOrderableDynamicPartitions()
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetOrderableDynamicPartitions()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 126
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  syntax:
    content: public virtual Generic.IEnumerable<Generic.KeyValuePair<long, TSource>> GetOrderableDynamicPartitions()
    content.vb: Public Overridable Function GetOrderableDynamicPartitions As Generic.IEnumerable(Of Generic.KeyValuePair(Of Long, TSource))
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}
      description: An object that can create partitions over the underlying data source.
  exceptions:
  - type: System.NotSupportedException
    description: Dynamic partitioning is not supported by this partitioner.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  id: GetOrderablePartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: GetOrderablePartitions(Int32)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderablePartitions(System.Int32)
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetOrderablePartitions(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 99
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the specified number of orderable partitions.
  syntax:
    content: public abstract Generic.IList<Generic.IEnumerator<Generic.KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount)
    content.vb: Public MustOverride Function GetOrderablePartitions(partitionCount As Integer) As Generic.IList(Of Generic.IEnumerator(Of Generic.KeyValuePair(Of Long, TSource)))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}}
      description: A list containing *partitionCount* enumerators.
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetPartitions(System.Int32)
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetPartitions(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 165
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the given number of ordered partitions.
  syntax:
    content: public override Generic.IList<Generic.IEnumerator<TSource>> GetPartitions(int partitionCount)
    content.vb: Public Overrides Function GetPartitions(partitionCount As Integer) As Generic.IList(Of Generic.IEnumerator(Of TSource))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
      description: A list containing *partitionCount* enumerators.
  overridden: System.Collections.Concurrent.Partitioner{{TSource}}.GetPartitions(System.Int32)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Collections.Concurrent.Partitioner<TSource>
  name.vb: Collections.Concurrent.Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  name: SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Collections.Concurrent.Partitioner<>
  name.vb: Collections.Concurrent.Partitioner(Of )
  fullName: System.Collections.Concurrent.Partitioner<>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of )
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSource>
  name.vb: Collections.Generic.IEnumerable(Of TSource)
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<Int64, TSource>>
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of Int64, TSource))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64, TSource>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Int64, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}}
  definition: System.Collections.Generic.IList`1
  name: Generic.IList<Generic.IEnumerator<Generic.KeyValuePair<Int64, TSource>>>
  name.vb: Generic.IList(Of Generic.IEnumerator(Of Generic.KeyValuePair(Of Int64, TSource)))
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64, TSource>>>
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.Int64, TSource)))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IList<>
  name.vb: Collections.Generic.IList(Of )
  fullName: System.Collections.Generic.IList<>
  fullName.vb: System.Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
  definition: System.Collections.Generic.IList`1
  name: Generic.IList<Generic.IEnumerator<TSource>>
  name.vb: Generic.IList(Of Generic.IEnumerator(Of TSource))
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: true
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
