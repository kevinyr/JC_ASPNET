items:
- uid: System.Collections.Generic.Dictionary`2.ValueCollection
  commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection
  id: Dictionary`2.ValueCollection
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  - System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  - System.Collections.Generic.Dictionary`2.ValueCollection.Count
  - System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  langs:
  - csharp
  - vb
  name: Dictionary<TKey, TValue>.ValueCollection
  nameWithType: Dictionary<TKey, TValue>.ValueCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueCollection
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 130
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: 'public sealed class ValueCollection : ICollection<TValue>, IEnumerable<TValue>, IReadOnlyCollection<TValue>, ICollection, IEnumerable'
    content.vb: >-
      Public NotInheritable Class ValueCollection
          Inherits ICollection(Of TValue)
          Implements IEnumerable(Of TValue), IReadOnlyCollection(Of TValue), ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{{TValue}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection
  name.vb: Dictionary(Of TKey, TValue).ValueCollection
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.Dictionary{`0,`1})'
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: ValueCollection(Dictionary<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ValueCollection.ValueCollection(Dictionary<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 132
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public ValueCollection(Dictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As Dictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary`2
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection.ValueCollection(Dictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.ValueCollection(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: ValueCollection(Dictionary(Of TKey, TValue))
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Count
  commentId: P:System.Collections.Generic.Dictionary`2.ValueCollection.Count
  id: Count
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Dictionary<TKey, TValue>.ValueCollection.Count
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 133
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.Count
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: CopyTo(TValue[], Int32)
  nameWithType: Dictionary<TKey, TValue>.ValueCollection.CopyTo(TValue[], Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.CopyTo(TValue[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 137
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(TValue[] array, int index)
    content.vb: Public Sub CopyTo(array As TValue(), index As Integer)
    parameters:
    - id: array
      type: '{TValue}[]'
    - id: index
      type: System.Int32
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection.CopyTo(TValue(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.CopyTo(TValue(), System.Int32)
  name.vb: CopyTo(TValue(), Int32)
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.ValueCollection.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 138
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public Dictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Dictionary(Of TKey, TValue).ValueCollection.Enumerator
    return:
      type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection.GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection.GetEnumerator()
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  commentId: '!:System.Collections.Generic.IEnumerable{`1}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  nameWithType.vb: IEnumerable(Of TValue)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{TValue}}
  commentId: '!:System.Collections.Generic.IReadOnlyCollection{`1}'
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<TValue>
  nameWithType: IReadOnlyCollection<TValue>
  fullName: System.Collections.Generic.IReadOnlyCollection<TValue>
  nameWithType.vb: IReadOnlyCollection(Of TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of TValue)
  name.vb: IReadOnlyCollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  nameWithType: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  nameWithType.vb: Generic.IReadOnlyCollection(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.Dictionary<, >
  nameWithType: Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Collections.Generic.Dictionary(Of , )
  fullname.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TValue}[]'
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  nameWithType.vb: TValue()
  fullname.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary.ValueCollection.Enumerator<>
  nameWithType: Dictionary.ValueCollection.Enumerator<>
  fullName: System.Collections.Generic.Dictionary.ValueCollection.Enumerator<>
  nameWithType.vb: Dictionary.ValueCollection.Enumerator(Of )
  fullname.vb: System.Collections.Generic.Dictionary.ValueCollection.Enumerator(Of )
  name.vb: Dictionary.ValueCollection.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
    name: Dictionary.ValueCollection.Enumerator
    nameWithType: Dictionary.ValueCollection.Enumerator
    fullName: System.Collections.Generic.Dictionary.ValueCollection.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
    name: Dictionary.ValueCollection.Enumerator
    nameWithType: Dictionary.ValueCollection.Enumerator
    fullName: System.Collections.Generic.Dictionary.ValueCollection.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
