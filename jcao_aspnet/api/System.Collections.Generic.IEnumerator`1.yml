items:
- uid: System.Collections.Generic.IEnumerator`1
  id: IEnumerator`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.IEnumerator`1.Current
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  type: Interface
  source:
    remote: &o0
      path: src/mscorlib/src/System/Collections/Generic/IEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Collections/Generic/IEnumerator.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Supports a simple iteration over a generic collection.
  syntax:
    content: 'public interface IEnumerator<out T> : IEnumerator, IDisposable'
    content.vb: Public Interface IEnumerator(Of Out T) Inherits IEnumerator, IDisposable
    typeParameters:
    - id: T
  inheritedMembers:
  - System.Collections.IEnumerator.MoveNext
  - System.Collections.IEnumerator.Reset
  - System.IDisposable.Dispose
- uid: System.Collections.Generic.IEnumerator`1.Current
  id: Current
  parent: System.Collections.Generic.IEnumerator`1
  name: Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Generic/IEnumerator.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Gets the element in the collection at the current position of the enumerator.
  syntax:
    content: T Current { get; }
    content.vb: ReadOnly Property Current As T
    parameters: []
    return:
      type: '{T}'
      description: The element in the collection at the current position of the enumerator.
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: false
  name: MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: false
  name: Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
