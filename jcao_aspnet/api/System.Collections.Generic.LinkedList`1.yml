items:
- uid: System.Collections.Generic.LinkedList`1
  commentId: T:System.Collections.Generic.LinkedList`1
  id: LinkedList`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.LinkedList`1.#ctor
  - System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddFirst(`0)
  - System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddLast(`0)
  - System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.Clear
  - System.Collections.Generic.LinkedList`1.Contains(`0)
  - System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.LinkedList`1.Count
  - System.Collections.Generic.LinkedList`1.Find(`0)
  - System.Collections.Generic.LinkedList`1.FindLast(`0)
  - System.Collections.Generic.LinkedList`1.First
  - System.Collections.Generic.LinkedList`1.GetEnumerator
  - System.Collections.Generic.LinkedList`1.Last
  - System.Collections.Generic.LinkedList`1.Remove(`0)
  - System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.RemoveFirst
  - System.Collections.Generic.LinkedList`1.RemoveLast
  langs:
  - csharp
  - vb
  name: LinkedList<T>
  nameWithType: LinkedList<T>
  fullName: System.Collections.Generic.LinkedList<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LinkedList
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 208
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: 'public class LinkedList<T> : ICollection<T>, IEnumerable<T>, IReadOnlyCollection<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Class LinkedList(Of T)
          Inherits ICollection(Of T)
          Implements IEnumerable(Of T), IReadOnlyCollection(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  nameWithType.vb: LinkedList(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.LinkedList(Of T)
  name.vb: LinkedList(Of T)
- uid: System.Collections.Generic.LinkedList`1.#ctor
  commentId: M:System.Collections.Generic.LinkedList`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: LinkedList()
  nameWithType: LinkedList<T>.LinkedList()
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 210
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedList()
    content.vb: Public Sub New
  nameWithType.vb: LinkedList(Of T).LinkedList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).LinkedList()
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: LinkedList(IEnumerable<T>)
  nameWithType: LinkedList<T>.LinkedList(IEnumerable<T>)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 211
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedList(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  nameWithType.vb: LinkedList(Of T).LinkedList(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).LinkedList(System.Collections.Generic.IEnumerable(Of T))
  name.vb: LinkedList(IEnumerable(Of T))
- uid: System.Collections.Generic.LinkedList`1.Count
  commentId: P:System.Collections.Generic.LinkedList`1.Count
  id: Count
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LinkedList<T>.Count
  fullName: System.Collections.Generic.LinkedList<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 212
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: LinkedList(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Count
- uid: System.Collections.Generic.LinkedList`1.First
  commentId: P:System.Collections.Generic.LinkedList`1.First
  id: First
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: First
  nameWithType: LinkedList<T>.First
  fullName: System.Collections.Generic.LinkedList<T>.First
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 213
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> First { get; }
    content.vb: Public ReadOnly Property First As LinkedListNode(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).First
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.LinkedList(Of T).First
- uid: System.Collections.Generic.LinkedList`1.Last
  commentId: P:System.Collections.Generic.LinkedList`1.Last
  id: Last
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Last
  nameWithType: LinkedList<T>.Last
  fullName: System.Collections.Generic.LinkedList<T>.Last
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 214
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> Last { get; }
    content.vb: Public ReadOnly Property Last As LinkedListNode(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).Last
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Last
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  id: AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddAfter(LinkedListNode<T>, T)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>, T)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(System.Collections.Generic.LinkedListNode<T>, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAfter
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 218
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> AddAfter(LinkedListNode<T> node, T value)
    content.vb: Public Function AddAfter(node As LinkedListNode(Of T), value As T) As LinkedListNode(Of T)
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddAfter(LinkedListNode(Of T), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddAfter(System.Collections.Generic.LinkedListNode(Of T), T)
  name.vb: AddAfter(LinkedListNode(Of T), T)
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  id: AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddAfter(LinkedListNode<T>, LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>, LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(System.Collections.Generic.LinkedListNode<T>, System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAfter
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 219
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void AddAfter(LinkedListNode<T> node, LinkedListNode<T> newNode)
    content.vb: Public Sub AddAfter(node As LinkedListNode(Of T), newNode As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
    - id: newNode
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddAfter(LinkedListNode(Of T), LinkedListNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddAfter(System.Collections.Generic.LinkedListNode(Of T), System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddAfter(LinkedListNode(Of T), LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  id: AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddBefore(LinkedListNode<T>, T)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>, T)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(System.Collections.Generic.LinkedListNode<T>, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddBefore
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 220
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> AddBefore(LinkedListNode<T> node, T value)
    content.vb: Public Function AddBefore(node As LinkedListNode(Of T), value As T) As LinkedListNode(Of T)
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddBefore(LinkedListNode(Of T), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddBefore(System.Collections.Generic.LinkedListNode(Of T), T)
  name.vb: AddBefore(LinkedListNode(Of T), T)
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  id: AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddBefore(LinkedListNode<T>, LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>, LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(System.Collections.Generic.LinkedListNode<T>, System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddBefore
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 221
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void AddBefore(LinkedListNode<T> node, LinkedListNode<T> newNode)
    content.vb: Public Sub AddBefore(node As LinkedListNode(Of T), newNode As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
    - id: newNode
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddBefore(LinkedListNode(Of T), LinkedListNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddBefore(System.Collections.Generic.LinkedListNode(Of T), System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddBefore(LinkedListNode(Of T), LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.AddFirst(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddFirst(`0)
  id: AddFirst(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddFirst(T)
  nameWithType: LinkedList<T>.AddFirst(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddFirst
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 222
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> AddFirst(T value)
    content.vb: Public Function AddFirst(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddFirst(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddFirst(T)
- uid: System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  id: AddFirst(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddFirst(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddFirst(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddFirst
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 223
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void AddFirst(LinkedListNode<T> node)
    content.vb: Public Sub AddFirst(node As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddFirst(LinkedListNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddFirst(System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddFirst(LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.AddLast(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddLast(`0)
  id: AddLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddLast(T)
  nameWithType: LinkedList<T>.AddLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddLast
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 224
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> AddLast(T value)
    content.vb: Public Function AddLast(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddLast(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddLast(T)
- uid: System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  id: AddLast(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddLast(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddLast(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddLast
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 225
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void AddLast(LinkedListNode<T> node)
    content.vb: Public Sub AddLast(node As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).AddLast(LinkedListNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddLast(System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddLast(LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.Clear
  commentId: M:System.Collections.Generic.LinkedList`1.Clear
  id: Clear
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: LinkedList<T>.Clear()
  fullName: System.Collections.Generic.LinkedList<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 226
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  nameWithType.vb: LinkedList(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Clear()
- uid: System.Collections.Generic.LinkedList`1.Contains(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: LinkedList<T>.Contains(T)
  fullName: System.Collections.Generic.LinkedList<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 227
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains(T value)
    content.vb: Public Function Contains(value As T) As Boolean
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: LinkedList(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Contains(T)
- uid: System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: LinkedList<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.LinkedList<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 228
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
  nameWithType.vb: LinkedList(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.LinkedList`1.Find(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.Find(`0)
  id: Find(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Find(T)
  nameWithType: LinkedList<T>.Find(T)
  fullName: System.Collections.Generic.LinkedList<T>.Find(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 229
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> Find(T value)
    content.vb: Public Function Find(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).Find(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Find(T)
- uid: System.Collections.Generic.LinkedList`1.FindLast(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.FindLast(`0)
  id: FindLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: FindLast(T)
  nameWithType: LinkedList<T>.FindLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.FindLast(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLast
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 230
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode<T> FindLast(T value)
    content.vb: Public Function FindLast(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).FindLast(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).FindLast(T)
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator
  commentId: M:System.Collections.Generic.LinkedList`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: LinkedList<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 231
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedList<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As LinkedList(Of T).Enumerator
    return:
      type: System.Collections.Generic.LinkedList`1.Enumerator
  nameWithType.vb: LinkedList(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).GetEnumerator()
- uid: System.Collections.Generic.LinkedList`1.Remove(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: LinkedList<T>.Remove(T)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 232
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove(T value)
    content.vb: Public Function Remove(value As T) As Boolean
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: LinkedList(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Remove(T)
- uid: System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  id: Remove(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Remove(LinkedListNode<T>)
  nameWithType: LinkedList<T>.Remove(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 233
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Remove(LinkedListNode<T> node)
    content.vb: Public Sub Remove(node As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
  nameWithType.vb: LinkedList(Of T).Remove(LinkedListNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Remove(System.Collections.Generic.LinkedListNode(Of T))
  name.vb: Remove(LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst
  commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  id: RemoveFirst
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: RemoveFirst()
  nameWithType: LinkedList<T>.RemoveFirst()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveFirst()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveFirst
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 234
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveFirst()
    content.vb: Public Sub RemoveFirst
  nameWithType.vb: LinkedList(Of T).RemoveFirst()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).RemoveFirst()
- uid: System.Collections.Generic.LinkedList`1.RemoveLast
  commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  id: RemoveLast
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: RemoveLast()
  nameWithType: LinkedList<T>.RemoveLast()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveLast()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveLast
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 235
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveLast()
    content.vb: Public Sub RemoveLast
  nameWithType.vb: LinkedList(Of T).RemoveLast()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).RemoveLast()
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: '!:System.Collections.Generic.IEnumerable{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  nameWithType: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: Generic.IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: '!:System.Collections.Generic.IReadOnlyCollection{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  nameWithType: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: Generic.IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  nameWithType: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  nameWithType.vb: Generic.IReadOnlyCollection(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.LinkedListNode{{T}}
  commentId: T:System.Collections.Generic.LinkedListNode{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.LinkedListNode`1
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
  nameWithType.vb: LinkedListNode(Of T)
  fullname.vb: System.Collections.Generic.LinkedListNode(Of T)
  name.vb: LinkedListNode(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    nameWithType: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    nameWithType: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.LinkedListNode`1
  commentId: T:System.Collections.Generic.LinkedListNode`1
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
  nameWithType.vb: LinkedListNode(Of T)
  fullname.vb: System.Collections.Generic.LinkedListNode(Of T)
  name.vb: LinkedListNode(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    nameWithType: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    nameWithType: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.LinkedList`1.Enumerator
  commentId: T:System.Collections.Generic.LinkedList`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedList.Enumerator<>
  nameWithType: LinkedList.Enumerator<>
  fullName: System.Collections.Generic.LinkedList.Enumerator<>
  nameWithType.vb: LinkedList.Enumerator(Of )
  fullname.vb: System.Collections.Generic.LinkedList.Enumerator(Of )
  name.vb: LinkedList.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.LinkedList`1.Enumerator
    name: LinkedList.Enumerator
    nameWithType: LinkedList.Enumerator
    fullName: System.Collections.Generic.LinkedList.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.LinkedList`1.Enumerator
    name: LinkedList.Enumerator
    nameWithType: LinkedList.Enumerator
    fullName: System.Collections.Generic.LinkedList.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
