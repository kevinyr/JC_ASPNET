items:
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  id: List`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.List`1.#ctor
  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.#ctor(System.Int32)
  - System.Collections.Generic.List`1.Add(`0)
  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.AsReadOnly
  - System.Collections.Generic.List`1.BinarySearch(`0)
  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Capacity
  - System.Collections.Generic.List`1.Clear
  - System.Collections.Generic.List`1.Contains(`0)
  - System.Collections.Generic.List`1.CopyTo(`0[])
  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Count
  - System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.ForEach(System.Action{`0})
  - System.Collections.Generic.List`1.GetEnumerator
  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.Item(System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Remove(`0)
  - System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Reverse
  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Sort
  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.ToArray
  - System.Collections.Generic.List`1.TrimExcess
  - System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  langs:
  - csharp
  - vb
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: List
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 258
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: 'public class List<T> : ICollection<T>, IEnumerable<T>, IList<T>, IReadOnlyCollection<T>, IReadOnlyList<T>, ICollection, IEnumerable, IList'
    content.vb: >-
      Public Class List(Of T)
          Inherits ICollection(Of T)
          Implements IEnumerable(Of T), IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), ICollection, IEnumerable, IList
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IList
  nameWithType.vb: List(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
- uid: System.Collections.Generic.List`1.#ctor
  commentId: M:System.Collections.Generic.List`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List()
  nameWithType: List<T>.List()
  fullName: System.Collections.Generic.List<T>.List()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 260
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public List()
    content.vb: Public Sub New
  nameWithType.vb: List(Of T).List()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List()
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List(IEnumerable<T>)
  nameWithType: List<T>.List(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 261
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public List(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  nameWithType.vb: List(Of T).List(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List(System.Collections.Generic.IEnumerable(Of T))
  name.vb: List(IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List(Int32)
  nameWithType: List<T>.List(Int32)
  fullName: System.Collections.Generic.List<T>.List(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 262
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public List(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  nameWithType.vb: List(Of T).List(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List(System.Int32)
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  id: Capacity
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 263
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).Capacity
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  id: Count
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 264
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 265
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
  nameWithType.vb: List(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 272
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
  nameWithType.vb: List(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 273
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void AddRange(IEnumerable<T> collection)
    content.vb: Public Sub AddRange(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsReadOnly
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 274
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public ObjectModel.ReadOnlyCollection<T> AsReadOnly()
    content.vb: Public Function AsReadOnly As ObjectModel.ReadOnlyCollection(Of T)
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
  nameWithType.vb: List(Of T).AsReadOnly()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  id: BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 275
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int BinarySearch(T item)
    content.vb: Public Function BinarySearch(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).BinarySearch(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 276
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int BinarySearch(T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 277
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    - id: item
      type: '{T}'
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  id: Clear
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 278
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  nameWithType.vb: List(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 279
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: List(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 280
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
  nameWithType.vb: List(Of T).CopyTo(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 281
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 282
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    content.vb: Public Sub CopyTo(index As Integer, array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    - id: count
      type: System.Int32
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  id: Exists(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 283
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Exists(Predicate<T> match)
    content.vb: Public Function Exists(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Boolean
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  id: Find(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 284
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T Find(Predicate<T> match)
    content.vb: Public Function Find(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: '{T}'
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  id: FindAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 285
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public List<T> FindAll(Predicate<T> match)
    content.vb: Public Function FindAll(match As Predicate(Of T)) As List(Of T)
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Collections.Generic.List`1
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 286
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int FindIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 287
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int FindIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  id: FindIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 288
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int FindIndex(Predicate<T> match)
    content.vb: Public Function FindIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  id: FindLast(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLast
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 289
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T FindLast(Predicate<T> match)
    content.vb: Public Function FindLast(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: '{T}'
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 290
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
    - id: count
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 291
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int FindLastIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  id: FindLastIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 292
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int FindLastIndex(Predicate<T> match)
    content.vb: Public Function FindLastIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  id: ForEach(System.Action{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForEach
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 293
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void ForEach(Action<T> action)
    content.vb: Public Sub ForEach(action As Action(Of T))
    parameters:
    - id: action
      type: System.Action{{T}}
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 294
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public List<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As List(Of T).Enumerator
    return:
      type: System.Collections.Generic.List`1.Enumerator
  nameWithType.vb: List(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 295
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public List<T> GetRange(int index, int count)
    content.vb: Public Function GetRange(index As Integer, count As Integer) As List(Of T)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Collections.Generic.List`1
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 296
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOf(T item)
    content.vb: Public Function IndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 297
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOf(T item, int index)
    content.vb: Public Function IndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 298
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOf(T item, int index, int count)
    content.vb: Public Function IndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 299
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Insert(int index, T item)
    content.vb: Public Sub Insert(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
  nameWithType.vb: List(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 300
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void InsertRange(int index, IEnumerable<T> collection)
    content.vb: Public Sub InsertRange(index As Integer, collection As IEnumerable(Of T))
    parameters:
    - id: index
      type: System.Int32
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 301
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int LastIndexOf(T item)
    content.vb: Public Function LastIndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).LastIndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 302
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int LastIndexOf(T item, int index)
    content.vb: Public Function LastIndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 303
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int LastIndexOf(T item, int index, int count)
    content.vb: Public Function LastIndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 304
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: List(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 305
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int RemoveAll(Predicate<T> match)
    content.vb: Public Function RemoveAll(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 306
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 307
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveRange(int index, int count)
    content.vb: Public Sub RemoveRange(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 308
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Reverse()
    content.vb: Public Sub Reverse
  nameWithType.vb: List(Of T).Reverse()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 309
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Reverse(int index, int count)
    content.vb: Public Sub Reverse(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  id: Sort
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 310
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  nameWithType.vb: List(Of T).Sort()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 311
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Sort(IComparer<T> comparer)
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 312
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Sort(Comparison<T> comparison)
    content.vb: Public Sub Sort(comparison As Comparison(Of T))
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 313
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Sort(int index, int count, IComparer<T> comparer)
    content.vb: Public Sub Sort(index As Integer, count As Integer, comparer As IComparer(Of T))
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 322
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
  nameWithType.vb: List(Of T).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 323
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  nameWithType.vb: List(Of T).TrimExcess()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  id: TrueForAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrueForAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 324
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool TrueForAll(Predicate<T> match)
    content.vb: Public Function TrueForAll(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Boolean
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: '!:System.Collections.Generic.IEnumerable{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  nameWithType: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: Generic.IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: '!:System.Collections.Generic.IList{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: '!:System.Collections.Generic.IReadOnlyCollection{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  nameWithType: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: Generic.IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  commentId: '!:System.Collections.Generic.IReadOnlyList{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: Collections.IList
  nameWithType: Collections.IList
  fullName: System.Collections.IList
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: false
  name: Collections.Generic.IList<>
  nameWithType: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: Collections.Generic.IList(Of )
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    nameWithType: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    nameWithType: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  nameWithType: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  nameWithType.vb: Generic.IReadOnlyCollection(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: false
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: System.Collections.Generic.IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{`0}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ObjectModel.ReadOnlyCollection<T>
  nameWithType: ObjectModel.ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ObjectModel.ReadOnlyCollection(Of T)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ObjectModel.ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ObjectModel.ReadOnlyCollection
    nameWithType: ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ObjectModel.ReadOnlyCollection
    nameWithType: ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType: Collections.ObjectModel.ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    nameWithType: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    nameWithType: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: '!:System.Collections.Generic.IComparer{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: false
  name: Collections.Generic.IComparer<>
  nameWithType: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  nameWithType.vb: Collections.Generic.IComparer(Of )
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Predicate{{T}}
  commentId: '!:System.Predicate{``0}'
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: false
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: System.Predicate<>
  nameWithType.vb: Predicate(Of )
  fullname.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.List<>
  nameWithType: Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: Collections.Generic.List(Of )
  fullname.vb: System.Collections.Generic.List(Of )
  name.vb: Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    nameWithType: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    nameWithType: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: '!:System.Action{`0}'
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: false
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Enumerator
  commentId: T:System.Collections.Generic.List`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: List.Enumerator<>
  nameWithType: List.Enumerator<>
  fullName: System.Collections.Generic.List.Enumerator<>
  nameWithType.vb: List.Enumerator(Of )
  fullname.vb: System.Collections.Generic.List.Enumerator(Of )
  name.vb: List.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    nameWithType: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    nameWithType: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison{{T}}
  commentId: '!:System.Comparison{`0}'
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: false
  name: Comparison<>
  nameWithType: Comparison<>
  fullName: System.Comparison<>
  nameWithType.vb: Comparison(Of )
  fullname.vb: System.Comparison(Of )
  name.vb: Comparison(Of )
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
