items:
- uid: System.Collections.Generic.Queue`1
  id: Queue`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Queue`1.#ctor
  - System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Queue`1.#ctor(System.Int32)
  - System.Collections.Generic.Queue`1.Clear
  - System.Collections.Generic.Queue`1.Contains(`0)
  - System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Queue`1.Count
  - System.Collections.Generic.Queue`1.Dequeue
  - System.Collections.Generic.Queue`1.Enqueue(`0)
  - System.Collections.Generic.Queue`1.GetEnumerator
  - System.Collections.Generic.Queue`1.Peek
  - System.Collections.Generic.Queue`1.ToArray
  - System.Collections.Generic.Queue`1.TrimExcess
  name: Queue<T>
  name.vb: Queue(Of T)
  fullName: System.Collections.Generic.Queue<T>
  fullName.vb: System.Collections.Generic.Queue(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 19
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Represents a first-in, first-out collection of objects.
  syntax:
    content: 'public class Queue<T> : IEnumerable<T>, IReadOnlyCollection<T>, ICollection, IEnumerable'
    content.vb: Public Class Queue(Of T) Inherits IEnumerable(Of T) Implements IReadOnlyCollection(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
- uid: System.Collections.Generic.Queue`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Queue`1
  name: Queue()
  fullName: System.Collections.Generic.Queue<T>.Queue()
  fullName.vb: System.Collections.Generic.Queue(Of T).Queue()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 38
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> class that is empty and has the default initial capacity.
  syntax:
    content: public Queue()
    content.vb: Public Sub New
- uid: System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Queue`1
  name: Queue(IEnumerable<T>)
  name.vb: Queue(IEnumerable(Of T))
  fullName: System.Collections.Generic.Queue<T>.Queue(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.Queue(Of T).Queue(System.Collections.Generic.IEnumerable(Of T))
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 335
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
  syntax:
    content: public Queue(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose elements are copied to the new <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* is null.'
- uid: System.Collections.Generic.Queue`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Queue`1
  name: Queue(Int32)
  fullName: System.Collections.Generic.Queue<T>.Queue(System.Int32)
  fullName.vb: System.Collections.Generic.Queue(Of T).Queue(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 47
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> class that is empty and has the specified initial capacity.
  syntax:
    content: public Queue(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*capacity* is less than zero.'
- uid: System.Collections.Generic.Queue`1.Count
  id: Count
  parent: System.Collections.Generic.Queue`1
  name: Count
  fullName: System.Collections.Generic.Queue<T>.Count
  fullName.vb: System.Collections.Generic.Queue(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 69
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.Queue`1.Clear
  id: Clear
  parent: System.Collections.Generic.Queue`1
  name: Clear()
  fullName: System.Collections.Generic.Queue<T>.Clear()
  fullName.vb: System.Collections.Generic.Queue(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 94
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all objects from the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Generic.Queue`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Queue`1
  name: Contains(T)
  fullName: System.Collections.Generic.Queue<T>.Contains(T)
  fullName.vb: System.Collections.Generic.Queue(Of T).Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 270
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether an element is in the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Boolean
      description: true if *item* is found in the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>; otherwise, false.
- uid: System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Queue`1
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Generic.Queue<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Generic.Queue(Of T).CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 118
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> elements to an existing one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at the specified array index.
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in *array* at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*arrayIndex* is less than zero.'
  - type: System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> is greater than the available space from *arrayIndex* to the end of the destination *array*.
- uid: System.Collections.Generic.Queue`1.Dequeue
  id: Dequeue
  parent: System.Collections.Generic.Queue`1
  name: Dequeue()
  fullName: System.Collections.Generic.Queue<T>.Dequeue()
  fullName.vb: System.Collections.Generic.Queue(Of T).Dequeue()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 241
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes and returns the object at the beginning of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public T Dequeue()
    content.vb: Public Function Dequeue As T
    return:
      type: '{T}'
      description: The object that is removed from the beginning of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.InvalidOperationException
    description: The <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> is empty.
- uid: System.Collections.Generic.Queue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Generic.Queue`1
  name: Enqueue(T)
  fullName: System.Collections.Generic.Queue<T>.Enqueue(T)
  fullName.vb: System.Collections.Generic.Queue(Of T).Enqueue(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 199
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Adds an object to the end of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Enqueue(T item)
    content.vb: Public Sub Enqueue(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The object to add to the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
- uid: System.Collections.Generic.Queue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Queue`1
  name: GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Queue(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 221
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Queue<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Queue(Of T).Enumerator
    return:
      type: System.Collections.Generic.Queue`1.Enumerator
      description: An <xref href="System.Collections.Generic.Queue`1.Enumerator" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.Queue`1.Peek
  id: Peek
  parent: System.Collections.Generic.Queue`1
  name: Peek()
  fullName: System.Collections.Generic.Queue<T>.Peek()
  fullName.vb: System.Collections.Generic.Queue(Of T).Peek()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 258
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns the object at the beginning of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> without removing it.
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
      description: The object at the beginning of the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.InvalidOperationException
    description: The <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> is empty.
- uid: System.Collections.Generic.Queue`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Queue`1
  name: ToArray()
  fullName: System.Collections.Generic.Queue<T>.ToArray()
  fullName.vb: System.Collections.Generic.Queue(Of T).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 298
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref> elements to a new array.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: A new array containing elements copied from the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.Queue`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Queue`1
  name: TrimExcess()
  fullName: System.Collections.Generic.Queue<T>.TrimExcess()
  fullName.vb: System.Collections.Generic.Queue(Of T).TrimExcess()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Queue.cs
    startLine: 353
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sets the capacity to the actual number of elements in the <xref href="System.Collections.Generic.Queue`1" data-throw-if-not-resolved="false"></xref>, if that number is less than 90 percent of current capacity.
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  name.vb: IReadOnlyCollection(Of T)
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<>
  name.vb: IReadOnlyCollection(Of )
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  name.vb: Collections.Generic.IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Queue`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Queue.Enumerator<>
  name.vb: Queue.Enumerator(Of )
  fullName: System.Collections.Generic.Queue.Enumerator<>
  fullName.vb: System.Collections.Generic.Queue.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1.Enumerator
    name: Queue.Enumerator
    fullName: System.Collections.Generic.Queue.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1.Enumerator
    name: Queue.Enumerator
    fullName: System.Collections.Generic.Queue.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
