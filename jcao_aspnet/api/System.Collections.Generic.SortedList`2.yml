items:
- uid: System.Collections.Generic.SortedList`2
  id: SortedList`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SortedList`2.#ctor
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  - System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.Add(`0,`1)
  - System.Collections.Generic.SortedList`2.Capacity
  - System.Collections.Generic.SortedList`2.Clear
  - System.Collections.Generic.SortedList`2.Comparer
  - System.Collections.Generic.SortedList`2.ContainsKey(`0)
  - System.Collections.Generic.SortedList`2.ContainsValue(`1)
  - System.Collections.Generic.SortedList`2.Count
  - System.Collections.Generic.SortedList`2.GetEnumerator
  - System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  - System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  - System.Collections.Generic.SortedList`2.Item(`0)
  - System.Collections.Generic.SortedList`2.Keys
  - System.Collections.Generic.SortedList`2.Remove(`0)
  - System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  - System.Collections.Generic.SortedList`2.TrimExcess
  - System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.SortedList`2.Values
  name: SortedList<TKey, TValue>
  name.vb: SortedList(Of TKey, TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 49
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Represents a collection of key/value pairs that are sorted by key based on the associated <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation.
  syntax:
    content: 'public class SortedList<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: Public Class SortedList(Of TKey, TValue) Inherits ICollection(Of KeyValuePair(Of TKey, TValue)) Implements IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
    - id: TValue
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
- uid: System.Collections.Generic.SortedList`2.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedList`2
  name: SortedList()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList()
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 71
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the default initial capacity, and uses the default <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedList()
    content.vb: Public Sub New
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  name: SortedList(IComparer<TKey>)
  name.vb: SortedList(IComparer(Of TKey))
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IComparer(Of TKey))
  type: Constructor
  source:
    remote: &o1
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 471
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedList(IComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing keys.-or-null to use the default <xref href="System.Collections.Generic.Comparer`1" data-throw-if-not-resolved="false"></xref> for the type of the key.
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.Generic.SortedList`2
  name: SortedList(IDictionary<TKey, TValue>)
  name.vb: SortedList(IDictionary(Of TKey, TValue))
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IDictionary<TKey, TValue>)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IDictionary(Of TKey, TValue))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 472
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified <xref href="System.Collections.Generic.IDictionary`2" data-throw-if-not-resolved="false"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the default <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedList(IDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The <xref href="System.Collections.Generic.IDictionary`2" data-throw-if-not-resolved="false"></xref> whose elements are copied to the new <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: '*dictionary* is null.'
  - type: System.ArgumentException
    description: '*dictionary* contains one or more duplicate keys.'
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  name: SortedList(IDictionary<TKey, TValue>, IComparer<TKey>)
  name.vb: SortedList(IDictionary(Of TKey, TValue), IComparer(Of TKey))
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IComparer(Of TKey))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 473
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified <xref href="System.Collections.Generic.IDictionary`2" data-throw-if-not-resolved="false"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedList(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The <xref href="System.Collections.Generic.IDictionary`2" data-throw-if-not-resolved="false"></xref> whose elements are copied to the new <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing keys.-or-null to use the default <xref href="System.Collections.Generic.Comparer`1" data-throw-if-not-resolved="false"></xref> for the type of the key.
  exceptions:
  - type: System.ArgumentNullException
    description: '*dictionary* is null.'
  - type: System.ArgumentException
    description: '*dictionary* contains one or more duplicate keys.'
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.SortedList`2
  name: SortedList(Int32)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Int32)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 86
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the specified initial capacity, and uses the default <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedList(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*capacity* is less than zero.'
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  name: SortedList(Int32, IComparer<TKey>)
  name.vb: SortedList(Int32, IComparer(Of TKey))
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Int32, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Int32, System.Collections.Generic.IComparer(Of TKey))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 475
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedList(int capacity, IComparer<TKey> comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IComparer(Of TKey))
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> can contain.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing keys.-or-null to use the default <xref href="System.Collections.Generic.Comparer`1" data-throw-if-not-resolved="false"></xref> for the type of the key.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*capacity* is less than zero.'
- uid: System.Collections.Generic.SortedList`2.Capacity
  id: Capacity
  parent: System.Collections.Generic.SortedList`2
  name: Capacity
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Capacity
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Capacity
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 204
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets or sets the number of elements that the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> can contain.
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements that the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: <xref href="System.Collections.Generic.SortedList`2.Capacity" data-throw-if-not-resolved="false"></xref> is set to a value that is less than <xref href="System.Collections.Generic.SortedList`2.Count" data-throw-if-not-resolved="false"></xref>.
  - type: System.OutOfMemoryException
    description: There is not enough memory available on the system.
- uid: System.Collections.Generic.SortedList`2.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedList`2
  name: Comparer
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Comparer
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Comparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 240
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> for the sorted list.
  syntax:
    content: public IComparer<TKey> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IComparer(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IComparer{{TKey}}
      description: The <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> for the current <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedList`2.Count
  id: Count
  parent: System.Collections.Generic.SortedList`2
  name: Count
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Count
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 279
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the number of key/value pairs contained in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedList`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.SortedList`2
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Item[TKey]
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Item(TKey)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 586
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value to get or set.
    return:
      type: '{TValue}'
      description: The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href="System.Collections.Generic.KeyNotFoundException" data-throw-if-not-resolved="false"></xref> and a set operation creates a new element using the specified key.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
  - type: System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and *key* does not exist in the collection.
- uid: System.Collections.Generic.SortedList`2.Keys
  id: Keys
  parent: System.Collections.Generic.SortedList`2
  name: Keys
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Keys
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 291
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets a collection containing the keys in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>, in sorted order.
  syntax:
    content: public IList<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IList(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TKey}}
      description: A <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> containing the keys in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedList`2.Values
  id: Values
  parent: System.Collections.Generic.SortedList`2
  name: Values
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Values
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 327
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets a collection containing the values in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public IList<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As IList(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TValue}}
      description: A <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> containing the values in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedList`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.SortedList`2
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 163
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Adds an element with the specified key and value into the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be null for reference types.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
  - type: System.ArgumentException
    description: An element with the same key already exists in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedList`2.Clear
  id: Clear
  parent: System.Collections.Generic.SortedList`2
  name: Clear()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Clear()
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 407
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all elements from the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Generic.SortedList`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.SortedList`2
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 429
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> contains a specific key.
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> contains an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Generic.SortedList`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Generic.SortedList`2
  name: ContainsValue(TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.ContainsValue(TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).ContainsValue(TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 440
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> contains a specific value.
  syntax:
    content: public bool ContainsValue(TValue value)
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
    parameters:
    - id: value
      type: '{TValue}'
      description: The value to locate in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> contains an element with the specified value; otherwise, false.
- uid: System.Collections.Generic.SortedList`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedList`2
  name: GetEnumerator()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.GetEnumerator()
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 553
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An <xref href="System.Collections.Generic.IEnumerator`1" data-throw-if-not-resolved="false"></xref> of type <xref href="System.Collections.Generic.KeyValuePair`2" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  id: IndexOfKey(`0)
  parent: System.Collections.Generic.SortedList`2
  name: IndexOfKey(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.IndexOfKey(TKey)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).IndexOfKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 662
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified key and returns the zero-based index within the entire <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int IndexOfKey(TKey key)
    content.vb: Public Function IndexOfKey(key As TKey) As Integer
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: The zero-based index of *key* within the entire <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>, if found; otherwise, -1.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  id: IndexOfValue(`1)
  parent: System.Collections.Generic.SortedList`2
  name: IndexOfValue(TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.IndexOfValue(TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).IndexOfValue(TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 676
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified value and returns the zero-based index of the first occurrence within the entire <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int IndexOfValue(TValue value)
    content.vb: Public Function IndexOfValue(value As TValue) As Integer
    parameters:
    - id: value
      type: '{TValue}'
      description: The value to locate in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.  The value can be null for reference types.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of *value* within the entire <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>, if found; otherwise, -1.
- uid: System.Collections.Generic.SortedList`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedList`2
  name: Remove(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Remove(TKey)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 730
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes the element with the specified key from the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: true if the element is successfully removed; otherwise, false.  This method also returns false if *key* was not found in the original <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.SortedList`2
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.RemoveAt(System.Int32)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).RemoveAt(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 712
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes the element at the specified index of the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*index* is less than zero.-or-*index* is equal to or greater than <xref href="System.Collections.Generic.SortedList`2.Count" data-throw-if-not-resolved="false"></xref>.'
- uid: System.Collections.Generic.SortedList`2.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.SortedList`2
  name: TrimExcess()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.TrimExcess()
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).TrimExcess()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 755
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sets the capacity to the actual number of elements in the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref>, if that number is less than 90 percent of current capacity.
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
- uid: System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.SortedList`2
  name: TryGetValue(TKey, out TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 696
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the value associated with the specified key.
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the *value* parameter. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedList`2" data-throw-if-not-resolved="false"></xref> contains an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  name.vb: IDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<TKey, TValue>>
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<TKey, TValue>
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  name.vb: Collections.Generic.IDictionary(Of , )
  fullName: System.Collections.Generic.IDictionary<, >
  fullName.vb: System.Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<>
  name.vb: IReadOnlyCollection(Of )
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: IReadOnlyDictionary<, >
  name.vb: IReadOnlyDictionary(Of , )
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  name.vb: IComparer(Of TKey)
  fullName: System.Collections.Generic.IComparer<TKey>
  fullName.vb: System.Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<>
  name.vb: IComparer(Of )
  fullName: System.Collections.Generic.IComparer<>
  fullName.vb: System.Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.IList{{TKey}}
  definition: System.Collections.Generic.IList`1
  name: IList<TKey>
  name.vb: IList(Of TKey)
  fullName: System.Collections.Generic.IList<TKey>
  fullName.vb: System.Collections.Generic.IList(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IList<>
  name.vb: Collections.Generic.IList(Of )
  fullName: System.Collections.Generic.IList<>
  fullName.vb: System.Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{TValue}}
  definition: System.Collections.Generic.IList`1
  name: IList<TValue>
  name.vb: IList(Of TValue)
  fullName: System.Collections.Generic.IList<TValue>
  fullName.vb: System.Collections.Generic.IList(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  name.vb: Collections.Generic.IEnumerator(Of )
  fullName: System.Collections.Generic.IEnumerator<>
  fullName.vb: System.Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
