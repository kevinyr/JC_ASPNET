items:
- uid: System.Collections.Generic.SortedList`2
  commentId: T:System.Collections.Generic.SortedList`2
  id: SortedList`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SortedList`2.#ctor
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  - System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.Add(`0,`1)
  - System.Collections.Generic.SortedList`2.Capacity
  - System.Collections.Generic.SortedList`2.Clear
  - System.Collections.Generic.SortedList`2.Comparer
  - System.Collections.Generic.SortedList`2.ContainsKey(`0)
  - System.Collections.Generic.SortedList`2.ContainsValue(`1)
  - System.Collections.Generic.SortedList`2.Count
  - System.Collections.Generic.SortedList`2.GetEnumerator
  - System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  - System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  - System.Collections.Generic.SortedList`2.Item(`0)
  - System.Collections.Generic.SortedList`2.Keys
  - System.Collections.Generic.SortedList`2.Remove(`0)
  - System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  - System.Collections.Generic.SortedList`2.TrimExcess
  - System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.SortedList`2.Values
  langs:
  - csharp
  - vb
  name: SortedList<TKey, TValue>
  nameWithType: SortedList<TKey, TValue>
  fullName: System.Collections.Generic.SortedList<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortedList
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 471
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: 'public class SortedList<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class SortedList(Of TKey, TValue)
          Inherits ICollection(Of KeyValuePair(Of TKey, TValue))
          Implements IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
    - id: TValue
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  nameWithType.vb: SortedList(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue)
  name.vb: SortedList(Of TKey, TValue)
- uid: System.Collections.Generic.SortedList`2.#ctor
  commentId: M:System.Collections.Generic.SortedList`2.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList()
  nameWithType: SortedList<TKey, TValue>.SortedList()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 473
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public SortedList()
    content.vb: Public Sub New
  nameWithType.vb: SortedList(Of TKey, TValue).SortedList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList()
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(IComparer<TKey>)
  nameWithType: SortedList<TKey, TValue>.SortedList(IComparer<TKey>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 474
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public SortedList(IComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
  nameWithType.vb: SortedList(Of TKey, TValue).SortedList(IComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedList(IComparer(Of TKey))
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary<TKey, TValue>)
  nameWithType: SortedList<TKey, TValue>.SortedList(IDictionary<TKey, TValue>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 475
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public SortedList(IDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  nameWithType.vb: SortedList(Of TKey, TValue).SortedList(IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: SortedList(IDictionary(Of TKey, TValue))
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary<TKey, TValue>, IComparer<TKey>)
  nameWithType: SortedList<TKey, TValue>.SortedList(IDictionary<TKey, TValue>, IComparer<TKey>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 476
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public SortedList(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
  nameWithType.vb: SortedList(Of TKey, TValue).SortedList(IDictionary(Of TKey, TValue), IComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedList(IDictionary(Of TKey, TValue), IComparer(Of TKey))
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(Int32)
  nameWithType: SortedList<TKey, TValue>.SortedList(Int32)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 477
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public SortedList(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  nameWithType.vb: SortedList(Of TKey, TValue).SortedList(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Int32)
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(Int32, IComparer<TKey>)
  nameWithType: SortedList<TKey, TValue>.SortedList(Int32, IComparer<TKey>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Int32, System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 478
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public SortedList(int capacity, IComparer<TKey> comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IComparer(Of TKey))
    parameters:
    - id: capacity
      type: System.Int32
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
  nameWithType.vb: SortedList(Of TKey, TValue).SortedList(Int32, IComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Int32, System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedList(Int32, IComparer(Of TKey))
- uid: System.Collections.Generic.SortedList`2.Capacity
  commentId: P:System.Collections.Generic.SortedList`2.Capacity
  id: Capacity
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: SortedList<TKey, TValue>.Capacity
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Capacity
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 479
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: SortedList(Of TKey, TValue).Capacity
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Capacity
- uid: System.Collections.Generic.SortedList`2.Comparer
  commentId: P:System.Collections.Generic.SortedList`2.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: SortedList<TKey, TValue>.Comparer
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Comparer
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 480
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public IComparer<TKey> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IComparer(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IComparer{{TKey}}
  nameWithType.vb: SortedList(Of TKey, TValue).Comparer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Comparer
- uid: System.Collections.Generic.SortedList`2.Count
  commentId: P:System.Collections.Generic.SortedList`2.Count
  id: Count
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SortedList<TKey, TValue>.Count
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 481
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: SortedList(Of TKey, TValue).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Count
- uid: System.Collections.Generic.SortedList`2.Item(`0)
  commentId: P:System.Collections.Generic.SortedList`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: SortedList<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 482
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
  nameWithType.vb: SortedList(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.Generic.SortedList`2.Keys
  commentId: P:System.Collections.Generic.SortedList`2.Keys
  id: Keys
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: SortedList<TKey, TValue>.Keys
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 483
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public IList<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IList(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TKey}}
  nameWithType.vb: SortedList(Of TKey, TValue).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Keys
- uid: System.Collections.Generic.SortedList`2.Values
  commentId: P:System.Collections.Generic.SortedList`2.Values
  id: Values
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: SortedList<TKey, TValue>.Values
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 496
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public IList<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As IList(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TValue}}
  nameWithType.vb: SortedList(Of TKey, TValue).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Values
- uid: System.Collections.Generic.SortedList`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.SortedList`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: SortedList<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 497
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
  nameWithType.vb: SortedList(Of TKey, TValue).Add(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Add(TKey, TValue)
- uid: System.Collections.Generic.SortedList`2.Clear
  commentId: M:System.Collections.Generic.SortedList`2.Clear
  id: Clear
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SortedList<TKey, TValue>.Clear()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 498
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  nameWithType.vb: SortedList(Of TKey, TValue).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Clear()
- uid: System.Collections.Generic.SortedList`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: SortedList<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 499
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
  nameWithType.vb: SortedList(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.Generic.SortedList`2.ContainsValue(`1)
  commentId: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: ContainsValue(TValue)
  nameWithType: SortedList<TKey, TValue>.ContainsValue(TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.ContainsValue(TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsValue
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 500
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool ContainsValue(TValue value)
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
    parameters:
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
  nameWithType.vb: SortedList(Of TKey, TValue).ContainsValue(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).ContainsValue(TValue)
- uid: System.Collections.Generic.SortedList`2.GetEnumerator
  commentId: M:System.Collections.Generic.SortedList`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SortedList<TKey, TValue>.GetEnumerator()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 501
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  nameWithType.vb: SortedList(Of TKey, TValue).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).GetEnumerator()
- uid: System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  commentId: M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  id: IndexOfKey(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: IndexOfKey(TKey)
  nameWithType: SortedList<TKey, TValue>.IndexOfKey(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.IndexOfKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfKey
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 502
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOfKey(TKey key)
    content.vb: Public Function IndexOfKey(key As TKey) As Integer
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Int32
  nameWithType.vb: SortedList(Of TKey, TValue).IndexOfKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).IndexOfKey(TKey)
- uid: System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  commentId: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  id: IndexOfValue(`1)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: IndexOfValue(TValue)
  nameWithType: SortedList<TKey, TValue>.IndexOfValue(TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.IndexOfValue(TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfValue
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 503
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOfValue(TValue value)
    content.vb: Public Function IndexOfValue(value As TValue) As Integer
    parameters:
    - id: value
      type: '{TValue}'
    return:
      type: System.Int32
  nameWithType.vb: SortedList(Of TKey, TValue).IndexOfValue(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).IndexOfValue(TValue)
- uid: System.Collections.Generic.SortedList`2.Remove(`0)
  commentId: M:System.Collections.Generic.SortedList`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: SortedList<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 504
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
  nameWithType.vb: SortedList(Of TKey, TValue).Remove(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Remove(TKey)
- uid: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: SortedList<TKey, TValue>.RemoveAt(Int32)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 505
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  nameWithType.vb: SortedList(Of TKey, TValue).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).RemoveAt(System.Int32)
- uid: System.Collections.Generic.SortedList`2.TrimExcess
  commentId: M:System.Collections.Generic.SortedList`2.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: SortedList<TKey, TValue>.TrimExcess()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 517
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  nameWithType.vb: SortedList(Of TKey, TValue).TrimExcess()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).TrimExcess()
- uid: System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: SortedList<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 518
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
  nameWithType.vb: SortedList(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: '!:System.Collections.Generic.IDictionary{`0,`1}'
  definition: System.Collections.Generic.IDictionary`2
  name: Generic.IDictionary<TKey, TValue>
  nameWithType: Generic.IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: Generic.IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  nameWithType: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{`0,`1}}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  nameWithType: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  commentId: '!:System.Collections.Generic.IReadOnlyDictionary{`0,`1}'
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType: Generic.IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionary
  nameWithType: Collections.IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Generic.IDictionary<, >
  nameWithType: Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  nameWithType.vb: Generic.IDictionary(Of , )
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  nameWithType: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  nameWithType.vb: Generic.IReadOnlyCollection(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Generic.IReadOnlyDictionary<, >
  nameWithType: Generic.IReadOnlyDictionary<, >
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  nameWithType.vb: Generic.IReadOnlyDictionary(Of , )
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  name.vb: Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer{{TKey}}
  commentId: '!:System.Collections.Generic.IComparer{``1}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  nameWithType: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  nameWithType.vb: Collections.Generic.IComparer(Of TKey)
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: false
  name: Collections.Generic.IComparer<>
  nameWithType: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  nameWithType.vb: Collections.Generic.IComparer(Of )
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IList{{TKey}}
  commentId: '!:System.Collections.Generic.IList{`0}'
  definition: System.Collections.Generic.IList`1
  name: IList<TKey>
  nameWithType: IList<TKey>
  fullName: System.Collections.Generic.IList<TKey>
  nameWithType.vb: IList(Of TKey)
  fullname.vb: System.Collections.Generic.IList(Of TKey)
  name.vb: IList(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: false
  name: Collections.Generic.IList<>
  nameWithType: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: Collections.Generic.IList(Of )
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    nameWithType: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    nameWithType: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{TValue}}
  commentId: '!:System.Collections.Generic.IList{`1}'
  definition: System.Collections.Generic.IList`1
  name: IList<TValue>
  nameWithType: IList<TValue>
  fullName: System.Collections.Generic.IList<TValue>
  nameWithType.vb: IList(Of TValue)
  fullname.vb: System.Collections.Generic.IList(Of TValue)
  name.vb: IList(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}'
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>
  nameWithType: Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: false
  name: Generic.IEnumerator<>
  nameWithType: Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  nameWithType.vb: Generic.IEnumerator(Of )
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
