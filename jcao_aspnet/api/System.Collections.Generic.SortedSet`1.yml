items:
- uid: System.Collections.Generic.SortedSet`1
  id: SortedSet`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SortedSet`1.#ctor
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.Add(`0)
  - System.Collections.Generic.SortedSet`1.Clear
  - System.Collections.Generic.SortedSet`1.Comparer
  - System.Collections.Generic.SortedSet`1.Contains(`0)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.SortedSet`1.Count
  - System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.GetEnumerator
  - System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  - System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Max
  - System.Collections.Generic.SortedSet`1.Min
  - System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Remove(`0)
  - System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.SortedSet`1.Reverse
  - System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: SortedSet<T>
  name.vb: SortedSet(Of T)
  fullName: System.Collections.Generic.SortedSet<T>
  fullName.vb: System.Collections.Generic.SortedSet(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 44
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Represents a collection of objects that is maintained in sorted order.
  syntax:
    content: 'public class SortedSet<T> : ICollection<T>, IEnumerable<T>, IReadOnlyCollection<T>, ISet<T>, ICollection, IEnumerable'
    content.vb: Public Class SortedSet(Of T) Inherits ICollection(Of T) Implements IEnumerable(Of T), IReadOnlyCollection(Of T), ISet(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
- uid: System.Collections.Generic.SortedSet`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedSet`1
  name: SortedSet()
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet()
  fullName.vb: System.Collections.Generic.SortedSet(Of T).SortedSet()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 61
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public SortedSet()
    content.vb: Public Sub New
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedSet`1
  name: SortedSet(IComparer<T>)
  name.vb: SortedSet(IComparer(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet(System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).SortedSet(System.Collections.Generic.IComparer(Of T))
  type: Constructor
  source:
    remote: &o1
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 520
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> class that uses a specified comparer.
  syntax:
    content: public SortedSet(IComparer<T> comparer)
    content.vb: Public Sub New(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The default comparer to use for comparing objects.
  exceptions:
  - type: System.ArgumentNullException
    description: '*comparer* is null.'
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SortedSet`1
  name: SortedSet(IEnumerable<T>)
  name.vb: SortedSet(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).SortedSet(System.Collections.Generic.IEnumerable(Of T))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 521
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> class that contains elements copied from a specified enumerable collection.
  syntax:
    content: public SortedSet(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The enumerable collection to be copied.
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedSet`1
  name: SortedSet(IEnumerable<T>, IComparer<T>)
  name.vb: SortedSet(IEnumerable(Of T), IComparer(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IComparer<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).SortedSet(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IComparer(Of T))
  type: Constructor
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 522
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> class that contains elements copied from a specified enumerable collection and that uses a specified comparer.
  syntax:
    content: public SortedSet(IEnumerable<T> collection, IComparer<T> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of T), comparer As IComparer(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The enumerable collection to be copied.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The default comparer to use for comparing objects.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* is null.'
- uid: System.Collections.Generic.SortedSet`1.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedSet`1
  name: Comparer
  fullName: System.Collections.Generic.SortedSet<T>.Comparer
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Comparer
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 295
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> object that is used to determine equality for the values in the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public IComparer<T> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer that is used to determine equality for the values in the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedSet`1.Count
  id: Count
  parent: System.Collections.Generic.SortedSet`1
  name: Count
  fullName: System.Collections.Generic.SortedSet<T>.Count
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 286
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the number of elements in the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements in the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
- uid: System.Collections.Generic.SortedSet`1.Max
  id: Max
  parent: System.Collections.Generic.SortedSet`1
  name: Max
  fullName: System.Collections.Generic.SortedSet<T>.Max
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Max
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1864
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the maximum value in the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>, as defined by the comparer.
  syntax:
    content: public T Max { get; }
    content.vb: Public ReadOnly Property Max As T
    parameters: []
    return:
      type: '{T}'
      description: The maximum value in the set.
- uid: System.Collections.Generic.SortedSet`1.Min
  id: Min
  parent: System.Collections.Generic.SortedSet`1
  name: Min
  fullName: System.Collections.Generic.SortedSet<T>.Min
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Min
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1854
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the minimum value in the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>, as defined by the comparer.
  syntax:
    content: public T Min { get; }
    content.vb: Public ReadOnly Property Min As T
    parameters: []
    return:
      type: '{T}'
      description: The minimum value in the set.
- uid: System.Collections.Generic.SortedSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  name: Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.Add(T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Add(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 350
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Adds an element to the set and returns a value that indicates if it was successfully added.
  syntax:
    content: public bool Add(T item)
    content.vb: Public Function Add(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The element to add to the set.
    return:
      type: System.Boolean
      description: true if *item* is added to the set; otherwise, false.
- uid: System.Collections.Generic.SortedSet`1.Clear
  id: Clear
  parent: System.Collections.Generic.SortedSet`1
  name: Clear()
  fullName: System.Collections.Generic.SortedSet<T>.Clear()
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 608
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all elements from the set.
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
- uid: System.Collections.Generic.SortedSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SortedSet`1
  name: Contains(T)
  fullName: System.Collections.Generic.SortedSet<T>.Contains(T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 616
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether the set contains a specific element.
  syntax:
    content: public virtual bool Contains(T item)
    content.vb: Public Overridable Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The element to locate in the set.
    return:
      type: System.Boolean
      description: true if the set contains *item*; otherwise, false.
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.SortedSet`1
  name: CopyTo(T[])
  name.vb: CopyTo(T())
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[])
  fullName.vb: System.Collections.Generic.SortedSet(Of T).CopyTo(T())
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 624
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the complete <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> exceeds the number of elements that the destination array can contain.
  - type: System.ArgumentNullException
    description: '*array* is null.'
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 626
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the complete <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional array, starting at the specified array index.
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in *array* at which copying begins.
  exceptions:
  - type: System.ArgumentException
    description: The number of elements in the source array is greater than the available space from *index* to the end of the destination array.
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* is less than zero.'
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  name: CopyTo(T[], Int32, Int32)
  name.vb: CopyTo(T(), Int32, Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[], System.Int32, System.Int32)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 628
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies a specified number of elements from <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional array, starting at the specified array index.
  syntax:
    content: public void CopyTo(T[] array, int index, int count)
    content.vb: Public Sub CopyTo(array As T(), index As Integer, count As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in *array* at which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy.
  exceptions:
  - type: System.ArgumentException
    description: The number of elements in the source array is greater than the available space from *index* to the end of the destination array.
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* is less than zero.-or-*count* is less than zero.'
- uid: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: ExceptWith(IEnumerable<T>)
  name.vb: ExceptWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 536
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all elements that are in a specified collection from the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public void ExceptWith(IEnumerable<T> other)
    content.vb: Public Sub ExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection of items to remove from the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  name: GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.SortedSet(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 723
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public SortedSet<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As SortedSet(Of T).Enumerator
    return:
      type: System.Collections.Generic.SortedSet`1.Enumerator
      description: An enumerator that iterates through the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> in sorted order.
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  id: GetViewBetween(`0,`0)
  parent: System.Collections.Generic.SortedSet`1
  name: GetViewBetween(T, T)
  fullName: System.Collections.Generic.SortedSet<T>.GetViewBetween(T, T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).GetViewBetween(T, T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1890
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns a view of a subset in a <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public virtual SortedSet<T> GetViewBetween(T lowerValue, T upperValue)
    content.vb: Public Overridable Function GetViewBetween(lowerValue As T, upperValue As T) As SortedSet(Of T)
    parameters:
    - id: lowerValue
      type: '{T}'
      description: The lowest desired value in the view.
    - id: upperValue
      type: '{T}'
      description: The highest desired value in the view.
    return:
      type: System.Collections.Generic.SortedSet`1
      description: A subset view that contains only the values in the specified range.
  exceptions:
  - type: System.ArgumentException
    description: '*lowerValue* is more than *upperValue* according to the comparer.'
  - type: System.ArgumentOutOfRangeException
    description: A tried operation on the view was outside the range specified by *lowerValue* and *upperValue*.
- uid: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: IntersectWith(IEnumerable<T>)
  name.vb: IntersectWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 539
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object so that it contains only elements that are also in a specified collection.
  syntax:
    content: public virtual void IntersectWith(IEnumerable<T> other)
    content.vb: Public Overridable Sub IntersectWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: IsProperSubsetOf(IEnumerable<T>)
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 540
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a proper subset of the specified collection.
  syntax:
    content: public bool IsProperSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a proper subset of *other*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: IsProperSupersetOf(IEnumerable<T>)
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 541
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a proper superset of the specified collection.
  syntax:
    content: public bool IsProperSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a proper superset of *other*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: IsSubsetOf(IEnumerable<T>)
  name.vb: IsSubsetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 542
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a subset of the specified collection.
  syntax:
    content: public bool IsSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Boolean
      description: true if the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a subset of *other*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: IsSupersetOf(IEnumerable<T>)
  name.vb: IsSupersetOf(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 543
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a superset of the specified collection.
  syntax:
    content: public bool IsSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is a superset of *other*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: Overlaps(IEnumerable<T>)
  name.vb: Overlaps(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 544
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object and a specified collection share common elements.
  syntax:
    content: public bool Overlaps(IEnumerable<T> other)
    content.vb: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object and *other* share at least one common element; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedSet`1
  name: Remove(T)
  fullName: System.Collections.Generic.SortedSet<T>.Remove(T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Remove(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 447
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes a specified item from the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The element to remove.
    return:
      type: System.Boolean
      description: true if the element is found and successfully removed; otherwise, false.
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: RemoveWhere(Predicate<T>)
  name.vb: RemoveWhere(Predicate(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.RemoveWhere(System.Predicate<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).RemoveWhere(System.Predicate(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 546
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all elements that match the conditions defined by the specified predicate from a <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int RemoveWhere(Predicate<T> match)
    content.vb: Public Function RemoveWhere(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The delegate that defines the conditions of the elements to remove.
    return:
      type: System.Int32
      description: The number of elements that were removed from the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> collection..
  exceptions:
  - type: System.ArgumentNullException
    description: '*match* is null.'
- uid: System.Collections.Generic.SortedSet`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.SortedSet`1
  name: Reverse()
  fullName: System.Collections.Generic.SortedSet<T>.Reverse()
  fullName.vb: System.Collections.Generic.SortedSet(Of T).Reverse()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/SortedSet.cs
    startLine: 1874
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that iterates over the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> in reverse order.
  syntax:
    content: public IEnumerable<T> Reverse()
    content.vb: Public Function Reverse As IEnumerable(Of T)
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An enumerator that iterates over the <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> in reverse order.
- uid: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: SetEquals(IEnumerable<T>)
  name.vb: SetEquals(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 548
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object and the specified collection contain the same elements.
  syntax:
    content: public bool SetEquals(IEnumerable<T> other)
    content.vb: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Boolean
      description: true if the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object is equal to *other*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: SymmetricExceptWith(IEnumerable<T>)
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 549
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.
  syntax:
    content: public void SymmetricExceptWith(IEnumerable<T> other)
    content.vb: Public Sub SymmetricExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
- uid: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  name: UnionWith(IEnumerable<T>)
  name.vb: UnionWith(IEnumerable(Of T))
  fullName: System.Collections.Generic.SortedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.SortedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  type: Method
  source:
    remote: *o1
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 554
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object so that it contains all elements that are present in either the current object or the specified collection.
  syntax:
    content: public void UnionWith(IEnumerable<T> other)
    content.vb: Public Sub UnionWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to compare to the current <xref href="System.Collections.Generic.SortedSet`1" data-throw-if-not-resolved="false"></xref> object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*other* is null.'
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  name.vb: Collections.Generic.IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  name.vb: IReadOnlyCollection(Of T)
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  name.vb: ISet(Of T)
  fullName: System.Collections.Generic.ISet<T>
  fullName.vb: System.Collections.Generic.ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<>
  name.vb: IReadOnlyCollection(Of )
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  isExternal: false
  name: ISet<>
  name.vb: ISet(Of )
  fullName: System.Collections.Generic.ISet<>
  fullName.vb: System.Collections.Generic.ISet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  name.vb: IComparer(Of T)
  fullName: System.Collections.Generic.IComparer<T>
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<>
  name.vb: IComparer(Of )
  fullName: System.Collections.Generic.IComparer<>
  fullName.vb: System.Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.SortedSet`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: SortedSet.Enumerator<>
  name.vb: SortedSet.Enumerator(Of )
  fullName: System.Collections.Generic.SortedSet.Enumerator<>
  fullName.vb: System.Collections.Generic.SortedSet.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1.Enumerator
    name: SortedSet.Enumerator
    fullName: System.Collections.Generic.SortedSet.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1.Enumerator
    name: SortedSet.Enumerator
    fullName: System.Collections.Generic.SortedSet.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.SortedSet`1
  parent: System.Collections.Generic
  isExternal: false
  name: SortedSet<T>
  name.vb: SortedSet(Of T)
  fullName: System.Collections.Generic.SortedSet<T>
  fullName.vb: System.Collections.Generic.SortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    fullName: System.Collections.Generic.SortedSet
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    fullName: System.Collections.Generic.SortedSet
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  name.vb: Predicate(Of T)
  fullName: System.Predicate<T>
  fullName.vb: System.Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<>
  name.vb: Predicate(Of )
  fullName: System.Predicate<>
  fullName.vb: System.Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
