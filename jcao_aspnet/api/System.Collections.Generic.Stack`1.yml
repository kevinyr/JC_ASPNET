items:
- uid: System.Collections.Generic.Stack`1
  commentId: T:System.Collections.Generic.Stack`1
  id: Stack`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Stack`1.#ctor
  - System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Stack`1.#ctor(System.Int32)
  - System.Collections.Generic.Stack`1.Clear
  - System.Collections.Generic.Stack`1.Contains(`0)
  - System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Stack`1.Count
  - System.Collections.Generic.Stack`1.GetEnumerator
  - System.Collections.Generic.Stack`1.Peek
  - System.Collections.Generic.Stack`1.Pop
  - System.Collections.Generic.Stack`1.Push(`0)
  - System.Collections.Generic.Stack`1.ToArray
  - System.Collections.Generic.Stack`1.TrimExcess
  langs:
  - csharp
  - vb
  name: Stack<T>
  nameWithType: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stack
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 568
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: 'public class Stack<T> : IEnumerable<T>, IReadOnlyCollection<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Class Stack(Of T)
          Inherits IEnumerable(Of T)
          Implements IReadOnlyCollection(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  nameWithType.vb: Stack(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
- uid: System.Collections.Generic.Stack`1.#ctor
  commentId: M:System.Collections.Generic.Stack`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Stack()
  nameWithType: Stack<T>.Stack()
  fullName: System.Collections.Generic.Stack<T>.Stack()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 570
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public Stack()
    content.vb: Public Sub New
  nameWithType.vb: Stack(Of T).Stack()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack()
- uid: System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Stack(IEnumerable<T>)
  nameWithType: Stack<T>.Stack(IEnumerable<T>)
  fullName: System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 571
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public Stack(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  nameWithType.vb: Stack(Of T).Stack(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Stack(IEnumerable(Of T))
- uid: System.Collections.Generic.Stack`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.Stack`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Stack(Int32)
  nameWithType: Stack<T>.Stack(Int32)
  fullName: System.Collections.Generic.Stack<T>.Stack(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 572
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public Stack(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  nameWithType.vb: Stack(Of T).Stack(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack(System.Int32)
- uid: System.Collections.Generic.Stack`1.Count
  commentId: P:System.Collections.Generic.Stack`1.Count
  id: Count
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Stack<T>.Count
  fullName: System.Collections.Generic.Stack<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 573
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: Stack(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Stack(Of T).Count
- uid: System.Collections.Generic.Stack`1.Clear
  commentId: M:System.Collections.Generic.Stack`1.Clear
  id: Clear
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Stack<T>.Clear()
  fullName: System.Collections.Generic.Stack<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 576
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  nameWithType.vb: Stack(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Clear()
- uid: System.Collections.Generic.Stack`1.Contains(`0)
  commentId: M:System.Collections.Generic.Stack`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: Stack<T>.Contains(T)
  fullName: System.Collections.Generic.Stack<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 577
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
  nameWithType.vb: Stack(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Contains(T)
- uid: System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: Stack<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.Stack<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 578
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
  nameWithType.vb: Stack(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.Stack`1.GetEnumerator
  commentId: M:System.Collections.Generic.Stack`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Stack<T>.GetEnumerator()
  fullName: System.Collections.Generic.Stack<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 579
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public Stack<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Stack(Of T).Enumerator
    return:
      type: System.Collections.Generic.Stack`1.Enumerator
  nameWithType.vb: Stack(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).GetEnumerator()
- uid: System.Collections.Generic.Stack`1.Peek
  commentId: M:System.Collections.Generic.Stack`1.Peek
  id: Peek
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: Stack<T>.Peek()
  fullName: System.Collections.Generic.Stack<T>.Peek()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Peek
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 580
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
  nameWithType.vb: Stack(Of T).Peek()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Peek()
- uid: System.Collections.Generic.Stack`1.Pop
  commentId: M:System.Collections.Generic.Stack`1.Pop
  id: Pop
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Pop()
  nameWithType: Stack<T>.Pop()
  fullName: System.Collections.Generic.Stack<T>.Pop()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pop
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 581
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T Pop()
    content.vb: Public Function Pop As T
    return:
      type: '{T}'
  nameWithType.vb: Stack(Of T).Pop()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Pop()
- uid: System.Collections.Generic.Stack`1.Push(`0)
  commentId: M:System.Collections.Generic.Stack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Push(T)
  nameWithType: Stack<T>.Push(T)
  fullName: System.Collections.Generic.Stack<T>.Push(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Push
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 582
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void Push(T item)
    content.vb: Public Sub Push(item As T)
    parameters:
    - id: item
      type: '{T}'
  nameWithType.vb: Stack(Of T).Push(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Push(T)
- uid: System.Collections.Generic.Stack`1.ToArray
  commentId: M:System.Collections.Generic.Stack`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Stack<T>.ToArray()
  fullName: System.Collections.Generic.Stack<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 586
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
  nameWithType.vb: Stack(Of T).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).ToArray()
- uid: System.Collections.Generic.Stack`1.TrimExcess
  commentId: M:System.Collections.Generic.Stack`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: Stack<T>.TrimExcess()
  fullName: System.Collections.Generic.Stack<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 587
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  nameWithType.vb: Stack(Of T).TrimExcess()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).TrimExcess()
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: '!:System.Collections.Generic.IReadOnlyCollection{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  nameWithType: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: Generic.IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  nameWithType: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  nameWithType.vb: Generic.IReadOnlyCollection(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: '!:System.Collections.Generic.IEnumerable{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  nameWithType: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: Generic.IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Stack`1.Enumerator
  commentId: T:System.Collections.Generic.Stack`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Stack.Enumerator<>
  nameWithType: Stack.Enumerator<>
  fullName: System.Collections.Generic.Stack.Enumerator<>
  nameWithType.vb: Stack.Enumerator(Of )
  fullname.vb: System.Collections.Generic.Stack.Enumerator(Of )
  name.vb: Stack.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1.Enumerator
    name: Stack.Enumerator
    nameWithType: Stack.Enumerator
    fullName: System.Collections.Generic.Stack.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1.Enumerator
    name: Stack.Enumerator
    nameWithType: Stack.Enumerator
    fullName: System.Collections.Generic.Stack.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
