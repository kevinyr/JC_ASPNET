items:
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  id: ReadOnlyDictionary`2
  parent: System.Collections.ObjectModel
  children:
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.Count
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.Values
  langs:
  - csharp
  - vb
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOnlyDictionary
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 45
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: 'public class ReadOnlyDictionary<TKey, TValue> : Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IDictionary<TKey, TValue>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class ReadOnlyDictionary(Of TKey, TValue)
          Inherits Generic.ICollection(Of Generic.KeyValuePair(Of TKey, TValue))
          Implements Generic.IDictionary(Of TKey, TValue), Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue)), Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue)), Generic.IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
    - id: TValue
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: ReadOnlyDictionary(Generic.IDictionary<TKey, TValue>)
  nameWithType: ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(Generic.IDictionary<TKey, TValue>)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 47
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public ReadOnlyDictionary(Generic.IDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As Generic.IDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).ReadOnlyDictionary(Generic.IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).ReadOnlyDictionary(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: ReadOnlyDictionary(Generic.IDictionary(Of TKey, TValue))
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.Count
  commentId: P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count
  id: Count
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReadOnlyDictionary<TKey, TValue>.Count
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 48
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).Count
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary
  commentId: P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary
  id: Dictionary
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary
  nameWithType: ReadOnlyDictionary<TKey, TValue>.Dictionary
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Dictionary
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dictionary
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 49
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: protected Generic.IDictionary<TKey, TValue> Dictionary { get; }
    content.vb: Protected ReadOnly Property Dictionary As Generic.IDictionary(Of TKey, TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).Dictionary
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).Dictionary
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)
  commentId: P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: ReadOnlyDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 50
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public TValue this[TKey key] { get; }
    content.vb: Public ReadOnly Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys
  commentId: P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys
  id: Keys
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: ReadOnlyDictionary<TKey, TValue>.Keys
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 51
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public ReadOnlyDictionary<TKey, TValue>.KeyCollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As ReadOnlyDictionary(Of TKey, TValue).KeyCollection
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).Keys
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.Values
  commentId: P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values
  id: Values
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: ReadOnlyDictionary<TKey, TValue>.Values
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 65
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public ReadOnlyDictionary<TKey, TValue>.ValueCollection Values { get; }
    content.vb: Public ReadOnly Property Values As ReadOnlyDictionary(Of TKey, TValue).ValueCollection
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).Values
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: ReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 66
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator
  commentId: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReadOnlyDictionary<TKey, TValue>.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 67
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).GetEnumerator()
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: ReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 82
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: '!:System.Collections.Generic.IDictionary{`0,`1}'
  definition: System.Collections.Generic.IDictionary`2
  name: Generic.IDictionary<TKey, TValue>
  nameWithType: Generic.IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: Generic.IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  nameWithType: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{`0,`1}}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  nameWithType: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  commentId: '!:System.Collections.Generic.IReadOnlyDictionary{`0,`1}'
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType: Generic.IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  nameWithType: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionary
  nameWithType: Collections.IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Generic.IDictionary<, >
  nameWithType: Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  nameWithType.vb: Generic.IDictionary(Of , )
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    nameWithType: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  nameWithType: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  nameWithType.vb: Generic.IReadOnlyCollection(Of )
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    nameWithType: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Generic.IReadOnlyDictionary<, >
  nameWithType: Generic.IReadOnlyDictionary<, >
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  nameWithType.vb: Generic.IReadOnlyDictionary(Of , )
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  name.vb: Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    nameWithType: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyDictionary.KeyCollection<>
  nameWithType: ReadOnlyDictionary.KeyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<>
  nameWithType.vb: ReadOnlyDictionary.KeyCollection(Of )
  fullname.vb: System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection(Of )
  name.vb: ReadOnlyDictionary.KeyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
    name: ReadOnlyDictionary.KeyCollection
    nameWithType: ReadOnlyDictionary.KeyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
    name: ReadOnlyDictionary.KeyCollection
    nameWithType: ReadOnlyDictionary.KeyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyDictionary.ValueCollection<>
  nameWithType: ReadOnlyDictionary.ValueCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<>
  nameWithType.vb: ReadOnlyDictionary.ValueCollection(Of )
  fullname.vb: System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection(Of )
  name.vb: ReadOnlyDictionary.ValueCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
    name: ReadOnlyDictionary.ValueCollection
    nameWithType: ReadOnlyDictionary.ValueCollection
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection
    name: ReadOnlyDictionary.ValueCollection
    nameWithType: ReadOnlyDictionary.ValueCollection
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: '!:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}'
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>
  nameWithType: Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    nameWithType: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: false
  name: Generic.IEnumerator<>
  nameWithType: Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  nameWithType.vb: Generic.IEnumerator(Of )
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    nameWithType: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
