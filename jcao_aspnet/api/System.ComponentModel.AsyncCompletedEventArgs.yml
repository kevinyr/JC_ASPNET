items:
- uid: System.ComponentModel.AsyncCompletedEventArgs
  id: AsyncCompletedEventArgs
  parent: System.ComponentModel
  children:
  - System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)
  - System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  - System.ComponentModel.AsyncCompletedEventArgs.Error
  - System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  - System.ComponentModel.AsyncCompletedEventArgs.UserState
  name: AsyncCompletedEventArgs
  fullName: System.ComponentModel.AsyncCompletedEventArgs
  type: Class
  source:
    remote: &o0
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 11
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: Provides data for the MethodNameCompleted event.
  syntax:
    content: 'public class AsyncCompletedEventArgs : EventArgs'
    content.vb: Public Class AsyncCompletedEventArgs Inherits EventArgs
  inheritance:
  - System.Object
- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)
  id: '#ctor(System.Exception,System.Boolean,System.Object)'
  parent: System.ComponentModel.AsyncCompletedEventArgs
  name: AsyncCompletedEventArgs(Exception, Boolean, Object)
  fullName: System.ComponentModel.AsyncCompletedEventArgs.AsyncCompletedEventArgs(System.Exception, System.Boolean, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/ref/System.ComponentModel.EventBasedAsync.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.ComponentModel.EventBasedAsync/ref/System.ComponentModel.EventBasedAsync.cs
    startLine: 9
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: Initializes a new instance of the <xref href="System.ComponentModel.AsyncCompletedEventArgs" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public AsyncCompletedEventArgs(Exception error, bool cancelled, object userState)
    content.vb: Public Sub New(error As Exception, cancelled As Boolean, userState As Object)
    parameters:
    - id: error
      type: System.Exception
      description: Any error that occurred during the asynchronous operation.
    - id: cancelled
      type: System.Boolean
      description: A value indicating whether the asynchronous operation was canceled.
    - id: userState
      type: System.Object
      description: The optional user-supplied state object passed to the <xref href="System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" data-throw-if-not-resolved="false"></xref> method.
- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  id: Cancelled
  parent: System.ComponentModel.AsyncCompletedEventArgs
  name: Cancelled
  fullName: System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  type: Property
  source:
    remote: *o0
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 38
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: Gets a value indicating whether an asynchronous operation has been canceled.
  syntax:
    content: public bool Cancelled { get; }
    content.vb: Public ReadOnly Property Cancelled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the background operation has been canceled; otherwise false. The default is false.
- uid: System.ComponentModel.AsyncCompletedEventArgs.Error
  id: Error
  parent: System.ComponentModel.AsyncCompletedEventArgs
  name: Error
  fullName: System.ComponentModel.AsyncCompletedEventArgs.Error
  type: Property
  source:
    remote: *o0
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 39
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: Gets a value indicating which error occurred during an asynchronous operation.
  syntax:
    content: public Exception Error { get; }
    content.vb: Public ReadOnly Property Error As Exception
    parameters: []
    return:
      type: System.Exception
      description: An <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instance, if an error occurred during an asynchronous operation; otherwise null.
- uid: System.ComponentModel.AsyncCompletedEventArgs.UserState
  id: UserState
  parent: System.ComponentModel.AsyncCompletedEventArgs
  name: UserState
  fullName: System.ComponentModel.AsyncCompletedEventArgs.UserState
  type: Property
  source:
    remote: *o0
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 40
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: Gets the unique identifier for the asynchronous task.
  syntax:
    content: public object UserState { get; }
    content.vb: Public ReadOnly Property UserState As Object
    parameters: []
    return:
      type: System.Object
      description: An object reference that uniquely identifies the asynchronous task; otherwise, null if no value has been set.
- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  id: RaiseExceptionIfNecessary
  parent: System.ComponentModel.AsyncCompletedEventArgs
  name: RaiseExceptionIfNecessary()
  fullName: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary()
  type: Method
  source:
    remote: *o0
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 25
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: Raises a user-supplied exception if an asynchronous operation failed.
  syntax:
    content: protected void RaiseExceptionIfNecessary()
    content.vb: Protected Sub RaiseExceptionIfNecessary
  exceptions:
  - type: System.InvalidOperationException
    description: The <xref href="System.ComponentModel.AsyncCompletedEventArgs.Cancelled" data-throw-if-not-resolved="false"></xref> property is true.
  - type: System.Reflection.TargetInvocationException
    description: The <xref href="System.ComponentModel.AsyncCompletedEventArgs.Error" data-throw-if-not-resolved="false"></xref> property has been set by the asynchronous operation. The <xref href="System.Exception.InnerException" data-throw-if-not-resolved="false"></xref> property holds a reference to <xref href="System.ComponentModel.AsyncCompletedEventArgs.Error" data-throw-if-not-resolved="false"></xref>.
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
