items:
- uid: System.Data.IsolationLevel
  id: IsolationLevel
  parent: System.Data
  children:
  - System.Data.IsolationLevel.Chaos
  - System.Data.IsolationLevel.ReadCommitted
  - System.Data.IsolationLevel.ReadUncommitted
  - System.Data.IsolationLevel.RepeatableRead
  - System.Data.IsolationLevel.Serializable
  - System.Data.IsolationLevel.Snapshot
  - System.Data.IsolationLevel.Unspecified
  name: IsolationLevel
  fullName: System.Data.IsolationLevel
  type: Enum
  source:
    remote: &o0
      path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 10
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: Specifies the transaction locking behavior for the connection.
  syntax:
    content: 'public enum IsolationLevel : int'
    content.vb: Public Enum IsolationLevel As Integer
- uid: System.Data.IsolationLevel.Chaos
  id: Chaos
  parent: System.Data.IsolationLevel
  name: Chaos
  fullName: System.Data.IsolationLevel.Chaos
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 13
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: The pending changes from more highly isolated transactions cannot be overwritten.
  syntax:
    content: Chaos = null
    content.vb: Chaos = Nothing
- uid: System.Data.IsolationLevel.ReadCommitted
  id: ReadCommitted
  parent: System.Data.IsolationLevel
  name: ReadCommitted
  fullName: System.Data.IsolationLevel.ReadCommitted
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 15
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.
  syntax:
    content: ReadCommitted = null
    content.vb: ReadCommitted = Nothing
- uid: System.Data.IsolationLevel.ReadUncommitted
  id: ReadUncommitted
  parent: System.Data.IsolationLevel
  name: ReadUncommitted
  fullName: System.Data.IsolationLevel.ReadUncommitted
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 14
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.
  syntax:
    content: ReadUncommitted = null
    content.vb: ReadUncommitted = Nothing
- uid: System.Data.IsolationLevel.RepeatableRead
  id: RepeatableRead
  parent: System.Data.IsolationLevel
  name: RepeatableRead
  fullName: System.Data.IsolationLevel.RepeatableRead
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 16
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible.
  syntax:
    content: RepeatableRead = null
    content.vb: RepeatableRead = Nothing
- uid: System.Data.IsolationLevel.Serializable
  id: Serializable
  parent: System.Data.IsolationLevel
  name: Serializable
  fullName: System.Data.IsolationLevel.Serializable
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 17
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: A range lock is placed on the <xref href="System.Data.DataSet" data-throw-if-not-resolved="false"></xref>, preventing other users from updating or inserting rows into the dataset until the transaction is complete.
  syntax:
    content: Serializable = null
    content.vb: Serializable = Nothing
- uid: System.Data.IsolationLevel.Snapshot
  id: Snapshot
  parent: System.Data.IsolationLevel
  name: Snapshot
  fullName: System.Data.IsolationLevel.Snapshot
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 18
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.
  syntax:
    content: Snapshot = null
    content.vb: Snapshot = Nothing
- uid: System.Data.IsolationLevel.Unspecified
  id: Unspecified
  parent: System.Data.IsolationLevel
  name: Unspecified
  fullName: System.Data.IsolationLevel.Unspecified
  type: Field
  source:
    remote: *o0
    path: src/System.Data.Common/src/System/Data/IsolationLevel.cs
    startLine: 12
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: A different isolation level than the one specified is being used, but the level cannot be determined.
  syntax:
    content: Unspecified = null
    content.vb: Unspecified = Nothing
references:
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
