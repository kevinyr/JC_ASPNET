items:
- uid: System.Diagnostics.Contracts.ContractFailureKind
  commentId: T:System.Diagnostics.Contracts.ContractFailureKind
  id: ContractFailureKind
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.ContractFailureKind.Assert
  - System.Diagnostics.Contracts.ContractFailureKind.Assume
  - System.Diagnostics.Contracts.ContractFailureKind.Invariant
  - System.Diagnostics.Contracts.ContractFailureKind.Postcondition
  - System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException
  - System.Diagnostics.Contracts.ContractFailureKind.Precondition
  langs:
  - csharp
  - vb
  name: ContractFailureKind
  nameWithType: ContractFailureKind
  fullName: System.Diagnostics.Contracts.ContractFailureKind
  type: Enum
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContractFailureKind
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 94
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: 'public enum ContractFailureKind : int'
    content.vb: Public Enum ContractFailureKind As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Diagnostics.Contracts.ContractFailureKind.Assert
  commentId: F:System.Diagnostics.Contracts.ContractFailureKind.Assert
  id: Assert
  parent: System.Diagnostics.Contracts.ContractFailureKind
  langs:
  - csharp
  - vb
  name: Assert
  nameWithType: ContractFailureKind.Assert
  fullName: System.Diagnostics.Contracts.ContractFailureKind.Assert
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assert
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 96
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: Assert = null
    content.vb: Assert = Nothing
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.Contracts.ContractFailureKind.Assume
  commentId: F:System.Diagnostics.Contracts.ContractFailureKind.Assume
  id: Assume
  parent: System.Diagnostics.Contracts.ContractFailureKind
  langs:
  - csharp
  - vb
  name: Assume
  nameWithType: ContractFailureKind.Assume
  fullName: System.Diagnostics.Contracts.ContractFailureKind.Assume
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assume
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 97
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: Assume = null
    content.vb: Assume = Nothing
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.Contracts.ContractFailureKind.Invariant
  commentId: F:System.Diagnostics.Contracts.ContractFailureKind.Invariant
  id: Invariant
  parent: System.Diagnostics.Contracts.ContractFailureKind
  langs:
  - csharp
  - vb
  name: Invariant
  nameWithType: ContractFailureKind.Invariant
  fullName: System.Diagnostics.Contracts.ContractFailureKind.Invariant
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invariant
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 98
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: Invariant = null
    content.vb: Invariant = Nothing
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.Contracts.ContractFailureKind.Postcondition
  commentId: F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition
  id: Postcondition
  parent: System.Diagnostics.Contracts.ContractFailureKind
  langs:
  - csharp
  - vb
  name: Postcondition
  nameWithType: ContractFailureKind.Postcondition
  fullName: System.Diagnostics.Contracts.ContractFailureKind.Postcondition
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Postcondition
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 99
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: Postcondition = null
    content.vb: Postcondition = Nothing
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException
  commentId: F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException
  id: PostconditionOnException
  parent: System.Diagnostics.Contracts.ContractFailureKind
  langs:
  - csharp
  - vb
  name: PostconditionOnException
  nameWithType: ContractFailureKind.PostconditionOnException
  fullName: System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostconditionOnException
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 100
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: PostconditionOnException = null
    content.vb: PostconditionOnException = Nothing
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.Contracts.ContractFailureKind.Precondition
  commentId: F:System.Diagnostics.Contracts.ContractFailureKind.Precondition
  id: Precondition
  parent: System.Diagnostics.Contracts.ContractFailureKind
  langs:
  - csharp
  - vb
  name: Precondition
  nameWithType: ContractFailureKind.Precondition
  fullName: System.Diagnostics.Contracts.ContractFailureKind.Precondition
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Precondition
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 101
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  syntax:
    content: Precondition = null
    content.vb: Precondition = Nothing
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Diagnostics.Contracts
  commentId: N:System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  nameWithType: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Diagnostics.Contracts.ContractFailureKind
  commentId: T:System.Diagnostics.Contracts.ContractFailureKind
  parent: System.Diagnostics.Contracts
  isExternal: false
  name: ContractFailureKind
  nameWithType: ContractFailureKind
  fullName: System.Diagnostics.Contracts.ContractFailureKind
