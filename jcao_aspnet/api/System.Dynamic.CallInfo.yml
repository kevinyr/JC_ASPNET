items:
- uid: System.Dynamic.CallInfo
  id: CallInfo
  parent: System.Dynamic
  children:
  - System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})
  - System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])
  - System.Dynamic.CallInfo.ArgumentCount
  - System.Dynamic.CallInfo.ArgumentNames
  - System.Dynamic.CallInfo.Equals(System.Object)
  - System.Dynamic.CallInfo.GetHashCode
  name: CallInfo
  fullName: System.Dynamic.CallInfo
  type: Class
  source:
    remote: &o0
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 27
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Describes arguments in the dynamic binding process.
  syntax:
    content: 'public sealed class CallInfo : object'
    content.vb: Public NotInheritable Class CallInfo Inherits Object
  inheritance:
  - System.Object
- uid: System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})'
  parent: System.Dynamic.CallInfo
  name: CallInfo(Int32, Collections.Generic.IEnumerable<String>)
  name.vb: CallInfo(Int32, Collections.Generic.IEnumerable(Of String))
  fullName: System.Dynamic.CallInfo.CallInfo(System.Int32, System.Collections.Generic.IEnumerable<System.String>)
  fullName.vb: System.Dynamic.CallInfo.CallInfo(System.Int32, System.Collections.Generic.IEnumerable(Of System.String))
  type: Constructor
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 29
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Creates a new CallInfo that represents arguments in the dynamic binding process.
  syntax:
    content: public CallInfo(int argCount, Collections.Generic.IEnumerable<string> argNames)
    content.vb: Public Sub New(argCount As Integer, argNames As Collections.Generic.IEnumerable(Of String))
    parameters:
    - id: argCount
      type: System.Int32
      description: The number of arguments.
    - id: argNames
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The argument names.
- uid: System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])
  id: '#ctor(System.Int32,System.String[])'
  parent: System.Dynamic.CallInfo
  name: CallInfo(Int32, String[])
  name.vb: CallInfo(Int32, String())
  fullName: System.Dynamic.CallInfo.CallInfo(System.Int32, System.String[])
  fullName.vb: System.Dynamic.CallInfo.CallInfo(System.Int32, System.String())
  type: Constructor
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 38
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Creates a new PositionalArgumentInfo.
  syntax:
    content: public CallInfo(int argCount, params string[] argNames)
    content.vb: Public Sub New(argCount As Integer, ParamArray argNames As String())
    parameters:
    - id: argCount
      type: System.Int32
      description: The number of arguments.
    - id: argNames
      type: System.String[]
      description: The argument names.
- uid: System.Dynamic.CallInfo.ArgumentCount
  id: ArgumentCount
  parent: System.Dynamic.CallInfo
  name: ArgumentCount
  fullName: System.Dynamic.CallInfo.ArgumentCount
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 65
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: The number of arguments.
  syntax:
    content: public int ArgumentCount { get; }
    content.vb: Public ReadOnly Property ArgumentCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of arguments.
- uid: System.Dynamic.CallInfo.ArgumentNames
  id: ArgumentNames
  parent: System.Dynamic.CallInfo
  name: ArgumentNames
  fullName: System.Dynamic.CallInfo.ArgumentNames
  type: Property
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 73
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: The argument names.
  syntax:
    content: public Collections.ObjectModel.ReadOnlyCollection<string> ArgumentNames { get; }
    content.vb: Public ReadOnly Property ArgumentNames As Collections.ObjectModel.ReadOnlyCollection(Of String)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: The read-only collection of argument names.
- uid: System.Dynamic.CallInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Dynamic.CallInfo
  name: Equals(Object)
  fullName: System.Dynamic.CallInfo.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 92
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Determines whether the specified CallInfo instance is considered equal to the current.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The instance of <xref href="System.Dynamic.CallInfo" data-throw-if-not-resolved="false"></xref> to compare with the current instance.
    return:
      type: System.Boolean
      description: true if the specified instance is equal to the current one otherwise, false.
- uid: System.Dynamic.CallInfo.GetHashCode
  id: GetHashCode
  parent: System.Dynamic.CallInfo
  name: GetHashCode()
  fullName: System.Dynamic.CallInfo.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 82
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Serves as a hash function for the current <xref href="System.Dynamic.CallInfo" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A hash code for the current <xref href="System.Dynamic.CallInfo" data-throw-if-not-resolved="false"></xref>.
references:
- uid: System.Dynamic
  isExternal: false
  name: System.Dynamic
  fullName: System.Dynamic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<String>
  name.vb: Collections.Generic.IEnumerable(Of String)
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String[]
  isExternal: false
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<String>
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of String)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
