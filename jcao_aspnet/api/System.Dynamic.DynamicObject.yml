items:
- uid: System.Dynamic.DynamicObject
  id: DynamicObject
  parent: System.Dynamic
  children:
  - System.Dynamic.DynamicObject.#ctor
  - System.Dynamic.DynamicObject.GetDynamicMemberNames
  - System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  - System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  - System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  - System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  - System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  - System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  - System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  - System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  - System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  name: DynamicObject
  fullName: System.Dynamic.DynamicObject
  type: Class
  source:
    remote: &o0
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 21
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.
  syntax:
    content: 'public class DynamicObject : object, IDynamicMetaObjectProvider'
    content.vb: Public Class DynamicObject Inherits Object Implements IDynamicMetaObjectProvider
  inheritance:
  - System.Object
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider
- uid: System.Dynamic.DynamicObject.#ctor
  id: '#ctor'
  parent: System.Dynamic.DynamicObject
  name: DynamicObject()
  fullName: System.Dynamic.DynamicObject.DynamicObject()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 27
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Enables derived types to initialize a new instance of the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> type.
  syntax:
    content: protected DynamicObject()
    content.vb: Protected Sub New
- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames
  id: GetDynamicMemberNames
  parent: System.Dynamic.DynamicObject
  name: GetDynamicMemberNames()
  fullName: System.Dynamic.DynamicObject.GetDynamicMemberNames()
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 215
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Returns the enumeration of all dynamic member names.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<string> GetDynamicMemberNames()
    content.vb: Public Overridable Function GetDynamicMemberNames As Collections.Generic.IEnumerable(Of String)
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A sequence that contains dynamic member names.
- uid: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  id: GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.DynamicObject
  name: GetMetaObject(Expression)
  fullName: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 114
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides a <xref href="System.Dynamic.DynamicMetaObject" data-throw-if-not-resolved="false"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href="System.Dynamic.DynamicMetaObject" data-throw-if-not-resolved="false"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.
  syntax:
    content: public virtual DynamicMetaObject GetMetaObject(Expression parameter)
    content.vb: Public Overridable Function GetMetaObject(parameter As Expression) As DynamicMetaObject
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
      description: The expression that represents <xref href="System.Dynamic.DynamicMetaObject" data-throw-if-not-resolved="false"></xref> to dispatch to the dynamic virtual methods.
    return:
      type: System.Dynamic.DynamicMetaObject
      description: An object of the <xref href="System.Dynamic.DynamicMetaObject" data-throw-if-not-resolved="false"></xref> type.
- uid: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  id: TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryBinaryOperation(BinaryOperationBinder, Object, out Object)
  name.vb: TryBinaryOperation(BinaryOperationBinder, Object, ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 145
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides implementation for binary operations. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
  syntax:
    content: public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, out object result)
    content.vb: Public Overridable Function TryBinaryOperation(binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.BinaryOperationBinder
      description: Provides information about the binary operation. The binder.Operation property returns an <xref href="System.Linq.Expressions.ExpressionType" data-throw-if-not-resolved="false"></xref> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.
    - id: arg
      type: System.Object
      description: The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, *arg* is equal to second.
    - id: result
      type: System.Object
      description: The result of the binary operation.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  id: TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryConvert(ConvertBinder, out Object)
  name.vb: TryConvert(ConvertBinder, ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 97
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides implementation for type conversion operations. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
  syntax:
    content: public virtual bool TryConvert(ConvertBinder binder, out object result)
    content.vb: Public Overridable Function TryConvert(binder As ConvertBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.ConvertBinder
      description: Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, binder.Type returns the <xref href="System.String" data-throw-if-not-resolved="false"></xref> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.
    - id: result
      type: System.Object
      description: The result of the type conversion operation.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  id: TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryCreateInstance(CreateInstanceBinder, Object[], out Object)
  name.vb: TryCreateInstance(CreateInstanceBinder, Object(), ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object(), ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 113
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.
  syntax:
    content: public virtual bool TryCreateInstance(CreateInstanceBinder binder, object[] args, out object result)
    content.vb: Public Overridable Function TryCreateInstance(binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.CreateInstanceBinder
      description: Provides information about the initialization operation.
    - id: args
      type: System.Object[]
      description: The arguments that are passed to the object during initialization. For example, for the new SampleType(100) operation, where SampleType is the type derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, *args[0]* is equal to 100.
    - id: result
      type: System.Object
      description: The result of the initialization.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  id: TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  parent: System.Dynamic.DynamicObject
  name: TryDeleteIndex(DeleteIndexBinder, Object[])
  name.vb: TryDeleteIndex(DeleteIndexBinder, Object())
  fullName: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[])
  fullName.vb: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 206
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.
  syntax:
    content: public virtual bool TryDeleteIndex(DeleteIndexBinder binder, object[] indexes)
    content.vb: Public Overridable Function TryDeleteIndex(binder As DeleteIndexBinder, indexes As Object()) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.DeleteIndexBinder
      description: Provides information about the deletion.
    - id: indexes
      type: System.Object[]
      description: The indexes to be deleted.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  id: TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  parent: System.Dynamic.DynamicObject
  name: TryDeleteMember(DeleteMemberBinder)
  fullName: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 68
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.
  syntax:
    content: public virtual bool TryDeleteMember(DeleteMemberBinder binder)
    content.vb: Public Overridable Function TryDeleteMember(binder As DeleteMemberBinder) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.DeleteMemberBinder
      description: Provides information about the deletion.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  id: TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryGetIndex(GetIndexBinder, Object[], out Object)
  name.vb: TryGetIndex(GetIndexBinder, Object(), ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object(), ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 176
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that get a value by index. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for indexing operations.
  syntax:
    content: public virtual bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result)
    content.vb: Public Overridable Function TryGetIndex(binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.GetIndexBinder
      description: Provides information about the operation.
    - id: indexes
      type: System.Object[]
      description: The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, *indexes[0]* is equal to 3.
    - id: result
      type: System.Object
      description: The result of the index operation.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  id: TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryGetMember(GetMemberBinder, out Object)
  name.vb: TryGetMember(GetMemberBinder, ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 41
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that get member values. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
  syntax:
    content: public virtual bool TryGetMember(GetMemberBinder binder, out object result)
    content.vb: Public Overridable Function TryGetMember(binder As GetMemberBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.GetMemberBinder
      description: Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
    - id: result
      type: System.Object
      description: The result of the get operation. For example, if the method is called for a property, you can assign the property value to *result*.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  id: TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryInvoke(InvokeBinder, Object[], out Object)
  name.vb: TryInvoke(InvokeBinder, Object(), ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object[], out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object(), ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 129
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that invoke an object. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
  syntax:
    content: public virtual bool TryInvoke(InvokeBinder binder, object[] args, out object result)
    content.vb: Public Overridable Function TryInvoke(binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.InvokeBinder
      description: Provides information about the invoke operation.
    - id: args
      type: System.Object[]
      description: The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, *args[0]* is equal to 100.
    - id: result
      type: System.Object
      description: The result of the object invocation.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
- uid: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  id: TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryInvokeMember(InvokeMemberBinder, Object[], out Object)
  name.vb: TryInvokeMember(InvokeMemberBinder, Object(), ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object(), ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 82
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that invoke a member. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.
  syntax:
    content: public virtual bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    content.vb: Public Overridable Function TryInvokeMember(binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.InvokeMemberBinder
      description: Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
    - id: args
      type: System.Object[]
      description: The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, *args[0]* is equal to 100.
    - id: result
      type: System.Object
      description: The result of the member invocation.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  id: TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  parent: System.Dynamic.DynamicObject
  name: TrySetIndex(SetIndexBinder, Object[], Object)
  name.vb: TrySetIndex(SetIndexBinder, Object(), Object)
  fullName: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object(), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 192
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that set a value by index. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
  syntax:
    content: public virtual bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value)
    content.vb: Public Overridable Function TrySetIndex(binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.SetIndexBinder
      description: Provides information about the operation.
    - id: indexes
      type: System.Object[]
      description: The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, *indexes[0]* is equal to 3.
    - id: value
      type: System.Object
      description: The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, *value* is equal to 10.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
- uid: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  id: TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  parent: System.Dynamic.DynamicObject
  name: TrySetMember(SetMemberBinder, Object)
  fullName: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 56
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides the implementation for operations that set member values. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
  syntax:
    content: public virtual bool TrySetMember(SetMemberBinder binder, object value)
    content.vb: Public Overridable Function TrySetMember(binder As SetMemberBinder, value As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.SetMemberBinder
      description: Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
    - id: value
      type: System.Object
      description: The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class, the *value* is "Test".
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
- uid: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  id: TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  name: TryUnaryOperation(UnaryOperationBinder, out Object)
  name.vb: TryUnaryOperation(UnaryOperationBinder, ByRef Object)
  fullName: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, out System.Object)
  fullName.vb: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, ByRef System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 160
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: Provides implementation for unary operations. Classes derived from the <xref href="System.Dynamic.DynamicObject" data-throw-if-not-resolved="false"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.
  syntax:
    content: public virtual bool TryUnaryOperation(UnaryOperationBinder binder, out object result)
    content.vb: Public Overridable Function TryUnaryOperation(binder As UnaryOperationBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.UnaryOperationBinder
      description: Provides information about the unary operation. The binder.Operation property returns an <xref href="System.Linq.Expressions.ExpressionType" data-throw-if-not-resolved="false"></xref> object. For example, for the negativeNumber = -number statement, where number is derived from the DynamicObject class, binder.Operation returns "Negate".
    - id: result
      type: System.Object
      description: The result of the unary operation.
    return:
      type: System.Boolean
      description: true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
references:
- uid: System.Dynamic
  isExternal: false
  name: System.Dynamic
  fullName: System.Dynamic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: false
  name: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<String>
  name.vb: Collections.Generic.IEnumerable(Of String)
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: false
  name: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Dynamic.BinaryOperationBinder
  parent: System.Dynamic
  isExternal: false
  name: BinaryOperationBinder
  fullName: System.Dynamic.BinaryOperationBinder
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Dynamic.ConvertBinder
  parent: System.Dynamic
  isExternal: false
  name: ConvertBinder
  fullName: System.Dynamic.ConvertBinder
- uid: System.Dynamic.CreateInstanceBinder
  parent: System.Dynamic
  isExternal: false
  name: CreateInstanceBinder
  fullName: System.Dynamic.CreateInstanceBinder
- uid: System.Object[]
  isExternal: false
  name: Object[]
  name.vb: Object()
  fullName: System.Object[]
  fullName.vb: System.Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.Dynamic.DeleteIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: DeleteIndexBinder
  fullName: System.Dynamic.DeleteIndexBinder
- uid: System.Dynamic.DeleteMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: DeleteMemberBinder
  fullName: System.Dynamic.DeleteMemberBinder
- uid: System.Dynamic.GetIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: GetIndexBinder
  fullName: System.Dynamic.GetIndexBinder
- uid: System.Dynamic.GetMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: GetMemberBinder
  fullName: System.Dynamic.GetMemberBinder
- uid: System.Dynamic.InvokeBinder
  parent: System.Dynamic
  isExternal: false
  name: InvokeBinder
  fullName: System.Dynamic.InvokeBinder
- uid: System.Dynamic.InvokeMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: InvokeMemberBinder
  fullName: System.Dynamic.InvokeMemberBinder
- uid: System.Dynamic.SetIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: SetIndexBinder
  fullName: System.Dynamic.SetIndexBinder
- uid: System.Dynamic.SetMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: SetMemberBinder
  fullName: System.Dynamic.SetMemberBinder
- uid: System.Dynamic.UnaryOperationBinder
  parent: System.Dynamic
  isExternal: false
  name: UnaryOperationBinder
  fullName: System.Dynamic.UnaryOperationBinder
