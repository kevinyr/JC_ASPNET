items:
- uid: System.IO.FileStream
  id: FileStream
  parent: System.IO
  children:
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  - System.IO.FileStream.CanRead
  - System.IO.FileStream.CanSeek
  - System.IO.FileStream.CanWrite
  - System.IO.FileStream.Dispose(System.Boolean)
  - System.IO.FileStream.Finalize
  - System.IO.FileStream.Flush
  - System.IO.FileStream.Flush(System.Boolean)
  - System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.FileStream.IsAsync
  - System.IO.FileStream.Length
  - System.IO.FileStream.Name
  - System.IO.FileStream.Position
  - System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.ReadByte
  - System.IO.FileStream.SafeFileHandle
  - System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.FileStream.SetLength(System.Int64)
  - System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.WriteByte(System.Byte)
  name: FileStream
  fullName: System.IO.FileStream
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 374
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Provides a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> for a file, supporting both synchronous and asynchronous read and write operations.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public class FileStream : Stream'
    content.vb: Public Class FileStream Inherits Stream
  inheritance:
  - System.Object
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)'
  parent: System.IO.FileStream
  name: FileStream(SafeFileHandle, FileAccess)
  fullName: System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 924
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class for the specified file handle, with the specified read/write permission.
  syntax:
    content: public FileStream(SafeFileHandle handle, FileAccess access)
    content.vb: Public Sub New(handle As SafeFileHandle, access As FileAccess)
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: A file handle for the file that the current FileStream object will encapsulate.
    - id: access
      type: System.IO.FileAccess
      description: A constant that sets the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object.
  exceptions:
  - type: System.ArgumentException
    description: '*access* is not a field of <xref href="System.IO.FileAccess" data-throw-if-not-resolved="false"></xref>.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.IOException
    description: An I/O error, such as a disk error, occurred.-or-The stream has been closed.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified file handle, such as when *access* is Write or ReadWrite and the file handle is set for read-only access.
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)'
  parent: System.IO.FileStream
  name: FileStream(SafeFileHandle, FileAccess, Int32)
  fullName: System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 929
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class for the specified file handle, with the specified read/write permission, and buffer size.
  syntax:
    content: public FileStream(SafeFileHandle handle, FileAccess access, int bufferSize)
    content.vb: Public Sub New(handle As SafeFileHandle, access As FileAccess, bufferSize As Integer)
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: A file handle for the file that the current FileStream object will encapsulate.
    - id: access
      type: System.IO.FileAccess
      description: A <xref href="System.IO.FileAccess" data-throw-if-not-resolved="false"></xref> constant that sets the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object.
    - id: bufferSize
      type: System.Int32
      description: A positive <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.
  exceptions:
  - type: System.ArgumentException
    description: The *handle* parameter is an invalid handle.-or-The *handle* parameter is a synchronous handle and it was used asynchronously.
  - type: System.ArgumentOutOfRangeException
    description: The *bufferSize* parameter is negative.
  - type: System.IO.IOException
    description: An I/O error, such as a disk error, occurred.-or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified file handle, such as when *access* is Write or ReadWrite and the file handle is set for read-only access.
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  name: FileStream(SafeFileHandle, FileAccess, Int32, Boolean)
  fullName: System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 934
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.
  syntax:
    content: public FileStream(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync)
    content.vb: Public Sub New(handle As SafeFileHandle, access As FileAccess, bufferSize As Integer, isAsync As Boolean)
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: A file handle for the file that this FileStream object will encapsulate.
    - id: access
      type: System.IO.FileAccess
      description: A constant that sets the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object.
    - id: bufferSize
      type: System.Int32
      description: A positive <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.
    - id: isAsync
      type: System.Boolean
      description: true if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: The *handle* parameter is an invalid handle.-or-The *handle* parameter is a synchronous handle and it was used asynchronously.
  - type: System.ArgumentOutOfRangeException
    description: The *bufferSize* parameter is negative.
  - type: System.IO.IOException
    description: An I/O error, such as a disk error, occurred.-or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified file handle, such as when *access* is Write or ReadWrite and the file handle is set for read-only access.
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  id: '#ctor(System.String,System.IO.FileMode)'
  parent: System.IO.FileStream
  name: FileStream(String, FileMode)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 413
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class with the specified path and creation mode.
  syntax:
    content: public FileStream(string path, FileMode mode)
    content.vb: Public Sub New(path As String, mode As FileMode)
    parameters:
    - id: path
      type: System.String
      description: A relative or absolute path for the file that the current FileStream object will encapsulate.
    - id: mode
      type: System.IO.FileMode
      description: A constant that determines how to open or create the file.
  exceptions:
  - type: System.ArgumentException
    description: '*path* is an empty string (""), contains only white space, or contains one or more invalid characters. -or-*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.'
  - type: System.NotSupportedException
    description: '*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.'
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.FileNotFoundException
    description: The file cannot be found, such as when *mode* is FileMode.Truncate or FileMode.Open, and the file specified by *path* does not exist. The file must already exist in these modes.
  - type: System.IO.IOException
    description: An I/O error, such as specifying FileMode.CreateNew when the file specified by *path* already exists, occurred.-or-The stream has been closed.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.ArgumentOutOfRangeException
    description: '*mode* contains an invalid value.'
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'
  parent: System.IO.FileStream
  name: FileStream(String, FileMode, FileAccess)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 432
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class with the specified path, creation mode, and read/write permission.
  syntax:
    content: public FileStream(string path, FileMode mode, FileAccess access)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess)
    parameters:
    - id: path
      type: System.String
      description: A relative or absolute path for the file that the current FileStream object will encapsulate.
    - id: mode
      type: System.IO.FileMode
      description: A constant that determines how to open or create the file.
    - id: access
      type: System.IO.FileAccess
      description: A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object. <xref href="System.IO.FileStream.CanSeek" data-throw-if-not-resolved="false"></xref> is true if *path* specifies a disk file.
  exceptions:
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.ArgumentException
    description: '*path* is an empty string (""), contains only white space, or contains one or more invalid characters. -or-*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.'
  - type: System.NotSupportedException
    description: '*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.'
  - type: System.IO.FileNotFoundException
    description: The file cannot be found, such as when *mode* is FileMode.Truncate or FileMode.Open, and the file specified by *path* does not exist. The file must already exist in these modes.
  - type: System.IO.IOException
    description: An I/O error, such as specifying FileMode.CreateNew when the file specified by *path* already exists, occurred. -or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified *path*, such as when *access* is Write or ReadWrite and the file or directory is set for read-only access.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.ArgumentOutOfRangeException
    description: '*mode* contains an invalid value.'
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'
  parent: System.IO.FileStream
  name: FileStream(String, FileMode, FileAccess, FileShare)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 451
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class with the specified path, creation mode, read/write permission, and sharing permission.
  syntax:
    content: public FileStream(string path, FileMode mode, FileAccess access, FileShare share)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare)
    parameters:
    - id: path
      type: System.String
      description: A relative or absolute path for the file that the current FileStream object will encapsulate.
    - id: mode
      type: System.IO.FileMode
      description: A constant that determines how to open or create the file.
    - id: access
      type: System.IO.FileAccess
      description: A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object. <xref href="System.IO.FileStream.CanSeek" data-throw-if-not-resolved="false"></xref> is true if *path* specifies a disk file.
    - id: share
      type: System.IO.FileShare
      description: A constant that determines how the file will be shared by processes.
  exceptions:
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.ArgumentException
    description: '*path* is an empty string (""), contains only white space, or contains one or more invalid characters. -or-*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.'
  - type: System.NotSupportedException
    description: '*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.'
  - type: System.IO.FileNotFoundException
    description: The file cannot be found, such as when *mode* is FileMode.Truncate or FileMode.Open, and the file specified by *path* does not exist. The file must already exist in these modes.
  - type: System.IO.IOException
    description: An I/O error, such as specifying FileMode.CreateNew when the file specified by *path* already exists, occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and *share* is set to FileShare.Delete.-or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified *path*, such as when *access* is Write or ReadWrite and the file or directory is set for read-only access.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.ArgumentOutOfRangeException
    description: '*mode* contains an invalid value.'
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)'
  parent: System.IO.FileStream
  name: FileStream(String, FileMode, FileAccess, FileShare, Int32)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 470
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class with the specified path, creation mode, read/write and sharing permission, and buffer size.
  syntax:
    content: public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer)
    parameters:
    - id: path
      type: System.String
      description: A relative or absolute path for the file that the current FileStream object will encapsulate.
    - id: mode
      type: System.IO.FileMode
      description: A constant that determines how to open or create the file.
    - id: access
      type: System.IO.FileAccess
      description: A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object. <xref href="System.IO.FileStream.CanSeek" data-throw-if-not-resolved="false"></xref> is true if *path* specifies a disk file.
    - id: share
      type: System.IO.FileShare
      description: A constant that determines how the file will be shared by processes.
    - id: bufferSize
      type: System.Int32
      description: A positive <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.
  exceptions:
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.ArgumentException
    description: '*path* is an empty string (""), contains only white space, or contains one or more invalid characters. -or-*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.'
  - type: System.NotSupportedException
    description: '*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.'
  - type: System.ArgumentOutOfRangeException
    description: '*bufferSize* is negative or zero.-or- *mode*, *access*, or *share* contain an invalid value.'
  - type: System.IO.FileNotFoundException
    description: The file cannot be found, such as when *mode* is FileMode.Truncate or FileMode.Open, and the file specified by *path* does not exist. The file must already exist in these modes.
  - type: System.IO.IOException
    description: An I/O error, such as specifying FileMode.CreateNew when the file specified by *path* already exists, occurred. -or-The system is running Windows 98 or Windows 98 Second Edition and *share* is set to FileShare.Delete.-or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified *path*, such as when *access* is Write or ReadWrite and the file or directory is set for read-only access.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 506
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.
  syntax:
    content: public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, useAsync As Boolean)
    parameters:
    - id: path
      type: System.String
      description: A relative or absolute path for the file that the current FileStream object will encapsulate.
    - id: mode
      type: System.IO.FileMode
      description: A constant that determines how to open or create the file.
    - id: access
      type: System.IO.FileAccess
      description: A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object. <xref href="System.IO.FileStream.CanSeek" data-throw-if-not-resolved="false"></xref> is true if *path* specifies a disk file.
    - id: share
      type: System.IO.FileShare
      description: A constant that determines how the file will be shared by processes.
    - id: bufferSize
      type: System.Int32
      description: A positive <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096..
    - id: useAsync
      type: System.Boolean
      description: Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <xref href="System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" data-throw-if-not-resolved="false"></xref> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the *useAsync* parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.
  exceptions:
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.ArgumentException
    description: '*path* is an empty string (""), contains only white space, or contains one or more invalid characters. -or-*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.'
  - type: System.NotSupportedException
    description: '*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.'
  - type: System.ArgumentOutOfRangeException
    description: '*bufferSize* is negative or zero.-or- *mode*, *access*, or *share* contain an invalid value.'
  - type: System.IO.FileNotFoundException
    description: The file cannot be found, such as when *mode* is FileMode.Truncate or FileMode.Open, and the file specified by *path* does not exist. The file must already exist in these modes.
  - type: System.IO.IOException
    description: An I/O error, such as specifying FileMode.CreateNew when the file specified by *path* already exists, occurred.-or- The system is running Windows 98 or Windows 98 Second Edition and *share* is set to FileShare.Delete.-or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified *path*, such as when *access* is Write or ReadWrite and the file or directory is set for read-only access.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)'
  parent: System.IO.FileStream
  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32, System.IO.FileOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 499
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
  syntax:
    content: public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, options As FileOptions)
    parameters:
    - id: path
      type: System.String
      description: A relative or absolute path for the file that the current FileStream object will encapsulate.
    - id: mode
      type: System.IO.FileMode
      description: A constant that determines how to open or create the file.
    - id: access
      type: System.IO.FileAccess
      description: A constant that determines how the file can be accessed by the FileStream object. This also determines the values returned by the <xref href="System.IO.FileStream.CanRead" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO.FileStream.CanWrite" data-throw-if-not-resolved="false"></xref> properties of the FileStream object. <xref href="System.IO.FileStream.CanSeek" data-throw-if-not-resolved="false"></xref> is true if *path* specifies a disk file.
    - id: share
      type: System.IO.FileShare
      description: A constant that determines how the file will be shared by processes.
    - id: bufferSize
      type: System.Int32
      description: A positive <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.
    - id: options
      type: System.IO.FileOptions
      description: A value that specifies additional file options.
  exceptions:
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.ArgumentException
    description: '*path* is an empty string (""), contains only white space, or contains one or more invalid characters. -or-*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.'
  - type: System.NotSupportedException
    description: '*path* refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.'
  - type: System.ArgumentOutOfRangeException
    description: '*bufferSize* is negative or zero.-or- *mode*, *access*, or *share* contain an invalid value.'
  - type: System.IO.FileNotFoundException
    description: The file cannot be found, such as when *mode* is FileMode.Truncate or FileMode.Open, and the file specified by *path* does not exist. The file must already exist in these modes.
  - type: System.IO.IOException
    description: An I/O error, such as specifying FileMode.CreateNew when the file specified by *path* already exists, occurred.-or-The stream has been closed.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.UnauthorizedAccessException
    description: The *access* requested is not permitted by the operating system for the specified *path*, such as when *access* is Write or ReadWrite and the file or directory is set for read-only access. -or-<xref href="System.IO.FileOptions.Encrypted" data-throw-if-not-resolved="false"></xref> is specified for *options*, but file encryption is not supported on the current platform.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
- uid: System.IO.FileStream.CanRead
  id: CanRead
  parent: System.IO.FileStream
  name: CanRead
  fullName: System.IO.FileStream.CanRead
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1080
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets a value indicating whether the current stream supports reading.
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the stream supports reading; false if the stream is closed or was opened with write-only access.
- uid: System.IO.FileStream.CanSeek
  id: CanSeek
  parent: System.IO.FileStream
  name: CanSeek
  fullName: System.IO.FileStream.CanSeek
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1090
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets a value indicating whether the current stream supports seeking.
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the stream supports seeking; false if the stream is closed or if the FileStream was constructed from an operating-system handle such as a pipe or output to the console.
- uid: System.IO.FileStream.CanWrite
  id: CanWrite
  parent: System.IO.FileStream
  name: CanWrite
  fullName: System.IO.FileStream.CanWrite
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1085
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets a value indicating whether the current stream supports writing.
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the stream supports writing; false if the stream is closed or was opened with read-only access.
- uid: System.IO.FileStream.IsAsync
  id: IsAsync
  parent: System.IO.FileStream
  name: IsAsync
  fullName: System.IO.FileStream.IsAsync
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1095
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
  syntax:
    content: public virtual bool IsAsync { get; }
    content.vb: Public Overridable ReadOnly Property IsAsync As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the FileStream was opened asynchronously; otherwise, false.
- uid: System.IO.FileStream.Length
  id: Length
  parent: System.IO.FileStream
  name: Length
  fullName: System.IO.FileStream.Length
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1099
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets the length in bytes of the stream.
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: A long value representing the length of the stream in bytes.
  exceptions:
  - type: System.NotSupportedException
    description: <xref href="System.IO.FileStream.CanSeek" data-throw-if-not-resolved="false"></xref> for this stream is false.
  - type: System.IO.IOException
    description: An I/O error, such as the file being closed, occurred.
- uid: System.IO.FileStream.Name
  id: Name
  parent: System.IO.FileStream
  name: Name
  fullName: System.IO.FileStream.Name
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1123
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets the name of the FileStream that was passed to the constructor.
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: A string that is the name of the FileStream.
- uid: System.IO.FileStream.Position
  id: Position
  parent: System.IO.FileStream
  name: Position
  fullName: System.IO.FileStream.Position
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1146
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets or sets the current position of this stream.
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: The current position of this stream.
  exceptions:
  - type: System.NotSupportedException
    description: The stream does not support seeking.
  - type: System.IO.IOException
    description: An I/O error occurred. - or -The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.
  - type: System.ArgumentOutOfRangeException
    description: Attempted to set the position to a negative value.
  - type: System.IO.EndOfStreamException
    description: Attempted seeking past the end of a stream that does not support this.
- uid: System.IO.FileStream.SafeFileHandle
  id: SafeFileHandle
  parent: System.IO.FileStream
  name: SafeFileHandle
  fullName: System.IO.FileStream.SafeFileHandle
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1343
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets a <xref href="Microsoft.Win32.SafeHandles.SafeFileHandle" data-throw-if-not-resolved="false"></xref> object that represents the operating system file handle for the file that the current <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> object encapsulates.
  syntax:
    content: public virtual SafeFileHandle SafeFileHandle { get; }
    content.vb: Public Overridable ReadOnly Property SafeFileHandle As SafeFileHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: An object that represents the operating system file handle for the file that the current <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> object encapsulates.
- uid: System.IO.FileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileStream
  name: Dispose(Boolean)
  fullName: System.IO.FileStream.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1194
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.IO.FileStream.Finalize
  id: Finalize
  parent: System.IO.FileStream
  name: Finalize()
  fullName: System.IO.FileStream.Finalize()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1230
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the FileStream.
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
- uid: System.IO.FileStream.Flush
  id: Flush
  parent: System.IO.FileStream
  name: Flush()
  fullName: System.IO.FileStream.Flush()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1239
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Clears buffers for this stream and causes any buffered data to be written to the file.
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurred.
  - type: System.ObjectDisposedException
    description: The stream is closed.
- uid: System.IO.FileStream.Flush(System.Boolean)
  id: Flush(System.Boolean)
  parent: System.IO.FileStream
  name: Flush(Boolean)
  fullName: System.IO.FileStream.Flush(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1244
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.
  syntax:
    content: public virtual void Flush(bool flushToDisk)
    content.vb: Public Overridable Sub Flush(flushToDisk As Boolean)
    parameters:
    - id: flushToDisk
      type: System.Boolean
      description: true to flush all intermediate file buffers; otherwise, false.
- uid: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.FileStream
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2698
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous flush operation.
  exceptions:
  - type: System.ObjectDisposedException
    description: The stream has been disposed.
- uid: System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  name: Read(Byte[], Int32, Int32)
  name.vb: Read(Byte(), Int32, Int32)
  fullName: System.IO.FileStream.Read(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.IO.FileStream.Read(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1415
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Reads a block of bytes from the stream and writes the data in a given buffer.
  syntax:
    content: public override int Read(byte[] array, int offset, int count)
    content.vb: Public Overrides Function Read(array As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Byte[]
      description: When this method returns, contains the specified byte array with the values between *offset* and (*offset* + *count* - 1*)* replaced by the bytes read from the current source.
    - id: offset
      type: System.Int32
      description: The byte offset in *array* at which the read bytes will be placed.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    return:
      type: System.Int32
      description: The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* or *count* is negative.'
  - type: System.NotSupportedException
    description: The stream does not support reading.
  - type: System.IO.IOException
    description: An I/O error occurred.
  - type: System.ArgumentException
    description: '*offset* and *count* describe an invalid range in *array*.'
  - type: System.ObjectDisposedException
    description: Methods were called after the stream was closed.
- uid: System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.FileStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.IO.FileStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2473
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in *buffer* at which to begin writing data from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* or *count* is negative.'
  - type: System.ArgumentException
    description: The sum of *offset* and *count* is larger than the buffer length.
  - type: System.NotSupportedException
    description: The stream does not support reading.
  - type: System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    description: The stream is currently in use by a previous read operation.
- uid: System.IO.FileStream.ReadByte
  id: ReadByte
  parent: System.IO.FileStream
  name: ReadByte()
  fullName: System.IO.FileStream.ReadByte()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2057
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Reads a byte from the file and advances the read position one byte.
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
      description: The byte, cast to an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref>, or -1 if the end of the stream has been reached.
  exceptions:
  - type: System.NotSupportedException
    description: The current stream does not support reading.
  - type: System.ObjectDisposedException
    description: The current stream is closed.
- uid: System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.FileStream
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.FileStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1526
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Sets the current position of this stream to the given value.
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: The point relative to *origin* from which to begin seeking.
    - id: origin
      type: System.IO.SeekOrigin
      description: Specifies the beginning, the end, or the current position as a reference point for *offset*, using a value of type <xref href="System.IO.SeekOrigin" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int64
      description: The new position in the stream.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurred.
  - type: System.NotSupportedException
    description: The stream does not support seeking, such as if the FileStream is constructed from a pipe or console output.
  - type: System.ArgumentException
    description: Seeking is attempted before the beginning of the stream.
  - type: System.ObjectDisposedException
    description: Methods were called after the stream was closed.
- uid: System.IO.FileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.FileStream
  name: SetLength(Int64)
  fullName: System.IO.FileStream.SetLength(System.Int64)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1361
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Sets the length of this stream to the given value.
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: The new length of the stream.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error has occurred.
  - type: System.NotSupportedException
    description: The stream does not support both writing and seeking.
  - type: System.ArgumentOutOfRangeException
    description: Attempted to set the *value* parameter to less than 0.
- uid: System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  name: Write(Byte[], Int32, Int32)
  name.vb: Write(Byte(), Int32, Int32)
  fullName: System.IO.FileStream.Write(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.IO.FileStream.Write(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1668
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Writes a block of bytes to the file stream.
  syntax:
    content: public override void Write(byte[] array, int offset, int count)
    content.vb: Public Overrides Sub Write(array As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: array
      type: System.Byte[]
      description: The buffer containing data to write to the stream.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in *array* from which to begin copying bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentException
    description: '*offset* and *count* describe an invalid range in *array*.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* or *count* is negative.'
  - type: System.IO.IOException
    description: An I/O error occurred. - or -Another thread may have caused an unexpected change in the position of the operating system's file handle.
  - type: System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    description: The current stream instance does not support writing.
- uid: System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.FileStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullName.vb: System.IO.FileStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2525
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in *buffer* from which to begin copying bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous write operation.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* or *count* is negative.'
  - type: System.ArgumentException
    description: The sum of *offset* and *count* is larger than the buffer length.
  - type: System.NotSupportedException
    description: The stream does not support writing.
  - type: System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    description: The stream is currently in use by a previous write operation.
- uid: System.IO.FileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.FileStream
  name: WriteByte(Byte)
  fullName: System.IO.FileStream.WriteByte(System.Byte)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2287
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Writes a byte to the current position in the file stream.
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: A byte to write to the stream.
  exceptions:
  - type: System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    description: The stream does not support writing.
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.FileOptions
  parent: System.IO
  isExternal: false
  name: FileOptions
  fullName: System.IO.FileOptions
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  name.vb: Threading.Tasks.Task(Of Int32)
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  name.vb: Threading.Tasks.Task(Of )
  fullName: System.Threading.Tasks.Task<>
  fullName.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.IO.EndOfStreamException
  isExternal: false
  name: EndOfStreamException
  fullName: System.IO.EndOfStreamException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
