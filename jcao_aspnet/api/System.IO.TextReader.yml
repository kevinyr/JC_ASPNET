items:
- uid: System.IO.TextReader
  id: TextReader
  parent: System.IO
  children:
  - System.IO.TextReader.#ctor
  - System.IO.TextReader.Dispose
  - System.IO.TextReader.Dispose(System.Boolean)
  - System.IO.TextReader.Null
  - System.IO.TextReader.Peek
  - System.IO.TextReader.Read
  - System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadLine
  - System.IO.TextReader.ReadLineAsync
  - System.IO.TextReader.ReadToEnd
  - System.IO.TextReader.ReadToEndAsync
  name: TextReader
  fullName: System.IO.TextReader
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 35
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Represents a reader that can read a sequential series of characters.
  syntax:
    content: 'public abstract class TextReader : IDisposable'
    content.vb: Public MustInherit Class TextReader Inherits IDisposable
  inheritance:
  - System.Object
- uid: System.IO.TextReader.Null
  parent: System.IO.TextReader
  fullName: System.IO.TextReader.Null
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 43
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Provides a TextReader with no data to read from.
  syntax:
    content: public static readonly TextReader Null
    content.vb: Public Shared ReadOnly Null As TextReader
- uid: System.IO.TextReader.#ctor
  id: '#ctor'
  parent: System.IO.TextReader
  name: TextReader()
  fullName: System.IO.TextReader.TextReader()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 45
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected TextReader()
    content.vb: Protected Sub New
- uid: System.IO.TextReader.Dispose
  id: Dispose
  parent: System.IO.TextReader
  name: Dispose()
  fullName: System.IO.TextReader.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 59
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Releases all resources used by the <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.IO.TextReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.TextReader
  name: Dispose(Boolean)
  fullName: System.IO.TextReader.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 65
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.IO.TextReader.Peek
  id: Peek
  parent: System.IO.TextReader
  name: Peek()
  fullName: System.IO.TextReader.Peek()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 76
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.
  syntax:
    content: public virtual int Peek()
    content.vb: Public Overridable Function Peek As Integer
    return:
      type: System.Int32
      description: An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.
  exceptions:
  - type: System.ObjectDisposedException
    description: The <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.Read
  id: Read
  parent: System.IO.TextReader
  name: Read()
  fullName: System.IO.TextReader.Read()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 89
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads the next character from the text reader and advances the character position by one character.
  syntax:
    content: public virtual int Read()
    content.vb: Public Overridable Function Read As Integer
    return:
      type: System.Int32
      description: The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.
  exceptions:
  - type: System.ObjectDisposedException
    description: The <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  name: Read(Char[], Int32, Int32)
  name.vb: Read(Char(), Int32, Int32)
  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 100
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual int Read(char[] buffer, int index, int count)
    content.vb: Public Overridable Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between *index* and (*index* + *count* - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.
    return:
      type: System.Int32
      description: The number of characters that have been read. The number will be less than or equal to *count*, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentException
    description: The buffer length minus *index* is less than *count*.
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ObjectDisposedException
    description: The <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  id: ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  name: ReadAsync(Char[], Int32, Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 203
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between *index* and (*index* + *count* - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ArgumentException
    description: The sum of *index* and *count* is larger than the buffer length.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  id: ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  name: ReadBlock(Char[], Int32, Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 142
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual int ReadBlock(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, this parameter contains the specified character array with the values between *index* and (*index* + *count* -1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read.
    return:
      type: System.Int32
      description: The number of characters that have been read. The number will be less than or equal to *count*, depending on whether all input characters have been read.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentException
    description: The buffer length minus *index* is less than *count*.
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ObjectDisposedException
    description: The <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  name: ReadBlockAsync(Char[], Int32, Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 234
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between *index* and (*index* + *count* - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ArgumentException
    description: The sum of *index* and *count* is larger than the buffer length.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
- uid: System.IO.TextReader.ReadLine
  id: ReadLine
  parent: System.IO.TextReader
  name: ReadLine()
  fullName: System.IO.TextReader.ReadLine()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 160
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a line of characters from the text reader and returns the data as a string.
  syntax:
    content: public virtual string ReadLine()
    content.vb: Public Overridable Function ReadLine As String
    return:
      type: System.String
      description: The next line from the reader, or null if all characters have been read.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurs.
  - type: System.OutOfMemoryException
    description: There is insufficient memory to allocate a buffer for the returned string.
  - type: System.ObjectDisposedException
    description: The <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> is closed.
  - type: System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>
- uid: System.IO.TextReader.ReadLineAsync
  id: ReadLineAsync
  parent: System.IO.TextReader
  name: ReadLineAsync()
  fullName: System.IO.TextReader.ReadLineAsync()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 178
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a line of characters asynchronously and returns the data as a string.
  syntax:
    content: public virtual Threading.Tasks.Task<string> ReadLineAsync()
    content.vb: Public Overridable Function ReadLineAsync As Threading.Tasks.Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the next line from the text reader, or is null if all of the characters have been read.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
- uid: System.IO.TextReader.ReadToEnd
  id: ReadToEnd
  parent: System.IO.TextReader
  name: ReadToEnd()
  fullName: System.IO.TextReader.ReadToEnd()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 125
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the text reader and returns them as one string.
  syntax:
    content: public virtual string ReadToEnd()
    content.vb: Public Overridable Function ReadToEnd As String
    return:
      type: System.String
      description: A string that contains all characters from the current position to the end of the text reader.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurs.
  - type: System.ObjectDisposedException
    description: The <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> is closed.
  - type: System.OutOfMemoryException
    description: There is insufficient memory to allocate a buffer for the returned string.
  - type: System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>
- uid: System.IO.TextReader.ReadToEndAsync
  id: ReadToEndAsync
  parent: System.IO.TextReader
  name: ReadToEndAsync()
  fullName: System.IO.TextReader.ReadToEndAsync()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 189
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.
  syntax:
    content: public virtual Threading.Tasks.Task<string> ReadToEndAsync()
    content.vb: Public Overridable Function ReadToEndAsync As Threading.Tasks.Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains a string with the characters from the current position to the end of the text reader.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The number of characters is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char[]
  isExternal: false
  name: Char[]
  name.vb: Char()
  fullName: System.Char[]
  fullName.vb: System.Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  name.vb: Threading.Tasks.Task(Of Int32)
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  name.vb: Threading.Tasks.Task(Of )
  fullName: System.Threading.Tasks.Task<>
  fullName.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.String}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<String>
  name.vb: Threading.Tasks.Task(Of String)
  fullName: System.Threading.Tasks.Task<System.String>
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
