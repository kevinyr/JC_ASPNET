items:
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  id: Enumerable
  parent: System.Linq
  children:
  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.Empty``1
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Range(System.Int32,System.Int32)
  - System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
  type: Class
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enumerable
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 10
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: 'public class Enumerable : object'
    content.vb: >-
      Public Class Enumerable
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TSource, TSource>)
  nameWithType: Enumerable.Aggregate<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.Enumerable.Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 12
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Aggregate<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Aggregate(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource))
  name.vb: Aggregate(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))
- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  id: Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(Collections.Generic.IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  nameWithType: Enumerable.Aggregate<TSource, TAccumulate>(Collections.Generic.IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 13
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As Collections.Generic.IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    return:
      type: '{TAccumulate}'
  nameWithType.vb: Enumerable.Aggregate(Of TSource, TAccumulate)(Collections.Generic.IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Aggregate(Of TSource, TAccumulate)(Collections.Generic.IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(Collections.Generic.IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType: Enumerable.Aggregate<TSource, TAccumulate, TResult>(Collections.Generic.IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 14
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As Collections.Generic.IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    - id: TResult
    return:
      type: '{TResult}'
  nameWithType.vb: Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(Collections.Generic.IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(Collections.Generic.IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: All<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.All<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 15
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool All<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.All(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.All(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: All(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  id: Any``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Any<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 16
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.Any(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Any(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.Any<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 17
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.Any(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Any(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: AsEnumerable<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.AsEnumerable<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsEnumerable
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 18
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.AsEnumerable(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.AsEnumerable(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsEnumerable(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Average(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Decimal>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 19
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Average(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Average(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  id: Average(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Double>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 20
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Average(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Average(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  id: Average(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Int32>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 21
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Average(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Average(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  id: Average(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Int64>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 22
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Average(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Long)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Average(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 23
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Average(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 24
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 25
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 26
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 27
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Average(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  id: Average(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Single>)
  nameWithType: Enumerable.Average(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 28
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Average(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Average(Collections.Generic.IEnumerable(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Average(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 29
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 30
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 31
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 32
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 33
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 34
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 35
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 36
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 37
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType: Enumerable.Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 38
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  id: Cast``1(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(Collections.IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 39
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Cast<TResult>(this Collections.IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As Collections.IEnumerable) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Cast(Of TResult)(Collections.IEnumerable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(Collections.IEnumerable)
- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Concat<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 40
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Concat<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Concat(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Concat(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Append<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Append<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Append
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 41
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Append<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Append(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), element As TSource) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: element
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Append(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Append(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Append(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Prepend<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Prepend<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prepend
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 42
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Prepend<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Prepend(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), element As TSource) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: element
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Prepend(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Prepend(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Prepend(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Contains<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 43
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), value As TSource) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: value
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.Contains(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(Collections.Generic.IEnumerable<TSource>, TSource, Collections.Generic.IEqualityComparer<TSource>)
  nameWithType: Enumerable.Contains<TSource>(Collections.Generic.IEnumerable<TSource>, TSource, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 44
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), value As TSource, comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: value
      type: '{TSource}'
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.Contains(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource, Collections.Generic.IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource, Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  id: Count``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Count<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 45
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Count(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Count(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.Count<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 46
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Count(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Count(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 47
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 48
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), defaultValue As TSource) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: defaultValue
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Distinct<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 49
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Distinct(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  nameWithType: Enumerable.Distinct<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 50
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Distinct(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.ElementAt<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 51
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource ElementAt<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.ElementAt(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ElementAt(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.ElementAtOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 52
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.ElementAtOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ElementAtOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.Empty``1
  commentId: M:System.Linq.Enumerable.Empty``1
  id: Empty``1
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Empty<TResult>()
  nameWithType: Enumerable.Empty<TResult>()
  fullName: System.Linq.Enumerable.Empty<TResult>()
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 53
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Empty<TResult>()
    content.vb: Public Shared Function Empty(Of TResult) As Collections.Generic.IEnumerable(Of TResult)
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Empty(Of TResult)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Empty(Of TResult)()
  name.vb: Empty(Of TResult)()
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Except<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 54
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Except(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  nameWithType: Enumerable.Except<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 55
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Except(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  id: First``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.First<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 56
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.First(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: First(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.First<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 57
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.First(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: First(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.FirstOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 58
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.FirstOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.FirstOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 59
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.FirstOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FirstOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.GroupBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 60
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 61
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 62
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: GroupBy(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 63
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>)
  nameWithType: Enumerable.GroupBy<TSource, TKey, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 64
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource, TKey, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 65
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>)
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 66
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 67
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>)
  nameWithType: Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 68
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 69
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Intersect<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 70
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Intersect(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  nameWithType: Enumerable.Intersect<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 71
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Intersect(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  nameWithType: Enumerable.Join<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 72
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Join(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.Join<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 73
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Join(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  id: Last``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Last<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 74
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Last(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Last(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.Last<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 75
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Last(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Last(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.LastOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 76
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.LastOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LastOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.LastOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 77
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.LastOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LastOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  id: LongCount``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.LongCount<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 78
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.LongCount(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LongCount(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.LongCount<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 79
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.LongCount(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LongCount(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Max(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Decimal>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 80
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Max(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Max(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  id: Max(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Double>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 81
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Max(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Max(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  id: Max(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Int32>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 82
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Max(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Max(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  id: Max(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Int64>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 83
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long Max(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Max(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 84
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Max(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 85
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Max(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 86
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Max(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 87
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Max(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
    return:
      type: System.Nullable{System.Int64}
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 88
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Max(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  id: Max(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Single>)
  nameWithType: Enumerable.Max(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 89
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Max(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Max(Collections.Generic.IEnumerable(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Max(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  id: Max``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 90
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Max<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 91
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 92
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 93
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 94
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 95
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 96
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 97
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 98
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 99
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType: Enumerable.Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 100
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType: Enumerable.Max<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 101
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TResult Max<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}'
  nameWithType.vb: Enumerable.Max(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Min(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Decimal>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 102
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Min(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Min(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  id: Min(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Double>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 103
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Min(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Min(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  id: Min(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Int32>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 104
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Min(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Min(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  id: Min(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Int64>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 105
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long Min(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Min(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 106
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Min(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 107
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Min(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 108
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Min(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 109
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Min(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
    return:
      type: System.Nullable{System.Int64}
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 110
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Min(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  id: Min(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Single>)
  nameWithType: Enumerable.Min(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 111
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Min(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Min(Collections.Generic.IEnumerable(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Min(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  id: Min``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 112
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Min<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 113
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 114
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 115
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 116
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 117
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 118
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 119
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 120
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 121
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType: Enumerable.Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 122
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType: Enumerable.Min<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 123
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TResult Min<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}'
  nameWithType.vb: Enumerable.Min(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Min(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  id: OfType``1(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(Collections.IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 124
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> OfType<TResult>(this Collections.IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As Collections.IEnumerable) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.OfType(Of TResult)(Collections.IEnumerable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(Collections.IEnumerable)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.OrderBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 125
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.OrderBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  nameWithType: Enumerable.OrderBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 126
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.OrderBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.OrderByDescending<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 127
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.OrderByDescending(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  nameWithType: Enumerable.OrderByDescending<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 128
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.OrderByDescending(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.Range(System.Int32,System.Int32)
  commentId: M:System.Linq.Enumerable.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  nameWithType: Enumerable.Range(Int32, Int32)
  fullName: System.Linq.Enumerable.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Range
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 129
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<int> Range(int start, int count)
    content.vb: Public Shared Function Range(start As Integer, count As Integer) As Collections.Generic.IEnumerable(Of Integer)
    parameters:
    - id: start
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  commentId: M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Repeat<TResult>(TResult, Int32)
  nameWithType: Enumerable.Repeat<TResult>(TResult, Int32)
  fullName: System.Linq.Enumerable.Repeat<TResult>(TResult, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Repeat
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 130
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult element, int count)
    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: element
      type: '{TResult}'
    - id: count
      type: System.Int32
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Repeat(Of TResult)(TResult, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Repeat(Of TResult)(TResult, System.Int32)
  name.vb: Repeat(Of TResult)(TResult, Int32)
- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  id: Reverse``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Reverse<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 131
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Reverse<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Reverse(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Reverse(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Reverse(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType: Enumerable.Select<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 132
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Select(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, TResult>)
  nameWithType: Enumerable.Select<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 133
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Select(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  name.vb: Select(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Collections.Generic.IEnumerable<TResult>>)
  nameWithType: Enumerable.SelectMany<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Collections.Generic.IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 134
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TResult)))
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>)
  nameWithType: Enumerable.SelectMany<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 135
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TResult))) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult)))
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType: Enumerable.SelectMany<TSource, TCollection, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 136
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As Collections.Generic.IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
    typeParameters:
    - id: TSource
    - id: TCollection
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TCollection, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType: Enumerable.SelectMany<TSource, TCollection, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 137
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As Collections.Generic.IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: collectionSelector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
    typeParameters:
    - id: TSource
    - id: TCollection
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TCollection, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.SequenceEqual<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 138
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.SequenceEqual(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  nameWithType: Enumerable.SequenceEqual<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 139
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  nameWithType.vb: Enumerable.SequenceEqual(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Single<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 140
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Single(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Single(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.Single<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 141
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.Single(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Single(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.SingleOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 142
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.SingleOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.SingleOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 143
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  nameWithType.vb: Enumerable.SingleOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.Skip<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 144
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Skip<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), count As Integer) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: count
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Skip(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Skip(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.SkipWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 145
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.SkipWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SkipWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType: Enumerable.SkipWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 146
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.SkipWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Decimal>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 147
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Sum(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  id: Sum(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Double>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 148
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Sum(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  id: Sum(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Int32>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 149
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Sum(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  id: Sum(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Int64>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 150
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long Sum(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 151
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Sum(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 152
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Sum(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 153
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Sum(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 154
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Sum(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
    return:
      type: System.Nullable{System.Int64}
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 155
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Sum(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  id: Sum(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Single>)
  nameWithType: Enumerable.Sum(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 156
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Sum(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Sum(Collections.Generic.IEnumerable(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 157
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static decimal Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 158
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static double Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 159
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static int Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 160
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static long Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 161
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 162
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 163
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 164
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 165
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType: Enumerable.Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 166
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static float Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  nameWithType.vb: Enumerable.Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Take<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.Take<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 167
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Take<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), count As Integer) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: count
      type: System.Int32
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Take(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Take(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.TakeWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 168
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.TakeWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: TakeWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType: Enumerable.TakeWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 169
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.TakeWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 170
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  nameWithType: Enumerable.ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 171
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 172
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  nameWithType: Enumerable.ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 173
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
  nameWithType.vb: Enumerable.ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  id: ToArray``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToArray<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.ToArray<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 174
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static TSource[] ToArray<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource()
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}[]'
  nameWithType.vb: Enumerable.ToArray(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToArray(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToArray(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.ToDictionary<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 175
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Collections.Generic.Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToDictionary(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToDictionary<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 176
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType: Enumerable.ToDictionary<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 177
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Collections.Generic.Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToDictionary<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 178
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  id: ToList``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToList<TSource>(Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.ToList<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToList
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 179
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.List<TSource> ToList<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToList(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.List(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.List{{TSource}}
  nameWithType.vb: Enumerable.ToList(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToList(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToList(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: Enumerable.ToLookup<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 180
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToLookup(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToLookup<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 181
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType: Enumerable.ToLookup<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 182
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToLookup(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToLookup<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 183
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  nameWithType: Enumerable.Union<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 184
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Union(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  nameWithType: Enumerable.Union<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 185
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Union(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType: Enumerable.Where<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 186
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Where(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Where(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType: Enumerable.Where<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 187
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  nameWithType.vb: Enumerable.Where(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Where(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(Collections.Generic.IEnumerable<TFirst>, Collections.Generic.IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  nameWithType: Enumerable.Zip<TFirst, TSecond, TResult>(Collections.Generic.IEnumerable<TFirst>, Collections.Generic.IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 188
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this Collections.Generic.IEnumerable<TFirst> first, Collections.Generic.IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As Collections.Generic.IEnumerable(Of TFirst), second As Collections.Generic.IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TFirst}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSecond}}
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
    typeParameters:
    - id: TFirst
    - id: TSecond
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
  nameWithType.vb: Enumerable.Zip(Of TFirst, TSecond, TResult)(Collections.Generic.IEnumerable(Of TFirst), Collections.Generic.IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Zip(Of TFirst, TSecond, TResult)(System.Collections.Generic.IEnumerable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(Collections.Generic.IEnumerable(Of TFirst), Collections.Generic.IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
references:
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: '!:System.Collections.Generic.IEnumerable{`0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TSource>
  nameWithType: Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: Generic.IEnumerable(Of TSource)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    nameWithType: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TSource}}
  commentId: '!:System.Func{``0,``0,``0}'
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  nameWithType: Func<TSource, TSource, TSource>
  fullName: System.Func<TSource, TSource, TSource>
  nameWithType.vb: Func(Of TSource, TSource, TSource)
  fullname.vb: System.Func(Of TSource, TSource, TSource)
  name.vb: Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: false
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: System.Func<, , >
  nameWithType.vb: Func(Of , , )
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: TSource
  isExternal: false
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: '{TAccumulate}'
  commentId: '!:TAccumulate'
  definition: TAccumulate
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  commentId: '!:System.Func{``1,``0,``1}'
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  nameWithType: Func<TAccumulate, TSource, TAccumulate>
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  nameWithType.vb: Func(Of TAccumulate, TSource, TAccumulate)
  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: )
    nameWithType: )
    fullName: )
- uid: TAccumulate
  isExternal: false
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TResult}}
  commentId: '!:System.Func{``1,``2}'
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  nameWithType: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  nameWithType.vb: Func(Of TAccumulate, TResult)
  fullname.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: false
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{{TSource},System.Boolean}
  commentId: '!:System.Func{``0,System.Boolean}'
  definition: System.Func`2
  name: Func<TSource, Boolean>
  nameWithType: Func<TSource, Boolean>
  fullName: System.Func<TSource, System.Boolean>
  nameWithType.vb: Func(Of TSource, Boolean)
  fullname.vb: System.Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Decimal}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Decimal}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Decimal>
  nameWithType: Collections.Generic.IEnumerable<Decimal>
  fullName: System.Collections.Generic.IEnumerable<System.Decimal>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Decimal)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Decimal)
  name.vb: Collections.Generic.IEnumerable(Of Decimal)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Collections.Generic.IEnumerable{System.Double}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Double}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Double>
  nameWithType: Collections.Generic.IEnumerable<Double>
  fullName: System.Collections.Generic.IEnumerable<System.Double>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Double)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Double)
  name.vb: Collections.Generic.IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Int32}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Int32>
  nameWithType: Collections.Generic.IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Int32)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: Collections.Generic.IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Int64}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Int64>
  nameWithType: Collections.Generic.IEnumerable<Int64>
  fullName: System.Collections.Generic.IEnumerable<System.Int64>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Int64)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)
  name.vb: Collections.Generic.IEnumerable(Of Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Decimal>>
  nameWithType: Collections.Generic.IEnumerable<Nullable<Decimal>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Nullable(Of Decimal))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  commentId: '!:System.Nullable{System.Decimal}'
  definition: System.Nullable`1
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  nameWithType.vb: Nullable(Of Decimal)
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Double>>
  nameWithType: Collections.Generic.IEnumerable<Nullable<Double>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Nullable(Of Double))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Int32>>
  nameWithType: Collections.Generic.IEnumerable<Nullable<Int32>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Nullable(Of Int32))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Int64>>
  nameWithType: Collections.Generic.IEnumerable<Nullable<Int64>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Nullable(Of Int64))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Single>>
  nameWithType: Collections.Generic.IEnumerable<Nullable<Single>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Nullable(Of Single))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Single}
  commentId: '!:System.Nullable{System.Single}'
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Single}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Single}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Single>
  nameWithType: Collections.Generic.IEnumerable<Single>
  fullName: System.Collections.Generic.IEnumerable<System.Single>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Single)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Single)
  name.vb: Collections.Generic.IEnumerable(Of Single)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Func{{TSource},System.Decimal}
  commentId: '!:System.Func{``0,System.Decimal}'
  definition: System.Func`2
  name: Func<TSource, Decimal>
  nameWithType: Func<TSource, Decimal>
  fullName: System.Func<TSource, System.Decimal>
  nameWithType.vb: Func(Of TSource, Decimal)
  fullname.vb: System.Func(Of TSource, System.Decimal)
  name.vb: Func(Of TSource, Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Double}
  commentId: '!:System.Func{``0,System.Double}'
  definition: System.Func`2
  name: Func<TSource, Double>
  nameWithType: Func<TSource, Double>
  fullName: System.Func<TSource, System.Double>
  nameWithType.vb: Func(Of TSource, Double)
  fullname.vb: System.Func(Of TSource, System.Double)
  name.vb: Func(Of TSource, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int32}
  commentId: '!:System.Func{``0,System.Int32}'
  definition: System.Func`2
  name: Func<TSource, Int32>
  nameWithType: Func<TSource, Int32>
  fullName: System.Func<TSource, System.Int32>
  nameWithType.vb: Func(Of TSource, Int32)
  fullname.vb: System.Func(Of TSource, System.Int32)
  name.vb: Func(Of TSource, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int64}
  commentId: '!:System.Func{``0,System.Int64}'
  definition: System.Func`2
  name: Func<TSource, Int64>
  nameWithType: Func<TSource, Int64>
  fullName: System.Func<TSource, System.Int64>
  nameWithType.vb: Func(Of TSource, Int64)
  fullname.vb: System.Func(Of TSource, System.Int64)
  name.vb: Func(Of TSource, Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  commentId: '!:System.Func{``0,System.Nullable{System.Decimal}}'
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  nameWithType: Func<TSource, Nullable<Decimal>>
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Decimal))
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  commentId: '!:System.Func{``0,System.Nullable{System.Double}}'
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  nameWithType: Func<TSource, Nullable<Double>>
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Double))
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  name.vb: Func(Of TSource, Nullable(Of Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  commentId: '!:System.Func{``0,System.Nullable{System.Int32}}'
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  nameWithType: Func<TSource, Nullable<Int32>>
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int32))
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  name.vb: Func(Of TSource, Nullable(Of Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  commentId: '!:System.Func{``0,System.Nullable{System.Int64}}'
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  nameWithType: Func<TSource, Nullable<Int64>>
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int64))
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  name.vb: Func(Of TSource, Nullable(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  commentId: '!:System.Func{``0,System.Nullable{System.Single}}'
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  nameWithType: Func<TSource, Nullable<Single>>
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Single))
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  name.vb: Func(Of TSource, Nullable(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Single}
  commentId: '!:System.Func{``0,System.Single}'
  definition: System.Func`2
  name: Func<TSource, Single>
  nameWithType: Func<TSource, Single>
  fullName: System.Func<TSource, System.Single>
  nameWithType.vb: Func(Of TSource, Single)
  fullname.vb: System.Func(Of TSource, System.Single)
  name.vb: Func(Of TSource, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  nameWithType: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: '!:System.Collections.Generic.IEnumerable{``0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TResult>
  nameWithType: Collections.Generic.IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TResult)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: Collections.Generic.IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  commentId: '!:System.Collections.Generic.IEqualityComparer{``0}'
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TSource>
  nameWithType: Collections.Generic.IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  nameWithType.vb: Collections.Generic.IEqualityComparer(Of TSource)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: Collections.Generic.IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    nameWithType: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    nameWithType: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Generic.IEqualityComparer<>
  nameWithType: Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  nameWithType.vb: Generic.IEqualityComparer(Of )
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    nameWithType: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    nameWithType: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{{TSource},{TKey}}
  commentId: '!:System.Func{``0,``1}'
  definition: System.Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullname.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``0}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<IGrouping<TKey, TSource>>
  nameWithType: Collections.Generic.IEnumerable<IGrouping<TKey, TSource>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: '!:System.Collections.Generic.IEqualityComparer{`0}'
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Generic.IEqualityComparer<TKey>
  nameWithType: Generic.IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: Generic.IEqualityComparer(Of TKey)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    nameWithType: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    nameWithType: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TElement}}
  commentId: '!:System.Func{``0,``2}'
  definition: System.Func`2
  name: Func<TSource, TElement>
  nameWithType: Func<TSource, TElement>
  fullName: System.Func<TSource, TElement>
  nameWithType.vb: Func(Of TSource, TElement)
  fullname.vb: System.Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``2}}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>
  nameWithType: Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>
  nameWithType.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  commentId: '!:System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}'
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>
  nameWithType: Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  nameWithType.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  commentId: '!:System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}'
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>
  nameWithType: Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  nameWithType.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TOuter}}
  commentId: '!:System.Collections.Generic.IEnumerable{``0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TOuter>
  nameWithType: Collections.Generic.IEnumerable<TOuter>
  fullName: System.Collections.Generic.IEnumerable<TOuter>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TOuter)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TOuter)
  name.vb: Collections.Generic.IEnumerable(Of TOuter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  commentId: '!:System.Collections.Generic.IEnumerable{``1}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TInner>
  nameWithType: Collections.Generic.IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TInner)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: Collections.Generic.IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TOuter},{TKey}}
  commentId: '!:System.Func{``0,``2}'
  definition: System.Func`2
  name: Func<TOuter, TKey>
  nameWithType: Func<TOuter, TKey>
  fullName: System.Func<TOuter, TKey>
  nameWithType.vb: Func(Of TOuter, TKey)
  fullname.vb: System.Func(Of TOuter, TKey)
  name.vb: Func(Of TOuter, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInner},{TKey}}
  commentId: '!:System.Func{``1,``2}'
  definition: System.Func`2
  name: Func<TInner, TKey>
  nameWithType: Func<TInner, TKey>
  fullName: System.Func<TInner, TKey>
  nameWithType.vb: Func(Of TInner, TKey)
  fullname.vb: System.Func(Of TInner, TKey)
  name.vb: Func(Of TInner, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
  commentId: '!:System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}'
  definition: System.Func`3
  name: Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>
  nameWithType: Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>
  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>
  nameWithType.vb: Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)
  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)
  name.vb: Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TOuter},{TInner},{TResult}}
  commentId: '!:System.Func{``0,``1,``3}'
  definition: System.Func`3
  name: Func<TOuter, TInner, TResult>
  nameWithType: Func<TOuter, TInner, TResult>
  fullName: System.Func<TOuter, TInner, TResult>
  nameWithType.vb: Func(Of TOuter, TInner, TResult)
  fullname.vb: System.Func(Of TOuter, TInner, TResult)
  name.vb: Func(Of TOuter, TInner, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TResult}}
  commentId: '!:System.Func{``0,``1}'
  definition: System.Func`2
  name: Func<TSource, TResult>
  nameWithType: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
  fullname.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable{{TSource}}
  commentId: T:System.Linq.IOrderedEnumerable{``0}
  parent: System.Linq
  definition: System.Linq.IOrderedEnumerable`1
  name: IOrderedEnumerable<TSource>
  nameWithType: IOrderedEnumerable<TSource>
  fullName: System.Linq.IOrderedEnumerable<TSource>
  nameWithType.vb: IOrderedEnumerable(Of TSource)
  fullname.vb: System.Linq.IOrderedEnumerable(Of TSource)
  name.vb: IOrderedEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable`1
  commentId: T:System.Linq.IOrderedEnumerable`1
  parent: System.Linq
  isExternal: false
  name: IOrderedEnumerable<TElement>
  nameWithType: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  nameWithType.vb: IOrderedEnumerable(Of TElement)
  fullname.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  commentId: '!:System.Collections.Generic.IComparer{``1}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  nameWithType: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  nameWithType.vb: Collections.Generic.IComparer(Of TKey)
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: false
  name: Collections.Generic.IComparer<>
  nameWithType: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  nameWithType.vb: Collections.Generic.IComparer(Of )
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    nameWithType: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{{TSource},System.Int32,{TResult}}
  commentId: '!:System.Func{``0,System.Int32,``1}'
  definition: System.Func`3
  name: Func<TSource, Int32, TResult>
  nameWithType: Func<TSource, Int32, TResult>
  fullName: System.Func<TSource, System.Int32, TResult>
  nameWithType.vb: Func(Of TSource, Int32, TResult)
  fullname.vb: System.Func(Of TSource, System.Int32, TResult)
  name.vb: Func(Of TSource, Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: '!:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}'
  definition: System.Func`2
  name: Func<TSource, Collections.Generic.IEnumerable<TResult>>
  nameWithType: Func<TSource, Collections.Generic.IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: '!:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}'
  definition: System.Func`3
  name: Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>
  nameWithType: Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult))
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  commentId: '!:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}'
  definition: System.Func`2
  name: Func<TSource, Collections.Generic.IEnumerable<TCollection>>
  nameWithType: Func<TSource, Collections.Generic.IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  nameWithType.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection))
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  commentId: '!:System.Func{``0,``1,``2}'
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  nameWithType: Func<TSource, TCollection, TResult>
  fullName: System.Func<TSource, TCollection, TResult>
  nameWithType.vb: Func(Of TSource, TCollection, TResult)
  fullname.vb: System.Func(Of TSource, TCollection, TResult)
  name.vb: Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
  commentId: '!:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}'
  definition: System.Func`3
  name: Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>
  nameWithType: Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>
  nameWithType.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection))
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Boolean}
  commentId: '!:System.Func{``0,System.Int32,System.Boolean}'
  definition: System.Func`3
  name: Func<TSource, Int32, Boolean>
  nameWithType: Func<TSource, Int32, Boolean>
  fullName: System.Func<TSource, System.Int32, System.Boolean>
  nameWithType.vb: Func(Of TSource, Int32, Boolean)
  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)
  name.vb: Func(Of TSource, Int32, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSource}[]'
  name: TSource[]
  nameWithType: TSource[]
  fullName: TSource[]
  nameWithType.vb: TSource()
  fullname.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  commentId: '!:System.Collections.Generic.Dictionary{``1,``0}'
  definition: System.Collections.Generic.Dictionary`2
  name: Collections.Generic.Dictionary<TKey, TSource>
  nameWithType: Collections.Generic.Dictionary<TKey, TSource>
  fullName: System.Collections.Generic.Dictionary<TKey, TSource>
  nameWithType.vb: Collections.Generic.Dictionary(Of TKey, TSource)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)
  name.vb: Collections.Generic.Dictionary(Of TKey, TSource)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.Dictionary<, >
  nameWithType: Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Collections.Generic.Dictionary(Of , )
  fullname.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  commentId: '!:System.Collections.Generic.Dictionary{``1,``2}'
  definition: System.Collections.Generic.Dictionary`2
  name: Collections.Generic.Dictionary<TKey, TElement>
  nameWithType: Collections.Generic.Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  nameWithType.vb: Collections.Generic.Dictionary(Of TKey, TElement)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Collections.Generic.Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    nameWithType: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TSource}}
  commentId: '!:System.Collections.Generic.List{``0}'
  definition: System.Collections.Generic.List`1
  name: Collections.Generic.List<TSource>
  nameWithType: Collections.Generic.List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  nameWithType.vb: Collections.Generic.List(Of TSource)
  fullname.vb: System.Collections.Generic.List(Of TSource)
  name.vb: Collections.Generic.List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    nameWithType: Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    nameWithType: Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.List<>
  nameWithType: Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: Collections.Generic.List(Of )
  fullname.vb: System.Collections.Generic.List(Of )
  name.vb: Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    nameWithType: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    nameWithType: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TSource}}
  commentId: '!:System.Linq.ILookup{``1,``0}'
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TSource>
  nameWithType: ILookup<TKey, TSource>
  fullName: System.Linq.ILookup<TKey, TSource>
  nameWithType.vb: ILookup(Of TKey, TSource)
  fullname.vb: System.Linq.ILookup(Of TKey, TSource)
  name.vb: ILookup(Of TKey, TSource)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    nameWithType: ILookup
    fullName: System.Linq.ILookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    nameWithType: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ILookup`2
  commentId: T:System.Linq.ILookup`2
  isExternal: false
  name: ILookup<, >
  nameWithType: ILookup<, >
  fullName: System.Linq.ILookup<, >
  nameWithType.vb: ILookup(Of , )
  fullname.vb: System.Linq.ILookup(Of , )
  name.vb: ILookup(Of , )
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    nameWithType: ILookup
    fullName: System.Linq.ILookup
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    nameWithType: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TElement}}
  commentId: '!:System.Linq.ILookup{``1,``2}'
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  nameWithType: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  nameWithType.vb: ILookup(Of TKey, TElement)
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    nameWithType: ILookup
    fullName: System.Linq.ILookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    nameWithType: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TFirst}}
  commentId: '!:System.Collections.Generic.IEnumerable{``0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TFirst>
  nameWithType: Collections.Generic.IEnumerable<TFirst>
  fullName: System.Collections.Generic.IEnumerable<TFirst>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TFirst)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TFirst)
  name.vb: Collections.Generic.IEnumerable(Of TFirst)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  commentId: '!:System.Collections.Generic.IEnumerable{``1}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSecond>
  nameWithType: Collections.Generic.IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TSecond)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: Collections.Generic.IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TFirst},{TSecond},{TResult}}
  commentId: '!:System.Func{``0,``1,``2}'
  definition: System.Func`3
  name: Func<TFirst, TSecond, TResult>
  nameWithType: Func<TFirst, TSecond, TResult>
  fullName: System.Func<TFirst, TSecond, TResult>
  nameWithType.vb: Func(Of TFirst, TSecond, TResult)
  fullname.vb: System.Func(Of TFirst, TSecond, TResult)
  name.vb: Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
