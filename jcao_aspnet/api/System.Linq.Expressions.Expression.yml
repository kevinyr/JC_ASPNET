items:
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  id: Expression
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.Expression.#ctor
  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.CanReduce
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Constant(System.Object)
  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Default(System.Type)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Empty
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.GetActionType(System.Type[])
  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Label
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Label(System.String)
  - System.Linq.Expressions.Expression.Label(System.Type)
  - System.Linq.Expressions.Expression.Label(System.Type,System.String)
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.New(System.Type)
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NodeType
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Parameter(System.Type)
  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Reduce
  - System.Linq.Expressions.Expression.ReduceAndCheck
  - System.Linq.Expressions.Expression.ReduceExtensions
  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Rethrow
  - System.Linq.Expressions.Expression.Rethrow(System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.SymbolDocument(System.String)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ToString
  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.Type
  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Expression
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 119
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: 'public abstract class Expression : object'
    content.vb: >-
      Public MustInherit Class Expression
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Linq.Expressions.Expression.#ctor
  commentId: M:System.Linq.Expressions.Expression.#ctor
  id: '#ctor'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Expression()
  nameWithType: Expression.Expression()
  fullName: System.Linq.Expressions.Expression.Expression()
  type: Constructor
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 121
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: protected Expression()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Linq.Expressions.Expression.CanReduce
  commentId: P:System.Linq.Expressions.Expression.CanReduce
  id: CanReduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: CanReduce
  nameWithType: Expression.CanReduce
  fullName: System.Linq.Expressions.Expression.CanReduce
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReduce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 122
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual bool CanReduce { get; }
    content.vb: Public Overridable ReadOnly Property CanReduce As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.NodeType
  commentId: P:System.Linq.Expressions.Expression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NodeType
  nameWithType: Expression.NodeType
  fullName: System.Linq.Expressions.Expression.NodeType
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 123
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual ExpressionType NodeType { get; }
    content.vb: Public Overridable ReadOnly Property NodeType As ExpressionType
    parameters: []
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.Type
  commentId: P:System.Linq.Expressions.Expression.Type
  id: Type
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Expression.Type
  fullName: System.Linq.Expressions.Expression.Type
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 124
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual Type Type { get; }
    content.vb: Public Overridable ReadOnly Property Type As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Accept(ExpressionVisitor)
  nameWithType: Expression.Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accept
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 125
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: protected virtual Expression Accept(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function Accept(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Add(Expression, Expression)
  nameWithType: Expression.Add(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 126
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right)
    content.vb: Public Shared Function Add(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Add(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Add(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 127
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Add(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression)
  nameWithType: Expression.AddAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 128
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.AddAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 129
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.AddAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 130
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression)
  nameWithType: Expression.AddAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 131
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.AddAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 132
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.AddAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 133
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddChecked(Expression, Expression)
  nameWithType: Expression.AddChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 134
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddChecked(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.AddChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 135
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: And(Expression, Expression)
  nameWithType: Expression.And(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 136
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right)
    content.vb: Public Shared Function And(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: And(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.And(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 137
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function And(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAlso(Expression, Expression)
  nameWithType: Expression.AndAlso(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 138
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAlso(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.AndAlso(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 139
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression)
  nameWithType: Expression.AndAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 140
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.AndAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 141
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.AndAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 142
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayAccess(Expression, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.ArrayAccess(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 143
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, Collections.Generic.IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, indexes As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.IndexExpression
  nameWithType.vb: Expression.ArrayAccess(Expression, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ArrayAccess(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayAccess(Expression, Expression[])
  nameWithType: Expression.ArrayAccess(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 144
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, ParamArray indexes As Expression()) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: indexes
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.IndexExpression
  nameWithType.vb: Expression.ArrayAccess(Expression, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: ArrayAccess(Expression, Expression())
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.ArrayIndex(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 145
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, Collections.Generic.IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, indexes As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.ArrayIndex(Expression, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ArrayIndex(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Expression)
  nameWithType: Expression.ArrayIndex(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 146
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ArrayIndex(Expression array, Expression index)
    content.vb: Public Shared Function ArrayIndex(array As Expression, index As Expression) As BinaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: index
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Expression[])
  nameWithType: Expression.ArrayIndex(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 147
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, ParamArray indexes As Expression()) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: indexes
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.ArrayIndex(Expression, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: ArrayIndex(Expression, Expression())
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  id: ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayLength(Expression)
  nameWithType: Expression.ArrayLength(Expression)
  fullName: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayLength
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 148
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression ArrayLength(Expression array)
    content.vb: Public Shared Function ArrayLength(array As Expression) As UnaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Assign(Expression, Expression)
  nameWithType: Expression.Assign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 149
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Assign(Expression left, Expression right)
    content.vb: Public Shared Function Assign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Bind(Reflection.MemberInfo, Expression)
  nameWithType: Expression.Bind(Reflection.MemberInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 150
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberAssignment Bind(Reflection.MemberInfo member, Expression expression)
    content.vb: Public Shared Function Bind(member As Reflection.MemberInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MemberAssignment
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Bind(Reflection.MethodInfo, Expression)
  nameWithType: Expression.Bind(Reflection.MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 151
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberAssignment Bind(Reflection.MethodInfo propertyAccessor, Expression expression)
    content.vb: Public Shared Function Bind(propertyAccessor As Reflection.MethodInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MemberAssignment
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Block(Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 152
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Block(Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 153
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(variables As Collections.Generic.IEnumerable(Of ParameterExpression), expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  nameWithType: Expression.Block(Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 154
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(variables As Collections.Generic.IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  name.vb: Block(Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 155
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 156
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 157
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    - id: arg3
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 158
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    - id: arg3
      type: System.Linq.Expressions.Expression
    - id: arg4
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  id: Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression[])
  nameWithType: Expression.Block(Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 159
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(params Expression[] expressions)
    content.vb: Public Shared Function Block(ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression())
  name.vb: Block(Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Block(Type, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 160
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Type, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 161
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, variables As Collections.Generic.IEnumerable(Of ParameterExpression), expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  nameWithType: Expression.Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 162
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, variables As Collections.Generic.IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Expression[])
  nameWithType: Expression.Block(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 163
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  nameWithType.vb: Expression.Block(Type, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression())
  name.vb: Block(Type, Expression())
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  id: Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget)
  nameWithType: Expression.Break(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 164
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target)
    content.vb: Public Shared Function Break(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Expression)
  nameWithType: Expression.Break(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 165
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Expression, Type)
  nameWithType: Expression.Break(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 166
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Type)
  nameWithType: Expression.Break(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 167
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo)
  nameWithType: Expression.Call(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 168
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 169
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Expression, Expression)
  nameWithType: Expression.Call(Expression, Reflection.MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 170
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Expression, Expression, Expression)
  nameWithType: Expression.Call(Expression, Reflection.MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 171
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Expression[])
  nameWithType: Expression.Call(Expression, Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 172
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.Call(Expression, Reflection.MethodInfo, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: Call(Expression, Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, String, Type[], Expression[])
  nameWithType: Expression.Call(Expression, String, Type[], Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 173
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: methodName
      type: System.String
    - id: typeArguments
      type: System.Type[]
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.Call(Expression, String, Type(), Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type(), System.Linq.Expressions.Expression())
  name.vb: Call(Expression, String, Type(), Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Call(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 174
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.Call(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Call(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression)
  nameWithType: Expression.Call(Reflection.MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 175
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression)
  nameWithType: Expression.Call(Reflection.MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 176
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression)
  nameWithType: Expression.Call(Reflection.MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 177
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 178
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    - id: arg3
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 179
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    - id: arg3
      type: System.Linq.Expressions.Expression
    - id: arg4
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression[])
  nameWithType: Expression.Call(Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 180
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.Call(Reflection.MethodInfo, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: Call(Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Type, String, Type[], Expression[])
  nameWithType: Expression.Call(Type, String, Type[], Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 181
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(type As Type, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: type
      type: System.Type
    - id: methodName
      type: System.String
    - id: typeArguments
      type: System.Type[]
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  nameWithType.vb: Expression.Call(Type, String, Type(), Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type(), System.Linq.Expressions.Expression())
  name.vb: Call(Type, String, Type(), Expression())
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(ParameterExpression, Expression)
  nameWithType: Expression.Catch(ParameterExpression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 182
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
    - id: body
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(ParameterExpression, Expression, Expression)
  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 183
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
    - id: body
      type: System.Linq.Expressions.Expression
    - id: filter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(Type, Expression)
  nameWithType: Expression.Catch(Type, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 184
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body)
    content.vb: Public Shared Function Catch(type As Type, body As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(Type, Expression, Expression)
  nameWithType: Expression.Catch(Type, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 185
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(type As Type, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: filter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  commentId: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ClearDebugInfo(SymbolDocumentInfo)
  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)
  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearDebugInfo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 186
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document)
    content.vb: Public Shared Function ClearDebugInfo(document As SymbolDocumentInfo) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
    return:
      type: System.Linq.Expressions.DebugInfoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Coalesce(Expression, Expression)
  nameWithType: Expression.Coalesce(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 187
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Coalesce(Expression, Expression, LambdaExpression)
  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 188
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Condition(Expression, Expression, Expression)
  nameWithType: Expression.Condition(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 189
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
    - id: ifTrue
      type: System.Linq.Expressions.Expression
    - id: ifFalse
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.ConditionalExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Condition(Expression, Expression, Expression, Type)
  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 190
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression, type As Type) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
    - id: ifTrue
      type: System.Linq.Expressions.Expression
    - id: ifFalse
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ConditionalExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Constant(Object)
  nameWithType: Expression.Constant(Object)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 191
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConstantExpression Constant(object value)
    content.vb: Public Shared Function Constant(value As Object) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Linq.Expressions.ConstantExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  id: Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Constant(Object, Type)
  nameWithType: Expression.Constant(Object, Type)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 192
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConstantExpression Constant(object value, Type type)
    content.vb: Public Shared Function Constant(value As Object, type As Type) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ConstantExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  id: Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Continue(LabelTarget)
  nameWithType: Expression.Continue(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Continue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 193
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Continue(LabelTarget target)
    content.vb: Public Shared Function Continue(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Continue(LabelTarget, Type)
  nameWithType: Expression.Continue(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Continue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 194
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Continue(LabelTarget target, Type type)
    content.vb: Public Shared Function Continue(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  id: Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Convert(Expression, Type)
  nameWithType: Expression.Convert(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 195
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Convert(Expression, Type, Reflection.MethodInfo)
  nameWithType: Expression.Convert(Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 196
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ConvertChecked(Expression, Type)
  nameWithType: Expression.ConvertChecked(Expression, Type)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 197
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ConvertChecked(Expression, Type, Reflection.MethodInfo)
  nameWithType: Expression.ConvertChecked(Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 198
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  fullName: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DebugInfo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 199
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)
    content.vb: Public Shared Function DebugInfo(document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
    - id: startLine
      type: System.Int32
    - id: startColumn
      type: System.Int32
    - id: endLine
      type: System.Int32
    - id: endColumn
      type: System.Int32
    return:
      type: System.Linq.Expressions.DebugInfoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  id: Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Decrement(Expression)
  nameWithType: Expression.Decrement(Expression)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 200
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Decrement(Expression expression)
    content.vb: Public Shared Function Decrement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Decrement(Expression, Reflection.MethodInfo)
  nameWithType: Expression.Decrement(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 201
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Decrement(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Decrement(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Default(System.Type)
  id: Default(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Default(Type)
  nameWithType: Expression.Default(Type)
  fullName: System.Linq.Expressions.Expression.Default(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 202
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DefaultExpression Default(Type type)
    content.vb: Public Shared Function Default(type As Type) As DefaultExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.DefaultExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Divide(Expression, Expression)
  nameWithType: Expression.Divide(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 203
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Divide(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Divide(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 204
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression)
  nameWithType: Expression.DivideAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 205
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.DivideAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 206
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.DivideAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 207
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 208
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ElementInit ElementInit(Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function ElementInit(addMethod As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.ElementInit
  nameWithType.vb: Expression.ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ElementInit(Reflection.MethodInfo, Expression[])
  nameWithType: Expression.ElementInit(Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 209
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ElementInit ElementInit(Reflection.MethodInfo addMethod, params Expression[] arguments)
    content.vb: Public Shared Function ElementInit(addMethod As Reflection.MethodInfo, ParamArray arguments As Expression()) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.ElementInit
  nameWithType.vb: Expression.ElementInit(Reflection.MethodInfo, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: ElementInit(Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Empty
  commentId: M:System.Linq.Expressions.Expression.Empty
  id: Empty
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Empty()
  nameWithType: Expression.Empty()
  fullName: System.Linq.Expressions.Expression.Empty()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 210
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DefaultExpression Empty()
    content.vb: Public Shared Function Empty As DefaultExpression
    return:
      type: System.Linq.Expressions.DefaultExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Equal(Expression, Expression)
  nameWithType: Expression.Equal(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 211
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Equal(Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.Equal(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 212
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOr(Expression, Expression)
  nameWithType: Expression.ExclusiveOr(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 213
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOr(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.ExclusiveOr(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 214
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 215
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 216
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 217
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, Reflection.FieldInfo)
  nameWithType: Expression.Field(Expression, Reflection.FieldInfo)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 218
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Field(Expression expression, Reflection.FieldInfo field)
    content.vb: Public Shared Function Field(expression As Expression, field As Reflection.FieldInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: field
      type: System.Reflection.FieldInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  id: Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, String)
  nameWithType: Expression.Field(Expression, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 219
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Field(Expression expression, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: fieldName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, Type, String)
  nameWithType: Expression.Field(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 220
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Field(Expression expression, Type type, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, type As Type, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: fieldName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])
  id: GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetActionType(Type[])
  nameWithType: Expression.GetActionType(Type[])
  fullName: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetActionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 221
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Type GetActionType(params Type[] typeArgs)
    content.vb: Public Shared Function GetActionType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
    return:
      type: System.Type
  nameWithType.vb: Expression.GetActionType(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetActionType(System.Type())
  name.vb: GetActionType(Type())
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  id: GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetDelegateType(Type[])
  nameWithType: Expression.GetDelegateType(Type[])
  fullName: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDelegateType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 222
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Type GetDelegateType(params Type[] typeArgs)
    content.vb: Public Shared Function GetDelegateType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
    return:
      type: System.Type
  nameWithType.vb: Expression.GetDelegateType(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetDelegateType(System.Type())
  name.vb: GetDelegateType(Type())
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  id: GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetFuncType(Type[])
  nameWithType: Expression.GetFuncType(Type[])
  fullName: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFuncType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 223
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Type GetFuncType(params Type[] typeArgs)
    content.vb: Public Shared Function GetFuncType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
    return:
      type: System.Type
  nameWithType.vb: Expression.GetFuncType(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetFuncType(System.Type())
  name.vb: GetFuncType(Type())
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  id: Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget)
  nameWithType: Expression.Goto(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 224
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target)
    content.vb: Public Shared Function Goto(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Expression)
  nameWithType: Expression.Goto(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 225
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Expression, Type)
  nameWithType: Expression.Goto(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 226
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Type)
  nameWithType: Expression.Goto(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 227
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThan(Expression, Expression)
  nameWithType: Expression.GreaterThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 228
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 229
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Expression, Expression)
  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 230
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 231
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IfThen(Expression, Expression)
  nameWithType: Expression.IfThen(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IfThen
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 232
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression IfThen(Expression test, Expression ifTrue)
    content.vb: Public Shared Function IfThen(test As Expression, ifTrue As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
    - id: ifTrue
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.ConditionalExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IfThenElse(Expression, Expression, Expression)
  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IfThenElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 233
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function IfThenElse(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
    - id: ifTrue
      type: System.Linq.Expressions.Expression
    - id: ifFalse
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.ConditionalExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  id: Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Increment(Expression)
  nameWithType: Expression.Increment(Expression)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 234
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Increment(Expression expression)
    content.vb: Public Shared Function Increment(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Increment(Expression, Reflection.MethodInfo)
  nameWithType: Expression.Increment(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 235
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Increment(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Increment(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Invoke(Expression, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Invoke(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 236
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, arguments As Collections.Generic.IEnumerable(Of Expression)) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.InvocationExpression
  nameWithType.vb: Expression.Invoke(Expression, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Invoke(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Invoke(Expression, Expression[])
  nameWithType: Expression.Invoke(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 237
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, params Expression[] arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, ParamArray arguments As Expression()) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.InvocationExpression
  nameWithType.vb: Expression.Invoke(Expression, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: Invoke(Expression, Expression())
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  id: IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsFalse(Expression)
  nameWithType: Expression.IsFalse(Expression)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 238
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression)
    content.vb: Public Shared Function IsFalse(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsFalse(Expression, Reflection.MethodInfo)
  nameWithType: Expression.IsFalse(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 239
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function IsFalse(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  id: IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsTrue(Expression)
  nameWithType: Expression.IsTrue(Expression)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 240
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression)
    content.vb: Public Shared Function IsTrue(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsTrue(Expression, Reflection.MethodInfo)
  nameWithType: Expression.IsTrue(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 241
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function IsTrue(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label
  commentId: M:System.Linq.Expressions.Expression.Label
  id: Label
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label()
  nameWithType: Expression.Label()
  fullName: System.Linq.Expressions.Expression.Label()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 242
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label()
    content.vb: Public Shared Function Label As LabelTarget
    return:
      type: System.Linq.Expressions.LabelTarget
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  id: Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(LabelTarget)
  nameWithType: Expression.Label(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 243
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelExpression Label(LabelTarget target)
    content.vb: Public Shared Function Label(target As LabelTarget) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.LabelExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(LabelTarget, Expression)
  nameWithType: Expression.Label(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 244
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelExpression Label(LabelTarget target, Expression defaultValue)
    content.vb: Public Shared Function Label(target As LabelTarget, defaultValue As Expression) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: defaultValue
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.LabelExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.String)
  id: Label(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(String)
  nameWithType: Expression.Label(String)
  fullName: System.Linq.Expressions.Expression.Label(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 245
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label(string name)
    content.vb: Public Shared Function Label(name As String) As LabelTarget
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.LabelTarget
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type)
  id: Label(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(Type)
  nameWithType: Expression.Label(Type)
  fullName: System.Linq.Expressions.Expression.Label(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 246
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label(Type type)
    content.vb: Public Shared Function Label(type As Type) As LabelTarget
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.LabelTarget
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)
  id: Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(Type, String)
  nameWithType: Expression.Label(Type, String)
  fullName: System.Linq.Expressions.Expression.Label(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 247
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label(Type type, string name)
    content.vb: Public Shared Function Label(type As Type, name As String) As LabelTarget
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.LabelTarget
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 248
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 249
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Expression, Boolean, ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 250
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, ParameterExpression[])
  nameWithType: Expression.Lambda(Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 251
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Expression, ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 252
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 253
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 254
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 255
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Type, Expression, Boolean, ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Type, Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 256
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Type, Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, ParameterExpression[])
  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 257
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Type, Expression, ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Type, Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 258
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 259
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  nameWithType.vb: Expression.Lambda(Type, Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 260
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 261
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 262
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, ParameterExpression[])
  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 263
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Of TDelegate)(Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 264
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 265
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShift(Expression, Expression)
  nameWithType: Expression.LeftShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 266
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShift(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.LeftShift(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 267
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 268
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 269
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 270
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThan(Expression, Expression)
  nameWithType: Expression.LessThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 271
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.LessThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 272
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Expression, Expression)
  nameWithType: Expression.LessThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 273
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 274
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 275
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(member As Reflection.MemberInfo, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
    return:
      type: System.Linq.Expressions.MemberListBinding
  nameWithType.vb: Expression.ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of ElementInit))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MemberInfo, ElementInit[])
  nameWithType: Expression.ListBind(Reflection.MemberInfo, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 276
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MemberInfo member, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(member As Reflection.MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
    return:
      type: System.Linq.Expressions.MemberListBinding
  nameWithType.vb: Expression.ListBind(Reflection.MemberInfo, ElementInit())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit())
  name.vb: ListBind(Reflection.MemberInfo, ElementInit())
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 277
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As Reflection.MethodInfo, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
    return:
      type: System.Linq.Expressions.MemberListBinding
  nameWithType.vb: Expression.ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of ElementInit))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MethodInfo, ElementInit[])
  nameWithType: Expression.ListBind(Reflection.MethodInfo, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 278
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As Reflection.MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
    return:
      type: System.Linq.Expressions.MemberListBinding
  nameWithType.vb: Expression.ListBind(Reflection.MethodInfo, ElementInit())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit())
  name.vb: ListBind(Reflection.MethodInfo, ElementInit())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Collections.Generic.IEnumerable<ElementInit>)
  nameWithType: Expression.ListInit(NewExpression, Collections.Generic.IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 279
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
    return:
      type: System.Linq.Expressions.ListInitExpression
  nameWithType.vb: Expression.ListInit(NewExpression, Collections.Generic.IEnumerable(Of ElementInit))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListInit(NewExpression, Collections.Generic.IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 280
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As Collections.Generic.IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.ListInitExpression
  nameWithType.vb: Expression.ListInit(NewExpression, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ListInit(NewExpression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, ElementInit[])
  nameWithType: Expression.ListInit(NewExpression, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 281
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As ElementInit()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
    return:
      type: System.Linq.Expressions.ListInitExpression
  nameWithType.vb: Expression.ListInit(NewExpression, ElementInit())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit())
  name.vb: ListInit(NewExpression, ElementInit())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Expression[])
  nameWithType: Expression.ListInit(NewExpression, Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 282
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: initializers
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.ListInitExpression
  nameWithType.vb: Expression.ListInit(NewExpression, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression())
  name.vb: ListInit(NewExpression, Expression())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 283
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As Reflection.MethodInfo, initializers As Collections.Generic.IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.ListInitExpression
  nameWithType.vb: Expression.ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Reflection.MethodInfo, Expression[])
  nameWithType: Expression.ListInit(NewExpression, Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 284
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As Reflection.MethodInfo, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.ListInitExpression
  nameWithType.vb: Expression.ListInit(NewExpression, Reflection.MethodInfo, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: ListInit(NewExpression, Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  id: Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression)
  nameWithType: Expression.Loop(Expression)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 285
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LoopExpression Loop(Expression body)
    content.vb: Public Shared Function Loop(body As Expression) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.LoopExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression, LabelTarget)
  nameWithType: Expression.Loop(Expression, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 286
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: break
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.LoopExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression, LabelTarget, LabelTarget)
  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 287
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break, LabelTarget continue)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: break
      type: System.Linq.Expressions.LabelTarget
    - id: continue
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.LoopExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 288
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 289
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 290
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeCatchBlock
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 291
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function MakeCatchBlock(type As Type, variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
    - id: body
      type: System.Linq.Expressions.Expression
    - id: filter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGoto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 292
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function MakeGoto(kind As GotoExpressionKind, target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: kind
      type: System.Linq.Expressions.GotoExpressionKind
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 293
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression MakeIndex(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function MakeIndex(instance As Expression, indexer As Reflection.PropertyInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: indexer
      type: System.Reflection.PropertyInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.IndexExpression
  nameWithType.vb: Expression.MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeMemberAccess(Expression, Reflection.MemberInfo)
  nameWithType: Expression.MakeMemberAccess(Expression, Reflection.MemberInfo)
  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeMemberAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 294
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression MakeMemberAccess(Expression expression, Reflection.MemberInfo member)
    content.vb: Public Shared Function MakeMemberAccess(expression As Expression, member As Reflection.MemberInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: member
      type: System.Reflection.MemberInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  commentId: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable<CatchBlock>)
  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable<CatchBlock>)
  fullName: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeTry
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 295
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression MakeTry(Type type, Expression body, Expression finally, Expression fault, Collections.Generic.IEnumerable<CatchBlock> handlers)
    content.vb: Public Shared Function MakeTry(type As Type, body As Expression, finally As Expression, fault As Expression, handlers As Collections.Generic.IEnumerable(Of CatchBlock)) As TryExpression
    parameters:
    - id: type
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: finally
      type: System.Linq.Expressions.Expression
    - id: fault
      type: System.Linq.Expressions.Expression
    - id: handlers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
    return:
      type: System.Linq.Expressions.TryExpression
  nameWithType.vb: Expression.MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable(Of CatchBlock))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock))
  name.vb: MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable(Of CatchBlock))
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeUnary(ExpressionType, Expression, Type)
  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeUnary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 296
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
    - id: operand
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeUnary(ExpressionType, Expression, Type, Reflection.MethodInfo)
  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeUnary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 297
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
    - id: operand
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 298
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(member As Reflection.MemberInfo, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  nameWithType.vb: Expression.MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of MemberBinding))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MemberInfo, MemberBinding[])
  nameWithType: Expression.MemberBind(Reflection.MemberInfo, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 299
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(member As Reflection.MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  nameWithType.vb: Expression.MemberBind(Reflection.MemberInfo, MemberBinding())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding())
  name.vb: MemberBind(Reflection.MemberInfo, MemberBinding())
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 300
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As Reflection.MethodInfo, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  nameWithType.vb: Expression.MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of MemberBinding))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MethodInfo, MemberBinding[])
  nameWithType: Expression.MemberBind(Reflection.MethodInfo, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 301
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As Reflection.MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  nameWithType.vb: Expression.MemberBind(Reflection.MethodInfo, MemberBinding())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding())
  name.vb: MemberBind(Reflection.MethodInfo, MemberBinding())
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberInit(NewExpression, Collections.Generic.IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberInit(NewExpression, Collections.Generic.IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 302
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
    return:
      type: System.Linq.Expressions.MemberInitExpression
  nameWithType.vb: Expression.MemberInit(NewExpression, Collections.Generic.IEnumerable(Of MemberBinding))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberInit(NewExpression, Collections.Generic.IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberInit(NewExpression, MemberBinding[])
  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 303
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, ParamArray bindings As MemberBinding()) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
    return:
      type: System.Linq.Expressions.MemberInitExpression
  nameWithType.vb: Expression.MemberInit(NewExpression, MemberBinding())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding())
  name.vb: MemberInit(NewExpression, MemberBinding())
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Modulo(Expression, Expression)
  nameWithType: Expression.Modulo(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 304
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Modulo(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Modulo(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 305
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression)
  nameWithType: Expression.ModuloAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 306
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.ModuloAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 307
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.ModuloAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 308
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Multiply(Expression, Expression)
  nameWithType: Expression.Multiply(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 309
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Multiply(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Multiply(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 310
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression)
  nameWithType: Expression.MultiplyAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 311
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.MultiplyAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 312
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.MultiplyAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 313
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 314
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 315
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 316
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyChecked(Expression, Expression)
  nameWithType: Expression.MultiplyChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 317
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyChecked(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.MultiplyChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 318
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  id: Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Negate(Expression)
  nameWithType: Expression.Negate(Expression)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 319
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Negate(Expression expression)
    content.vb: Public Shared Function Negate(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Negate(Expression, Reflection.MethodInfo)
  nameWithType: Expression.Negate(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 320
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Negate(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Negate(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  id: NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NegateChecked(Expression)
  nameWithType: Expression.NegateChecked(Expression)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 321
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression)
    content.vb: Public Shared Function NegateChecked(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NegateChecked(Expression, Reflection.MethodInfo)
  nameWithType: Expression.NegateChecked(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 322
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function NegateChecked(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  id: New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo)
  nameWithType: Expression.New(Reflection.ConstructorInfo)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 323
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 324
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.NewExpression
  nameWithType.vb: Expression.New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Collections.Generic.IEnumerable<Reflection.MemberInfo>)
  nameWithType: Expression.New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Collections.Generic.IEnumerable<Reflection.MemberInfo>)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 325
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, Collections.Generic.IEnumerable<Reflection.MemberInfo> members)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression), members As Collections.Generic.IEnumerable(Of Reflection.MemberInfo)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    - id: members
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
    return:
      type: System.Linq.Expressions.NewExpression
  nameWithType.vb: Expression.New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Collections.Generic.IEnumerable(Of Reflection.MemberInfo))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo))
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Collections.Generic.IEnumerable(Of Reflection.MemberInfo))
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Reflection.MemberInfo[])
  nameWithType: Expression.New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Reflection.MemberInfo[])
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 326
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, params Reflection.MemberInfo[] members)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression), ParamArray members As Reflection.MemberInfo()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    - id: members
      type: System.Reflection.MemberInfo[]
    return:
      type: System.Linq.Expressions.NewExpression
  nameWithType.vb: Expression.New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Reflection.MemberInfo())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Reflection.MemberInfo())
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Reflection.MemberInfo())
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Expression[])
  nameWithType: Expression.New(Reflection.ConstructorInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 327
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, params Expression[] arguments)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, ParamArray arguments As Expression()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.NewExpression
  nameWithType.vb: Expression.New(Reflection.ConstructorInfo, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression())
  name.vb: New(Reflection.ConstructorInfo, Expression())
- uid: System.Linq.Expressions.Expression.New(System.Type)
  commentId: M:System.Linq.Expressions.Expression.New(System.Type)
  id: New(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Type)
  nameWithType: Expression.New(Type)
  fullName: System.Linq.Expressions.Expression.New(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 328
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Type type)
    content.vb: Public Shared Function New(type As Type) As NewExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayBounds(Type, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.NewArrayBounds(Type, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 329
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, Collections.Generic.IEnumerable<Expression> bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, bounds As Collections.Generic.IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: bounds
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.NewArrayExpression
  nameWithType.vb: Expression.NewArrayBounds(Type, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: NewArrayBounds(Type, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayBounds(Type, Expression[])
  nameWithType: Expression.NewArrayBounds(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 330
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, ParamArray bounds As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: bounds
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.NewArrayExpression
  nameWithType.vb: Expression.NewArrayBounds(Type, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression())
  name.vb: NewArrayBounds(Type, Expression())
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayInit(Type, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.NewArrayInit(Type, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 331
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, initializers As Collections.Generic.IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.NewArrayExpression
  nameWithType.vb: Expression.NewArrayInit(Type, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: NewArrayInit(Type, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayInit(Type, Expression[])
  nameWithType: Expression.NewArrayInit(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 332
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, ParamArray initializers As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: initializers
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.NewArrayExpression
  nameWithType.vb: Expression.NewArrayInit(Type, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression())
  name.vb: NewArrayInit(Type, Expression())
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  id: Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Not(Expression)
  nameWithType: Expression.Not(Expression)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 333
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Not(Expression expression)
    content.vb: Public Shared Function Not(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Not(Expression, Reflection.MethodInfo)
  nameWithType: Expression.Not(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 334
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Not(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Not(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NotEqual(Expression, Expression)
  nameWithType: Expression.NotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 335
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NotEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 336
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  id: OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OnesComplement(Expression)
  nameWithType: Expression.OnesComplement(Expression)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 337
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression)
    content.vb: Public Shared Function OnesComplement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OnesComplement(Expression, Reflection.MethodInfo)
  nameWithType: Expression.OnesComplement(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 338
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function OnesComplement(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Or(Expression, Expression)
  nameWithType: Expression.Or(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 339
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right)
    content.vb: Public Shared Function Or(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Or(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Or(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 340
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Or(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression)
  nameWithType: Expression.OrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 341
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.OrAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 342
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.OrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 343
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrElse(Expression, Expression)
  nameWithType: Expression.OrElse(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 344
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrElse(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.OrElse(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 345
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type)
  id: Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Parameter(Type)
  nameWithType: Expression.Parameter(Type)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 346
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Parameter(Type type)
    content.vb: Public Shared Function Parameter(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  id: Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Parameter(Type, String)
  nameWithType: Expression.Parameter(Type, String)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 347
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Parameter(Type type, string name)
    content.vb: Public Shared Function Parameter(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  id: PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostDecrementAssign(Expression)
  nameWithType: Expression.PostDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 348
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostDecrementAssign(Expression, Reflection.MethodInfo)
  nameWithType: Expression.PostDecrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 349
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  id: PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostIncrementAssign(Expression)
  nameWithType: Expression.PostIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 350
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostIncrementAssign(Expression, Reflection.MethodInfo)
  nameWithType: Expression.PostIncrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 351
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Power(Expression, Expression)
  nameWithType: Expression.Power(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 352
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right)
    content.vb: Public Shared Function Power(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Power(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Power(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 353
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Power(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression)
  nameWithType: Expression.PowerAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 354
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.PowerAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 355
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.PowerAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 356
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  id: PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreDecrementAssign(Expression)
  nameWithType: Expression.PreDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 357
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreDecrementAssign(Expression, Reflection.MethodInfo)
  nameWithType: Expression.PreDecrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 358
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  id: PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreIncrementAssign(Expression)
  nameWithType: Expression.PreIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 359
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreIncrementAssign(Expression, Reflection.MethodInfo)
  nameWithType: Expression.PreIncrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 360
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.MethodInfo)
  nameWithType: Expression.Property(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 361
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, Reflection.MethodInfo propertyAccessor)
    content.vb: Public Shared Function Property(expression As Expression, propertyAccessor As Reflection.MethodInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.PropertyInfo)
  nameWithType: Expression.Property(Expression, Reflection.PropertyInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 362
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, Reflection.PropertyInfo property)
    content.vb: Public Shared Function Property(expression As Expression, property As Reflection.PropertyInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: property
      type: System.Reflection.PropertyInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 363
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As Reflection.PropertyInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: indexer
      type: System.Reflection.PropertyInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.IndexExpression
  nameWithType.vb: Expression.Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.PropertyInfo, Expression[])
  nameWithType: Expression.Property(Expression, Reflection.PropertyInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 364
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As Reflection.PropertyInfo, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: indexer
      type: System.Reflection.PropertyInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.IndexExpression
  nameWithType.vb: Expression.Property(Expression, Reflection.PropertyInfo, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression())
  name.vb: Property(Expression, Reflection.PropertyInfo, Expression())
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  id: Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, String)
  nameWithType: Expression.Property(Expression, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 365
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: propertyName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, String, Expression[])
  nameWithType: Expression.Property(Expression, String, Expression[])
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 366
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: propertyName
      type: System.String
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.IndexExpression
  nameWithType.vb: Expression.Property(Expression, String, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression())
  name.vb: Property(Expression, String, Expression())
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Type, String)
  nameWithType: Expression.Property(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 367
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, Type type, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, type As Type, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: propertyName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PropertyOrField(Expression, String)
  nameWithType: Expression.PropertyOrField(Expression, String)
  fullName: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyOrField
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 368
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName)
    content.vb: Public Shared Function PropertyOrField(expression As Expression, propertyOrFieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: propertyOrFieldName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  id: Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Quote(Expression)
  nameWithType: Expression.Quote(Expression)
  fullName: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Quote
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 369
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Quote(Expression expression)
    content.vb: Public Shared Function Quote(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Reduce
  commentId: M:System.Linq.Expressions.Expression.Reduce
  id: Reduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Reduce()
  nameWithType: Expression.Reduce()
  fullName: System.Linq.Expressions.Expression.Reduce()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reduce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 370
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual Expression Reduce()
    content.vb: Public Overridable Function Reduce As Expression
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  commentId: M:System.Linq.Expressions.Expression.ReduceAndCheck
  id: ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReduceAndCheck()
  nameWithType: Expression.ReduceAndCheck()
  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReduceAndCheck
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 371
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public Expression ReduceAndCheck()
    content.vb: Public Function ReduceAndCheck As Expression
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  commentId: M:System.Linq.Expressions.Expression.ReduceExtensions
  id: ReduceExtensions
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReduceExtensions()
  nameWithType: Expression.ReduceExtensions()
  fullName: System.Linq.Expressions.Expression.ReduceExtensions()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReduceExtensions
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 372
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public Expression ReduceExtensions()
    content.vb: Public Function ReduceExtensions As Expression
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReferenceEqual(Expression, Expression)
  nameWithType: Expression.ReferenceEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReferenceEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 373
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ReferenceEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReferenceNotEqual(Expression, Expression)
  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReferenceNotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 374
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ReferenceNotEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceNotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Rethrow
  commentId: M:System.Linq.Expressions.Expression.Rethrow
  id: Rethrow
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Rethrow()
  nameWithType: Expression.Rethrow()
  fullName: System.Linq.Expressions.Expression.Rethrow()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rethrow
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 375
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Rethrow()
    content.vb: Public Shared Function Rethrow As UnaryExpression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Rethrow(System.Type)
  id: Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Rethrow(Type)
  nameWithType: Expression.Rethrow(Type)
  fullName: System.Linq.Expressions.Expression.Rethrow(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rethrow
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 376
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Rethrow(Type type)
    content.vb: Public Shared Function Rethrow(type As Type) As UnaryExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  id: Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget)
  nameWithType: Expression.Return(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 377
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target)
    content.vb: Public Shared Function Return(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Expression)
  nameWithType: Expression.Return(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 378
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Expression, Type)
  nameWithType: Expression.Return(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 379
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Type)
  nameWithType: Expression.Return(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 380
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShift(Expression, Expression)
  nameWithType: Expression.RightShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 381
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShift(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.RightShift(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 382
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression)
  nameWithType: Expression.RightShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 383
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.RightShiftAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 384
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.RightShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 385
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression>)
  nameWithType: Expression.RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 386
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression> variables)
    content.vb: Public Shared Function RuntimeVariables(variables As Collections.Generic.IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
  nameWithType.vb: Expression.RuntimeVariables(Collections.Generic.IEnumerable(Of ParameterExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: RuntimeVariables(Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RuntimeVariables(ParameterExpression[])
  nameWithType: Expression.RuntimeVariables(ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 387
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables)
    content.vb: Public Shared Function RuntimeVariables(ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
  nameWithType.vb: Expression.RuntimeVariables(ParameterExpression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression())
  name.vb: RuntimeVariables(ParameterExpression())
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Subtract(Expression, Expression)
  nameWithType: Expression.Subtract(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 388
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Subtract(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.Subtract(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 389
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression)
  nameWithType: Expression.SubtractAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 390
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.SubtractAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 391
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.SubtractAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 392
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 393
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 394
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 395
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractChecked(Expression, Expression)
  nameWithType: Expression.SubtractChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 396
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractChecked(Expression, Expression, Reflection.MethodInfo)
  nameWithType: Expression.SubtractChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 397
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, SwitchCase[])
  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 398
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
    return:
      type: System.Linq.Expressions.SwitchExpression
  nameWithType.vb: Expression.Switch(Expression, Expression, SwitchCase())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, Expression, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 399
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, cases As Collections.Generic.IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
    return:
      type: System.Linq.Expressions.SwitchExpression
  nameWithType.vb: Expression.Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  name.vb: Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  nameWithType: Expression.Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 400
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
    return:
      type: System.Linq.Expressions.SwitchExpression
  nameWithType.vb: Expression.Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, SwitchCase[])
  nameWithType: Expression.Switch(Expression, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 401
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
    return:
      type: System.Linq.Expressions.SwitchExpression
  nameWithType.vb: Expression.Switch(Expression, SwitchCase())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 402
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, cases As Collections.Generic.IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
    return:
      type: System.Linq.Expressions.SwitchExpression
  nameWithType.vb: Expression.Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  name.vb: Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  nameWithType: Expression.Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 403
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
    return:
      type: System.Linq.Expressions.SwitchExpression
  nameWithType.vb: Expression.Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase())
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SwitchCase(Expression, Collections.Generic.IEnumerable<Expression>)
  nameWithType: Expression.SwitchCase(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 404
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, Collections.Generic.IEnumerable<Expression> testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, testValues As Collections.Generic.IEnumerable(Of Expression)) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.SwitchCase
  nameWithType.vb: Expression.SwitchCase(Expression, Collections.Generic.IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: SwitchCase(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SwitchCase(Expression, Expression[])
  nameWithType: Expression.SwitchCase(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 405
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, params Expression[] testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, ParamArray testValues As Expression()) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: testValues
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.SwitchCase
  nameWithType.vb: Expression.SwitchCase(Expression, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: SwitchCase(Expression, Expression())
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)
  id: SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String)
  nameWithType: Expression.SymbolDocument(String)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 406
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName)
    content.vb: Public Shared Function SymbolDocument(fileName As String) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  id: SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 407
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    - id: language
      type: System.Guid
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 408
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    - id: language
      type: System.Guid
    - id: languageVendor
      type: System.Guid
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid, Guid, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 409
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    - id: language
      type: System.Guid
    - id: languageVendor
      type: System.Guid
    - id: documentType
      type: System.Guid
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  id: Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Throw(Expression)
  nameWithType: Expression.Throw(Expression)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 410
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Throw(Expression value)
    content.vb: Public Shared Function Throw(value As Expression) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  id: Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Throw(Expression, Type)
  nameWithType: Expression.Throw(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 411
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Throw(Expression value, Type type)
    content.vb: Public Shared Function Throw(value As Expression, type As Type) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ToString
  commentId: M:System.Linq.Expressions.Expression.ToString
  id: ToString
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Expression.ToString()
  fullName: System.Linq.Expressions.Expression.ToString()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 412
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryCatch(Expression, CatchBlock[])
  nameWithType: Expression.TryCatch(Expression, CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCatch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 413
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatch(body As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
    return:
      type: System.Linq.Expressions.TryExpression
  nameWithType.vb: Expression.TryCatch(Expression, CatchBlock())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  name.vb: TryCatch(Expression, CatchBlock())
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryCatchFinally(Expression, Expression, CatchBlock[])
  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCatchFinally
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 414
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryCatchFinally(Expression body, Expression finally, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatchFinally(body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: finally
      type: System.Linq.Expressions.Expression
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
    return:
      type: System.Linq.Expressions.TryExpression
  nameWithType.vb: Expression.TryCatchFinally(Expression, Expression, CatchBlock())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  name.vb: TryCatchFinally(Expression, Expression, CatchBlock())
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryFault(Expression, Expression)
  nameWithType: Expression.TryFault(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryFault
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 415
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryFault(Expression body, Expression fault)
    content.vb: Public Shared Function TryFault(body As Expression, fault As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: fault
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.TryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryFinally(Expression, Expression)
  nameWithType: Expression.TryFinally(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryFinally
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 416
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryFinally(Expression body, Expression finally)
    content.vb: Public Shared Function TryFinally(body As Expression, finally As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: finally
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.TryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  id: TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryGetActionType(Type[], out Type)
  nameWithType: Expression.TryGetActionType(Type[], out Type)
  fullName: System.Linq.Expressions.Expression.TryGetActionType(System.Type[], out System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetActionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 417
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static bool TryGetActionType(Type[] typeArgs, out Type actionType)
    content.vb: Public Shared Function TryGetActionType(typeArgs As Type(), ByRef actionType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
    - id: actionType
      type: System.Type
    return:
      type: System.Boolean
  nameWithType.vb: Expression.TryGetActionType(Type(), ByRef Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryGetActionType(System.Type(), ByRef System.Type)
  name.vb: TryGetActionType(Type(), ByRef Type)
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  id: TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryGetFuncType(Type[], out Type)
  nameWithType: Expression.TryGetFuncType(Type[], out Type)
  fullName: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], out System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetFuncType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 418
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static bool TryGetFuncType(Type[] typeArgs, out Type funcType)
    content.vb: Public Shared Function TryGetFuncType(typeArgs As Type(), ByRef funcType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
    - id: funcType
      type: System.Type
    return:
      type: System.Boolean
  nameWithType.vb: Expression.TryGetFuncType(Type(), ByRef Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryGetFuncType(System.Type(), ByRef System.Type)
  name.vb: TryGetFuncType(Type(), ByRef Type)
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  id: TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeAs(Expression, Type)
  nameWithType: Expression.TypeAs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeAs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 419
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression TypeAs(Expression expression, Type type)
    content.vb: Public Shared Function TypeAs(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeEqual(Expression, Type)
  nameWithType: Expression.TypeEqual(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 420
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TypeBinaryExpression TypeEqual(Expression expression, Type type)
    content.vb: Public Shared Function TypeEqual(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  id: TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeIs(Expression, Type)
  nameWithType: Expression.TypeIs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeIs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 421
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TypeBinaryExpression TypeIs(Expression expression, Type type)
    content.vb: Public Shared Function TypeIs(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  id: UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: UnaryPlus(Expression)
  nameWithType: Expression.UnaryPlus(Expression)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 422
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression)
    content.vb: Public Shared Function UnaryPlus(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: UnaryPlus(Expression, Reflection.MethodInfo)
  nameWithType: Expression.UnaryPlus(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 423
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function UnaryPlus(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  id: Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Unbox(Expression, Type)
  nameWithType: Expression.Unbox(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unbox
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 424
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Unbox(Expression expression, Type type)
    content.vb: Public Shared Function Unbox(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type)
  id: Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Variable(Type)
  nameWithType: Expression.Variable(Type)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 425
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Variable(Type type)
    content.vb: Public Shared Function Variable(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  id: Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Variable(Type, String)
  nameWithType: Expression.Variable(Type, String)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 426
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Variable(Type type, string name)
    content.vb: Public Shared Function Variable(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: VisitChildren(ExpressionVisitor)
  nameWithType: Expression.VisitChildren(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VisitChildren
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 427
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: protected virtual Expression VisitChildren(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function VisitChildren(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ExpressionType
  commentId: T:System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions.ExpressionType
  nameWithType: System.Linq.Expressions.ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.ExpressionVisitor
  commentId: T:System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expressions.Expression
  nameWithType: Expressions.Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.BinaryExpression
  commentId: T:System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Expression>
  nameWithType: Collections.Generic.IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Expression)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: Collections.Generic.IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.IndexExpression
  commentId: T:System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression[]
  name: Expression[]
  nameWithType: Expression[]
  fullName: System.Linq.Expressions.Expression[]
  nameWithType.vb: Expression()
  fullname.vb: System.Linq.Expressions.Expression()
  name.vb: Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.MethodCallExpression
  commentId: T:System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.UnaryExpression
  commentId: T:System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.MemberAssignment
  commentId: T:System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberAssignment
  nameWithType: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Linq.Expressions.BlockExpression
  commentId: T:System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<ParameterExpression>
  nameWithType: Collections.Generic.IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  nameWithType.vb: Collections.Generic.IEnumerable(Of ParameterExpression)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  name.vb: Collections.Generic.IEnumerable(Of ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.LabelTarget
  commentId: T:System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.GotoExpression
  commentId: T:System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.CatchBlock
  commentId: T:System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.SymbolDocumentInfo
  commentId: T:System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Linq.Expressions.DebugInfoExpression
  commentId: T:System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DebugInfoExpression
  nameWithType: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.ConditionalExpression
  commentId: T:System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.ConstantExpression
  commentId: T:System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.DefaultExpression
  commentId: T:System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DefaultExpression
  nameWithType: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.ElementInit
  commentId: T:System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Linq.Expressions.MemberExpression
  commentId: T:System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.InvocationExpression
  commentId: T:System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: InvocationExpression
  nameWithType: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.LabelExpression
  commentId: T:System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelExpression
  nameWithType: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.ParameterExpression[]
  name: ParameterExpression[]
  nameWithType: ParameterExpression[]
  fullName: System.Linq.Expressions.ParameterExpression[]
  nameWithType.vb: ParameterExpression()
  fullname.vb: System.Linq.Expressions.ParameterExpression()
  name.vb: ParameterExpression()
  spec.csharp:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression{{TDelegate}}
  commentId: T:System.Linq.Expressions.Expression{``0}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expressions.Expression<>
  nameWithType: Expressions.Expression<>
  fullName: System.Linq.Expressions.Expression<>
  nameWithType.vb: Expressions.Expression(Of )
  fullname.vb: System.Linq.Expressions.Expression(Of )
  name.vb: Expressions.Expression(Of )
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    nameWithType: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    nameWithType: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<ElementInit>
  nameWithType: Collections.Generic.IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
  nameWithType.vb: Collections.Generic.IEnumerable(Of ElementInit)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit)
  name.vb: Collections.Generic.IEnumerable(Of ElementInit)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.MemberListBinding
  commentId: T:System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ElementInit[]
  name: ElementInit[]
  nameWithType: ElementInit[]
  fullName: System.Linq.Expressions.ElementInit[]
  nameWithType.vb: ElementInit()
  fullname.vb: System.Linq.Expressions.ElementInit()
  name.vb: ElementInit()
  spec.csharp:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.NewExpression
  commentId: T:System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ListInitExpression
  commentId: T:System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.LoopExpression
  commentId: T:System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  nameWithType: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.GotoExpressionKind
  commentId: T:System.Linq.Expressions.GotoExpressionKind
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpressionKind
  nameWithType: GotoExpressionKind
  fullName: System.Linq.Expressions.GotoExpressionKind
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CatchBlock>
  nameWithType: Collections.Generic.IEnumerable<CatchBlock>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>
  nameWithType.vb: Collections.Generic.IEnumerable(Of CatchBlock)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock)
  name.vb: Collections.Generic.IEnumerable(Of CatchBlock)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.TryExpression
  commentId: T:System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MemberBinding>
  nameWithType: Collections.Generic.IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
  nameWithType.vb: Collections.Generic.IEnumerable(Of MemberBinding)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding)
  name.vb: Collections.Generic.IEnumerable(Of MemberBinding)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.MemberMemberBinding
  commentId: T:System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.MemberBinding[]
  name: MemberBinding[]
  nameWithType: MemberBinding[]
  fullName: System.Linq.Expressions.MemberBinding[]
  nameWithType.vb: MemberBinding()
  fullname.vb: System.Linq.Expressions.MemberBinding()
  name.vb: MemberBinding()
  spec.csharp:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.MemberInitExpression
  commentId: T:System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberInitExpression
  nameWithType: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MemberInfo>
  nameWithType: Collections.Generic.IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of MemberInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  name.vb: Collections.Generic.IEnumerable(Of MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo[]
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  nameWithType.vb: MemberInfo()
  fullname.vb: System.Reflection.MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.NewArrayExpression
  commentId: T:System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  commentId: T:System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: RuntimeVariablesExpression
  nameWithType: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.SwitchCase[]
  name: SwitchCase[]
  nameWithType: SwitchCase[]
  fullName: System.Linq.Expressions.SwitchCase[]
  nameWithType.vb: SwitchCase()
  fullname.vb: System.Linq.Expressions.SwitchCase()
  name.vb: SwitchCase()
  spec.csharp:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.SwitchExpression
  commentId: T:System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<SwitchCase>
  nameWithType: Collections.Generic.IEnumerable<SwitchCase>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
  nameWithType.vb: Collections.Generic.IEnumerable(Of SwitchCase)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase)
  name.vb: Collections.Generic.IEnumerable(Of SwitchCase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  commentId: T:System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.CatchBlock[]
  name: CatchBlock[]
  nameWithType: CatchBlock[]
  fullName: System.Linq.Expressions.CatchBlock[]
  nameWithType.vb: CatchBlock()
  fullname.vb: System.Linq.Expressions.CatchBlock()
  name.vb: CatchBlock()
  spec.csharp:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.TypeBinaryExpression
  commentId: T:System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TypeBinaryExpression
  nameWithType: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
