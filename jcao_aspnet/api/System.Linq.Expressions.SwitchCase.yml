items:
- uid: System.Linq.Expressions.SwitchCase
  id: SwitchCase
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.SwitchCase.Body
  - System.Linq.Expressions.SwitchCase.TestValues
  - System.Linq.Expressions.SwitchCase.ToString
  - System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
  type: Class
  source:
    remote: &o0
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
    startLine: 15
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Represents one case of a <xref href="System.Linq.Expressions.SwitchExpression" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: 'public sealed class SwitchCase : object'
    content.vb: Public NotInheritable Class SwitchCase Inherits Object
  inheritance:
  - System.Object
- uid: System.Linq.Expressions.SwitchCase.Body
  id: Body
  parent: System.Linq.Expressions.SwitchCase
  name: Body
  fullName: System.Linq.Expressions.SwitchCase.Body
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
    startLine: 38
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Gets the body of this case.
  syntax:
    content: public Expression Body { get; }
    content.vb: Public ReadOnly Property Body As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> object that represents the body of the case block.
- uid: System.Linq.Expressions.SwitchCase.TestValues
  id: TestValues
  parent: System.Linq.Expressions.SwitchCase
  name: TestValues
  fullName: System.Linq.Expressions.SwitchCase.TestValues
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
    startLine: 30
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Gets the values of this case. This case is selected for execution when the <xref href="System.Linq.Expressions.SwitchExpression.SwitchValue" data-throw-if-not-resolved="false"></xref> matches any of these values.
  syntax:
    content: public Collections.ObjectModel.ReadOnlyCollection<Expression> TestValues { get; }
    content.vb: Public ReadOnly Property TestValues As Collections.ObjectModel.ReadOnlyCollection(Of Expression)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
      description: The read-only collection of the values for this case block.
- uid: System.Linq.Expressions.SwitchCase.ToString
  id: ToString
  parent: System.Linq.Expressions.SwitchCase
  name: ToString()
  fullName: System.Linq.Expressions.SwitchCase.ToString()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
    startLine: 47
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
- uid: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.SwitchCase
  name: Update(Collections.Generic.IEnumerable<Expression>, Expression)
  name.vb: Update(Collections.Generic.IEnumerable(Of Expression), Expression)
  fullName: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Linq.Expressions.Expression)
  fullName.vb: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 781
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.
  syntax:
    content: public SwitchCase Update(Collections.Generic.IEnumerable<Expression> testValues, Expression body)
    content.vb: Public Function Update(testValues As Collections.Generic.IEnumerable(Of Expression), body As Expression) As SwitchCase
    parameters:
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The <xref href="System.Linq.Expressions.SwitchCase.TestValues" data-throw-if-not-resolved="false"></xref> property of the result.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.SwitchCase.Body" data-throw-if-not-resolved="false"></xref> property of the result.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: This expression if no children are changed or an expression with the updated children.
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<Expression>
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of Expression)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Expression>
  name.vb: Collections.Generic.IEnumerable(Of Expression)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
