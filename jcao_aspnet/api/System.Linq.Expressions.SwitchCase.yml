items:
- uid: System.Linq.Expressions.SwitchCase
  commentId: T:System.Linq.Expressions.SwitchCase
  id: SwitchCase
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.SwitchCase.Body
  - System.Linq.Expressions.SwitchCase.TestValues
  - System.Linq.Expressions.SwitchCase.ToString
  - System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
  type: Class
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 778
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: 'public sealed class SwitchCase : object'
    content.vb: >-
      Public NotInheritable Class SwitchCase
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Linq.Expressions.SwitchCase.Body
  commentId: P:System.Linq.Expressions.SwitchCase.Body
  id: Body
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: Body
  nameWithType: SwitchCase.Body
  fullName: System.Linq.Expressions.SwitchCase.Body
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Body
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 781
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public Expression Body { get; }
    content.vb: Public ReadOnly Property Body As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.SwitchCase.TestValues
  commentId: P:System.Linq.Expressions.SwitchCase.TestValues
  id: TestValues
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: TestValues
  nameWithType: SwitchCase.TestValues
  fullName: System.Linq.Expressions.SwitchCase.TestValues
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TestValues
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 782
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public Collections.ObjectModel.ReadOnlyCollection<Expression> TestValues { get; }
    content.vb: Public ReadOnly Property TestValues As Collections.ObjectModel.ReadOnlyCollection(Of Expression)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.SwitchCase.ToString
  commentId: M:System.Linq.Expressions.SwitchCase.ToString
  id: ToString
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SwitchCase.ToString()
  fullName: System.Linq.Expressions.SwitchCase.ToString()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 783
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.SwitchCase
  langs:
  - csharp
  - vb
  name: Update(Collections.Generic.IEnumerable<Expression>, Expression)
  nameWithType: SwitchCase.Update(Collections.Generic.IEnumerable<Expression>, Expression)
  fullName: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Update
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 784
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public SwitchCase Update(Collections.Generic.IEnumerable<Expression> testValues, Expression body)
    content.vb: Public Function Update(testValues As Collections.Generic.IEnumerable(Of Expression), body As Expression) As SwitchCase
    parameters:
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    - id: body
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.SwitchCase
  nameWithType.vb: SwitchCase.Update(Collections.Generic.IEnumerable(Of Expression), Expression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Linq.Expressions.Expression)
  name.vb: Update(Collections.Generic.IEnumerable(Of Expression), Expression)
references:
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expressions.Expression
  nameWithType: Expressions.Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<Expression>
  nameWithType: Collections.ObjectModel.ReadOnlyCollection<Expression>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>
  nameWithType.vb: Collections.ObjectModel.ReadOnlyCollection(Of Expression)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of Expression)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    nameWithType: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    nameWithType: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType: Collections.ObjectModel.ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    nameWithType: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    nameWithType: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Expression>
  nameWithType: Collections.Generic.IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Expression)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: Collections.Generic.IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  commentId: T:System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
