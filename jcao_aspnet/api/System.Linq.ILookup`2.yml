items:
- uid: System.Linq.ILookup`2
  commentId: T:System.Linq.ILookup`2
  id: ILookup`2
  parent: System.Linq
  children:
  - System.Linq.ILookup`2.Contains(`0)
  - System.Linq.ILookup`2.Count
  - System.Linq.ILookup`2.Item(`0)
  langs:
  - csharp
  - vb
  name: ILookup<TKey, TElement>
  nameWithType: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  type: Interface
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ILookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 194
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: 'public interface ILookup<TKey, TElement> : Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, Collections.IEnumerable'
    content.vb: >-
      Public Interface ILookup(Of TKey, TElement)
          Inherits Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement)), Collections.IEnumerable
    typeParameters:
    - id: TKey
    - id: TElement
  nameWithType.vb: ILookup(Of TKey, TElement)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
- uid: System.Linq.ILookup`2.Count
  commentId: P:System.Linq.ILookup`2.Count
  id: Count
  parent: System.Linq.ILookup`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ILookup<TKey, TElement>.Count
  fullName: System.Linq.ILookup<TKey, TElement>.Count
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 196
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: int Count { get; }
    content.vb: ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: ILookup(Of TKey, TElement).Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Linq.ILookup(Of TKey, TElement).Count
- uid: System.Linq.ILookup`2.Item(`0)
  commentId: P:System.Linq.ILookup`2.Item(`0)
  id: Item(`0)
  parent: System.Linq.ILookup`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: ILookup<TKey, TElement>.Item[TKey]
  fullName: System.Linq.ILookup<TKey, TElement>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 197
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }
    content.vb: ReadOnly Property Item(key As TKey) As Collections.Generic.IEnumerable(Of TElement)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Collections.Generic.IEnumerable{{TElement}}
  nameWithType.vb: ILookup(Of TKey, TElement).Item(TKey)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Linq.ILookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Linq.ILookup`2.Contains(`0)
  commentId: M:System.Linq.ILookup`2.Contains(`0)
  id: Contains(`0)
  parent: System.Linq.ILookup`2
  langs:
  - csharp
  - vb
  name: Contains(TKey)
  nameWithType: ILookup<TKey, TElement>.Contains(TKey)
  fullName: System.Linq.ILookup<TKey, TElement>.Contains(TKey)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 198
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: bool Contains(TKey key)
    content.vb: Function Contains(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
  nameWithType.vb: ILookup(Of TKey, TElement).Contains(TKey)
  fullName.vb: System.Linq.ILookup(Of TKey, TElement).Contains(TKey)
references:
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  commentId: '!:System.Collections.Generic.IEnumerable{``0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TElement>
  nameWithType: Collections.Generic.IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TElement)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: Collections.Generic.IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
