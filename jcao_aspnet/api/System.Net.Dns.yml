items:
- uid: System.Net.Dns
  id: Dns
  parent: System.Net
  children:
  - System.Net.Dns.GetHostAddressesAsync(System.String)
  - System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  - System.Net.Dns.GetHostEntryAsync(System.String)
  - System.Net.Dns.GetHostName
  name: Dns
  fullName: System.Net.Dns
  type: Class
  source:
    remote: &o0
      path: src/System.Net.NameResolution/src/System/Net/DNS.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 17
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: Provides simple domain name resolution functionality.
  syntax:
    content: 'public class Dns : object'
    content.vb: Public Class Dns Inherits Object
  inheritance:
  - System.Object
- uid: System.Net.Dns.GetHostAddressesAsync(System.String)
  id: GetHostAddressesAsync(System.String)
  parent: System.Net.Dns
  name: GetHostAddressesAsync(String)
  fullName: System.Net.Dns.GetHostAddressesAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 401
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.
  syntax:
    content: public static Threading.Tasks.Task<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress)
    content.vb: Public Shared Function GetHostAddressesAsync(hostNameOrAddress As String) As Threading.Tasks.Task(Of IPAddress())
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    return:
      type: System.Threading.Tasks.Task{System.Net.IPAddress[]}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation. The <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property on the task object returns an array of type <xref href="System.Net.IPAddress" data-throw-if-not-resolved="false"></xref> that holds the IP addresses for the host that is specified by the *hostNameOrAddress* parameter.
  exceptions:
  - type: System.ArgumentNullException
    description: '*hostNameOrAddress* is null.'
  - type: System.ArgumentOutOfRangeException
    description: The length of *hostNameOrAddress* is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    description: An error is encountered when resolving *hostNameOrAddress*.
  - type: System.ArgumentException
    description: '*hostNameOrAddress* is an invalid IP address.'
- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  id: GetHostEntryAsync(System.Net.IPAddress)
  parent: System.Net.Dns
  name: GetHostEntryAsync(IPAddress)
  fullName: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs
    startLine: 10
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: Resolves an IP address to an <xref href="System.Net.IPHostEntry" data-throw-if-not-resolved="false"></xref> instance as an asynchronous operation.
  syntax:
    content: public static Threading.Tasks.Task<IPHostEntry> GetHostEntryAsync(IPAddress address)
    content.vb: Public Shared Function GetHostEntryAsync(address As IPAddress) As Threading.Tasks.Task(Of IPHostEntry)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: An IP address.
    return:
      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation. The <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property on the task object returns an <xref href="System.Net.IPHostEntry" data-throw-if-not-resolved="false"></xref> instance that contains address information about the host specified in *address*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*address* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error is encountered when resolving *address*.
  - type: System.ArgumentException
    description: '*address* is an invalid IP address.'
- uid: System.Net.Dns.GetHostEntryAsync(System.String)
  id: GetHostEntryAsync(System.String)
  parent: System.Net.Dns
  name: GetHostEntryAsync(String)
  fullName: System.Net.Dns.GetHostEntryAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 419
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: Resolves a host name or IP address to an <xref href="System.Net.IPHostEntry" data-throw-if-not-resolved="false"></xref> instance as an asynchronous operation.
  syntax:
    content: public static Threading.Tasks.Task<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress)
    content.vb: Public Shared Function GetHostEntryAsync(hostNameOrAddress As String) As Threading.Tasks.Task(Of IPHostEntry)
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    return:
      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation. The <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property on the task object returns an <xref href="System.Net.IPHostEntry" data-throw-if-not-resolved="false"></xref> instance that contains address information about the host specified in *hostNameOrAddress*.
  exceptions:
  - type: System.ArgumentNullException
    description: The *hostNameOrAddress* parameter is null.
  - type: System.ArgumentOutOfRangeException
    description: The length of *hostNameOrAddress* parameter is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    description: An error was encountered when resolving the *hostNameOrAddress* parameter.
  - type: System.ArgumentException
    description: The *hostNameOrAddress* parameter is an invalid IP address.
- uid: System.Net.Dns.GetHostName
  id: GetHostName
  parent: System.Net.Dns
  name: GetHostName()
  fullName: System.Net.Dns.GetHostName()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 165
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: Gets the host name of the local computer.
  syntax:
    content: public static string GetHostName()
    content.vb: Public Shared Function GetHostName As String
    return:
      type: System.String
      description: A string that contains the DNS host name of the local computer.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error is encountered when resolving the local host name.
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Net.IPAddress[]}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<IPAddress[]>
  name.vb: Threading.Tasks.Task(Of IPAddress())
  fullName: System.Threading.Tasks.Task<System.Net.IPAddress[]>
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.IPAddress())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  name.vb: Threading.Tasks.Task(Of )
  fullName: System.Threading.Tasks.Task<>
  fullName.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Threading.Tasks.Task{System.Net.IPHostEntry}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<IPHostEntry>
  name.vb: Threading.Tasks.Task(Of IPHostEntry)
  fullName: System.Threading.Tasks.Task<System.Net.IPHostEntry>
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.IPHostEntry)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.IPHostEntry
    name: IPHostEntry
    fullName: System.Net.IPHostEntry
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPHostEntry
    name: IPHostEntry
    fullName: System.Net.IPHostEntry
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
