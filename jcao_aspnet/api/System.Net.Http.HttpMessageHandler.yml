items:
- uid: System.Net.Http.HttpMessageHandler
  id: HttpMessageHandler
  parent: System.Net.Http
  children:
  - System.Net.Http.HttpMessageHandler.#ctor
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  name: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
  type: Class
  source:
    remote: &o0
      path: src/System.Net.Http/src/System/Net/Http/HttpMessageHandler.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Http/src/System/Net/Http/HttpMessageHandler.cs
    startLine: 12
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: A base type for HTTP message handlers.
  syntax:
    content: 'public abstract class HttpMessageHandler : IDisposable'
    content.vb: Public MustInherit Class HttpMessageHandler Inherits IDisposable
  inheritance:
  - System.Object
- uid: System.Net.Http.HttpMessageHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpMessageHandler
  name: HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpMessageHandler.cs
    startLine: 14
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Initializes a new instance of the <xref href="System.Net.Http.HttpMessageHandler" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected HttpMessageHandler()
    content.vb: Protected Sub New
- uid: System.Net.Http.HttpMessageHandler.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageHandler
  name: Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpMessageHandler.cs
    startLine: 29
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Releases the unmanaged resources and disposes of the managed resources used by the <xref href="System.Net.Http.HttpMessageHandler" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpMessageHandler.cs
    startLine: 24
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Releases the unmanaged resources used by the <xref href="System.Net.Http.HttpMessageHandler" data-throw-if-not-resolved="false"></xref> and optionally disposes of the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to releases only unmanaged resources.
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  name: SendAsync(HttpRequestMessage, Threading.CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 122
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send an HTTP request as an asynchronous operation.
  syntax:
    content: protected abstract Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken)
    content.vb: Protected MustOverride Function SendAsync(request As HttpRequestMessage, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to send.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel operation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *request* was null.
references:
- uid: System.Net.Http
  isExternal: false
  name: System.Net.Http
  fullName: System.Net.Http
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<HttpResponseMessage>
  name.vb: Threading.Tasks.Task(Of HttpResponseMessage)
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: )
    fullName: )
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  name.vb: Threading.Tasks.Task(Of )
  fullName: System.Threading.Tasks.Task<>
  fullName.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
