items:
- uid: System.Net.WebSockets.WebSocket
  id: WebSocket
  parent: System.Net.WebSockets
  children:
  - System.Net.WebSockets.WebSocket.#ctor
  - System.Net.WebSockets.WebSocket.Abort
  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseStatus
  - System.Net.WebSockets.WebSocket.CloseStatusDescription
  - System.Net.WebSockets.WebSocket.Dispose
  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.State
  - System.Net.WebSockets.WebSocket.SubProtocol
  name: WebSocket
  fullName: System.Net.WebSockets.WebSocket
  type: Class
  source:
    remote: &o0
      path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 12
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: The WebSocket class allows applications to send and receive data after the WebSocket upgrade has completed.
  syntax:
    content: 'public abstract class WebSocket : IDisposable'
    content.vb: Public MustInherit Class WebSocket Inherits IDisposable
  inheritance:
  - System.Object
- uid: System.Net.WebSockets.WebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.WebSocket
  name: WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
  type: Constructor
  source:
    remote: &o1
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 9
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Creates an instance of the <xref href="System.Net.WebSockets.WebSocket" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected WebSocket()
    content.vb: Protected Sub New
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.WebSocket
  name: CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
  type: Property
  source:
    remote: *o0
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 14
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Indicates the reason why the remote endpoint initiated the close handshake.
  syntax:
    content: public abstract Nullable<WebSocketCloseStatus> CloseStatus { get; }
    content.vb: Public MustOverride ReadOnly Property CloseStatus As Nullable(Of WebSocketCloseStatus)
    parameters: []
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: Returns <xref href="System.Net.WebSockets.WebSocketCloseStatus" data-throw-if-not-resolved="false"></xref>.
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  name: CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
  type: Property
  source:
    remote: *o0
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 15
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Allows the remote endpoint to describe the reason why the connection was closed.
  syntax:
    content: public abstract string CloseStatusDescription { get; }
    content.vb: Public MustOverride ReadOnly Property CloseStatusDescription As String
    parameters: []
    return:
      type: System.String
      description: Returns <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
- uid: System.Net.WebSockets.WebSocket.State
  id: State
  parent: System.Net.WebSockets.WebSocket
  name: State
  fullName: System.Net.WebSockets.WebSocket.State
  type: Property
  source:
    remote: *o0
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 17
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Returns the current state of the WebSocket connection.
  syntax:
    content: public abstract WebSocketState State { get; }
    content.vb: Public MustOverride ReadOnly Property State As WebSocketState
    parameters: []
    return:
      type: System.Net.WebSockets.WebSocketState
      description: Returns <xref href="System.Net.WebSockets.WebSocketState" data-throw-if-not-resolved="false"></xref>.
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.WebSocket
  name: SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
  type: Property
  source:
    remote: *o0
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 16
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: The subprotocol that was negotiated during the opening handshake.
  syntax:
    content: public abstract string SubProtocol { get; }
    content.vb: Public MustOverride ReadOnly Property SubProtocol As String
    parameters: []
    return:
      type: System.String
      description: Returns <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
- uid: System.Net.WebSockets.WebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.WebSocket
  name: Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 19
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Aborts the WebSocket connection and cancels any pending IO operations.
  syntax:
    content: public abstract void Abort()
    content.vb: Public MustOverride Sub Abort
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  name: CloseAsync(WebSocketCloseStatus, String, Threading.CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 15
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the WebSocket protocol specification section 7.
  syntax:
    content: public abstract Threading.Tasks.Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, Threading.CancellationToken cancellationToken)
    content.vb: Public MustOverride Function CloseAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: Indicates the reason for closing the WebSocket connection.
    - id: statusDescription
      type: System.String
      description: Specifies a human readable explanation as to why the connection is closed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token that can be used to propagate notification that operations should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation.
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  name: CloseOutputAsync(WebSocketCloseStatus, String, Threading.CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 16
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Initiates or completes the close handshake defined in the WebSocket protocol specification section 7.
  syntax:
    content: public abstract Threading.Tasks.Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, Threading.CancellationToken cancellationToken)
    content.vb: Public MustOverride Function CloseOutputAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: Indicates the reason for closing the WebSocket connection.
    - id: statusDescription
      type: System.String
      description: Allows applications to specify a human readable explanation as to why the connection is closed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token that can be used to propagate notification that operations should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation.
- uid: System.Net.WebSockets.WebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.WebSocket
  name: Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocket.cs
    startLine: 26
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.
  syntax:
    content: public abstract void Dispose()
    content.vb: Public MustOverride Sub Dispose
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  name: ReceiveAsync(ArraySegment<Byte>, Threading.CancellationToken)
  name.vb: ReceiveAsync(ArraySegment(Of Byte), Threading.CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment<System.Byte>, System.Threading.CancellationToken)
  fullName.vb: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment(Of System.Byte), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 18
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Receives data from the WebSocket connection asynchronously.
  syntax:
    content: public abstract Threading.Tasks.Task<WebSocketReceiveResult> ReceiveAsync(ArraySegment<byte> buffer, Threading.CancellationToken cancellationToken)
    content.vb: Public MustOverride Function ReceiveAsync(buffer As ArraySegment(Of Byte), cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of WebSocketReceiveResult)
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: References the application buffer that is the storage location for the received data.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Propagate the notification that operations should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation. The <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property on the task object returns a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array containing the received data.
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  name: SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, Threading.CancellationToken)
  name.vb: SendAsync(ArraySegment(Of Byte), WebSocketMessageType, Boolean, Threading.CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment<System.Byte>, System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)
  fullName.vb: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment(Of System.Byte), System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 19
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: Sends data over the WebSocket connection asynchronously.
  syntax:
    content: public abstract Threading.Tasks.Task SendAsync(ArraySegment<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, Threading.CancellationToken cancellationToken)
    content.vb: Public MustOverride Function SendAsync(buffer As ArraySegment(Of Byte), messageType As WebSocketMessageType, endOfMessage As Boolean, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: The buffer to be sent over the connection.
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: Indicates whether the application is sending a binary or text message.
    - id: endOfMessage
      type: System.Boolean
      description: "Indicates whether the data in “buffer” is the last part of a message."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token that propagates the notification that operations should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation.
references:
- uid: System.Net.WebSockets
  isExternal: false
  name: System.Net.WebSockets
  fullName: System.Net.WebSockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  definition: System.Nullable`1
  name: Nullable<WebSocketCloseStatus>
  name.vb: Nullable(Of WebSocketCloseStatus)
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  fullName.vb: System.Nullable(Of System.Net.WebSockets.WebSocketCloseStatus)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    fullName: System.Net.WebSockets.WebSocketCloseStatus
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    fullName: System.Net.WebSockets.WebSocketCloseStatus
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  name.vb: Nullable(Of )
  fullName: System.Nullable<>
  fullName.vb: System.Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.ArraySegment{System.Byte}
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  name.vb: ArraySegment(Of Byte)
  fullName: System.ArraySegment<System.Byte>
  fullName.vb: System.ArraySegment(Of System.Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<WebSocketReceiveResult>
  name.vb: Threading.Tasks.Task(Of WebSocketReceiveResult)
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.WebSockets.WebSocketReceiveResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    fullName: System.Net.WebSockets.WebSocketReceiveResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    fullName: System.Net.WebSockets.WebSocketReceiveResult
  - name: )
    fullName: )
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<>
  name.vb: ArraySegment(Of )
  fullName: System.ArraySegment<>
  fullName.vb: System.ArraySegment(Of )
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  name.vb: Threading.Tasks.Task(Of )
  fullName: System.Threading.Tasks.Task<>
  fullName.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
