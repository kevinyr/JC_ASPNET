items:
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  id: Assembly
  parent: System.Reflection
  children:
  - System.Reflection.Assembly.CustomAttributes
  - System.Reflection.Assembly.DefinedTypes
  - System.Reflection.Assembly.Equals(System.Object)
  - System.Reflection.Assembly.ExportedTypes
  - System.Reflection.Assembly.FullName
  - System.Reflection.Assembly.GetHashCode
  - System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  - System.Reflection.Assembly.GetManifestResourceNames
  - System.Reflection.Assembly.GetManifestResourceStream(System.String)
  - System.Reflection.Assembly.GetName
  - System.Reflection.Assembly.GetType(System.String)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Assembly.IsDynamic
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  - System.Reflection.Assembly.ManifestModule
  - System.Reflection.Assembly.Modules
  - System.Reflection.Assembly.ToString
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 16
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: 'public abstract class Assembly : object'
    content.vb: >-
      Public MustInherit Class Assembly
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.Assembly.CustomAttributes
  commentId: P:System.Reflection.Assembly.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: CustomAttributes
  nameWithType: Assembly.CustomAttributes
  fullName: System.Reflection.Assembly.CustomAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAttributes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 19
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As Collections.Generic.IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.DefinedTypes
  commentId: P:System.Reflection.Assembly.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: DefinedTypes
  nameWithType: Assembly.DefinedTypes
  fullName: System.Reflection.Assembly.DefinedTypes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefinedTypes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 20
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
    content.vb: Public MustOverride ReadOnly Property DefinedTypes As Collections.Generic.IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.Assembly.ExportedTypes
  commentId: P:System.Reflection.Assembly.ExportedTypes
  id: ExportedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ExportedTypes
  nameWithType: Assembly.ExportedTypes
  fullName: System.Reflection.Assembly.ExportedTypes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExportedTypes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 21
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<Type> ExportedTypes { get; }
    content.vb: Public Overridable ReadOnly Property ExportedTypes As Collections.Generic.IEnumerable(Of Type)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.FullName
  commentId: P:System.Reflection.Assembly.FullName
  id: FullName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: Assembly.FullName
  fullName: System.Reflection.Assembly.FullName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 22
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual string FullName { get; }
    content.vb: Public Overridable ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.IsDynamic
  commentId: P:System.Reflection.Assembly.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: IsDynamic
  nameWithType: Assembly.IsDynamic
  fullName: System.Reflection.Assembly.IsDynamic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDynamic
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsDynamic { get; }
    content.vb: Public Overridable ReadOnly Property IsDynamic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.ManifestModule
  commentId: P:System.Reflection.Assembly.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ManifestModule
  nameWithType: Assembly.ManifestModule
  fullName: System.Reflection.Assembly.ManifestModule
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ManifestModule
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 24
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Module ManifestModule { get; }
    content.vb: 'Public Overridable ReadOnly Property ManifestModule As '
    parameters: []
    return:
      type: System.Reflection.Module
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Assembly.Modules
  commentId: P:System.Reflection.Assembly.Modules
  id: Modules
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Modules
  nameWithType: Assembly.Modules
  fullName: System.Reflection.Assembly.Modules
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modules
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 25
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Collections.Generic.IEnumerable<Module> Modules { get; }
    content.vb: Public MustOverride ReadOnly Property Modules As Collections.Generic.IEnumerable(Of  Module)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.Assembly.Equals(System.Object)
  commentId: M:System.Reflection.Assembly.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Assembly.Equals(Object)
  fullName: System.Reflection.Assembly.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 26
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Assembly.GetHashCode
  commentId: M:System.Reflection.Assembly.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Assembly.GetHashCode()
  fullName: System.Reflection.Assembly.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceInfo(String)
  nameWithType: Assembly.GetManifestResourceInfo(String)
  fullName: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetManifestResourceInfo
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName)
    content.vb: Public Overridable Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo
    parameters:
    - id: resourceName
      type: System.String
    return:
      type: System.Reflection.ManifestResourceInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetManifestResourceNames
  commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceNames()
  nameWithType: Assembly.GetManifestResourceNames()
  fullName: System.Reflection.Assembly.GetManifestResourceNames()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetManifestResourceNames
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 29
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual string[] GetManifestResourceNames()
    content.vb: Public Overridable Function GetManifestResourceNames As String()
    return:
      type: System.String[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetManifestResourceStream(String)
  nameWithType: Assembly.GetManifestResourceStream(String)
  fullName: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetManifestResourceStream
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual IO.Stream GetManifestResourceStream(string name)
    content.vb: Public Overridable Function GetManifestResourceStream(name As String) As IO.Stream
    parameters:
    - id: name
      type: System.String
    return:
      type: System.IO.Stream
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetName
  commentId: M:System.Reflection.Assembly.GetName
  id: GetName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetName()
  nameWithType: Assembly.GetName()
  fullName: System.Reflection.Assembly.GetName()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual AssemblyName GetName()
    content.vb: Public Overridable Function GetName As AssemblyName
    return:
      type: System.Reflection.AssemblyName
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetType(System.String)
  commentId: M:System.Reflection.Assembly.GetType(System.String)
  id: GetType(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetType(String)
  nameWithType: Assembly.GetType(String)
  fullName: System.Reflection.Assembly.GetType(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 32
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type GetType(string name)
    content.vb: Public Overridable Function GetType(name As String) As Type
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  nameWithType: Assembly.GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 33
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type GetType(string name, bool throwOnError, bool ignoreCase)
    content.vb: Public Overridable Function GetType(name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: name
      type: System.String
    - id: throwOnError
      type: System.Boolean
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  id: Load(System.Reflection.AssemblyName)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: Load(AssemblyName)
  nameWithType: Assembly.Load(AssemblyName)
  fullName: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 34
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public static Assembly Load(AssemblyName assemblyRef)
    content.vb: Public Shared Function Load(assemblyRef As AssemblyName) As Assembly
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
    return:
      type: System.Reflection.Assembly
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Assembly.ToString
  commentId: M:System.Reflection.Assembly.ToString
  id: ToString
  parent: System.Reflection.Assembly
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Assembly.ToString()
  fullName: System.Reflection.Assembly.ToString()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeData>
  nameWithType: Collections.Generic.IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  nameWithType.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TypeInfo>
  nameWithType: Collections.Generic.IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Type}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Type>
  nameWithType: Collections.Generic.IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Type)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: Collections.Generic.IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.Module}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Module>
  nameWithType: Collections.Generic.IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Module)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Module)
  name.vb: Collections.Generic.IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ManifestResourceInfo
  commentId: T:System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  nameWithType: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  nameWithType: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Reflection.AssemblyName
  commentId: T:System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
