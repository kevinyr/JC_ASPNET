items:
- uid: System.Reflection.Emit.AssemblyBuilder
  commentId: T:System.Reflection.Emit.AssemblyBuilder
  id: AssemblyBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  - System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  - System.Reflection.Emit.AssemblyBuilder.FullName
  - System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  - System.Reflection.Emit.AssemblyBuilder.GetHashCode
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  - System.Reflection.Emit.AssemblyBuilder.IsDynamic
  - System.Reflection.Emit.AssemblyBuilder.ManifestModule
  - System.Reflection.Emit.AssemblyBuilder.Modules
  - System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: AssemblyBuilder
  nameWithType: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyBuilder
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 103
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: 'public sealed class AssemblyBuilder : Assembly, Assembly'
    content.vb: >-
      Public NotInheritable Class AssemblyBuilder
          Inherits Assembly
          Implements Assembly
  inheritance:
  - System.Object
  implements:
  - System.Reflection.Assembly
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.AssemblyBuilder.FullName
  commentId: P:System.Reflection.Emit.AssemblyBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: AssemblyBuilder.FullName
  fullName: System.Reflection.Emit.AssemblyBuilder.FullName
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 13
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override string FullName { get; }
    content.vb: Public Overrides ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.IsDynamic
  commentId: P:System.Reflection.Emit.AssemblyBuilder.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: IsDynamic
  nameWithType: AssemblyBuilder.IsDynamic
  fullName: System.Reflection.Emit.AssemblyBuilder.IsDynamic
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDynamic
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 14
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsDynamic { get; }
    content.vb: Public Overrides ReadOnly Property IsDynamic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.ManifestModule
  commentId: P:System.Reflection.Emit.AssemblyBuilder.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: ManifestModule
  nameWithType: AssemblyBuilder.ManifestModule
  fullName: System.Reflection.Emit.AssemblyBuilder.ManifestModule
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ManifestModule
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 15
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Module ManifestModule { get; }
    content.vb: 'Public Overrides ReadOnly Property ManifestModule As '
    parameters: []
    return:
      type: System.Reflection.Module
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess)
  nameWithType: AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineDynamicAssembly
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 16
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access)
    content.vb: Public Shared Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
    return:
      type: System.Reflection.Emit.AssemblyBuilder
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  commentId: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Collections.Generic.IEnumerable<CustomAttributeBuilder>)
  nameWithType: AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Collections.Generic.IEnumerable<CustomAttributeBuilder>)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineDynamicAssembly
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 17
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Collections.Generic.IEnumerable<CustomAttributeBuilder> assemblyAttributes)
    content.vb: Public Shared Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As Collections.Generic.IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
    return:
      type: System.Reflection.Emit.AssemblyBuilder
  nameWithType.vb: AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Collections.Generic.IEnumerable(Of CustomAttributeBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder))
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Collections.Generic.IEnumerable(Of CustomAttributeBuilder))
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  id: DefineDynamicModule(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefineDynamicModule(String)
  nameWithType: AssemblyBuilder.DefineDynamicModule(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineDynamicModule
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 18
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public ModuleBuilder DefineDynamicModule(string name)
    content.vb: Public Function DefineDynamicModule(name As String) As ModuleBuilder
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.Emit.ModuleBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AssemblyBuilder.Equals(Object)
  fullName: System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 19
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  id: GetDynamicModule(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetDynamicModule(String)
  nameWithType: AssemblyBuilder.GetDynamicModule(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDynamicModule
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 20
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public ModuleBuilder GetDynamicModule(string name)
    content.vb: Public Function GetDynamicModule(name As String) As ModuleBuilder
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.Emit.ModuleBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.AssemblyBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AssemblyBuilder.GetHashCode()
  fullName: System.Reflection.Emit.AssemblyBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 21
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetManifestResourceInfo(String)
  nameWithType: AssemblyBuilder.GetManifestResourceInfo(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetManifestResourceInfo
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 22
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override ManifestResourceInfo GetManifestResourceInfo(string resourceName)
    content.vb: Public Overrides Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo
    parameters:
    - id: resourceName
      type: System.String
    return:
      type: System.Reflection.ManifestResourceInfo
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetManifestResourceNames()
  nameWithType: AssemblyBuilder.GetManifestResourceNames()
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetManifestResourceNames
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 23
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override string[] GetManifestResourceNames()
    content.vb: Public Overrides Function GetManifestResourceNames As String()
    return:
      type: System.String[]
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetManifestResourceStream(String)
  nameWithType: AssemblyBuilder.GetManifestResourceStream(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetManifestResourceStream
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 24
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override IO.Stream GetManifestResourceStream(string name)
    content.vb: Public Overrides Function GetManifestResourceStream(name As String) As IO.Stream
    parameters:
    - id: name
      type: System.String
    return:
      type: System.IO.Stream
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType: AssemblyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 25
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
    - id: binaryAttribute
      type: System.Byte[]
  nameWithType.vb: AssemblyBuilder.SetCustomAttribute(ConstructorInfo, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: AssemblyBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 26
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  commentId: P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefinedTypes
  nameWithType: AssemblyBuilder.DefinedTypes
  fullName: System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefinedTypes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 105
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
    content.vb: Public Overrides ReadOnly Property DefinedTypes As Collections.Generic.IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TypeInfo}
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.Modules
  commentId: P:System.Reflection.Emit.AssemblyBuilder.Modules
  id: Modules
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: Modules
  nameWithType: AssemblyBuilder.Modules
  fullName: System.Reflection.Emit.AssemblyBuilder.Modules
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modules
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 107
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Collections.Generic.IEnumerable<Module> Modules { get; }
    content.vb: Public Overrides ReadOnly Property Modules As Collections.Generic.IEnumerable(Of  Module)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Module}
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.AssemblyName
  commentId: T:System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Reflection.Emit.AssemblyBuilderAccess
  commentId: T:System.Reflection.Emit.AssemblyBuilderAccess
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilderAccess
  nameWithType: AssemblyBuilderAccess
  fullName: System.Reflection.Emit.AssemblyBuilderAccess
- uid: System.Reflection.Emit.AssemblyBuilder
  commentId: T:System.Reflection.Emit.AssemblyBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilder
  nameWithType: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeBuilder>
  nameWithType: Collections.Generic.IEnumerable<CustomAttributeBuilder>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>
  nameWithType.vb: Collections.Generic.IEnumerable(Of CustomAttributeBuilder)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder)
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    nameWithType: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    nameWithType: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Emit.ModuleBuilder
  commentId: T:System.Reflection.Emit.ModuleBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ManifestResourceInfo
  commentId: T:System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  nameWithType: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  nameWithType: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  commentId: T:System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Collections.Generic.IEnumerable{TypeInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{TypeInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TypeInfo>
  nameWithType: Collections.Generic.IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<TypeInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TypeInfo)
  name.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: TypeInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: TypeInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Module}
  commentId: '!:System.Collections.Generic.IEnumerable{Module}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Module>
  nameWithType: Collections.Generic.IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<Module>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Module)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Module)
  name.vb: Collections.Generic.IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Module
    name: Module
    nameWithType: Module
    fullName: Module
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Module
    name: Module
    nameWithType: Module
    fullName: Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
