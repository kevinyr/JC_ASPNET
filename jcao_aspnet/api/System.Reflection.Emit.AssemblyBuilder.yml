items:
- uid: System.Reflection.Emit.AssemblyBuilder
  id: AssemblyBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  - System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  - System.Reflection.Emit.AssemblyBuilder.FullName
  - System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  - System.Reflection.Emit.AssemblyBuilder.GetHashCode
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  - System.Reflection.Emit.AssemblyBuilder.IsDynamic
  - System.Reflection.Emit.AssemblyBuilder.ManifestModule
  - System.Reflection.Emit.AssemblyBuilder.Modules
  - System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  name: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 170
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines and represents a dynamic assembly.
  syntax:
    content: 'public sealed class AssemblyBuilder : Assembly, Assembly'
    content.vb: Public NotInheritable Class AssemblyBuilder Inherits Assembly Implements Assembly
  inheritance:
  - System.Object
  implements:
  - System.Reflection.Assembly
- uid: System.Reflection.Emit.AssemblyBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.AssemblyBuilder
  name: FullName
  fullName: System.Reflection.Emit.AssemblyBuilder.FullName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1259
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the display name of the current dynamic assembly.
  syntax:
    content: public override string FullName { get; }
    content.vb: Public Overrides ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: The display name of the dynamic assembly.
- uid: System.Reflection.Emit.AssemblyBuilder.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Emit.AssemblyBuilder
  name: IsDynamic
  fullName: System.Reflection.Emit.AssemblyBuilder.IsDynamic
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1366
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates that the current assembly is a dynamic assembly.
  syntax:
    content: public override bool IsDynamic { get; }
    content.vb: Public Overrides ReadOnly Property IsDynamic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Always true.
- uid: System.Reflection.Emit.AssemblyBuilder.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Emit.AssemblyBuilder
  name: ManifestModule
  fullName: System.Reflection.Emit.AssemblyBuilder.ManifestModule
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1299
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the module in the current <xref href="System.Reflection.Emit.AssemblyBuilder" data-throw-if-not-resolved="false"></xref> that contains the assembly manifest.
  syntax:
    content: public override Module ManifestModule { get; }
    content.vb: Public Overrides ReadOnly Property ManifestModule As
    parameters: []
    return:
      type: System.Reflection.Module
      description: The manifest module.
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 489
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a dynamic assembly that has the specified name and access rights.
  syntax:
    content: public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access)
    content.vb: Public Shared Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The name of the assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The access rights of the assembly.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: An object that represents the new assembly.
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  parent: System.Reflection.Emit.AssemblyBuilder
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Collections.Generic.IEnumerable<CustomAttributeBuilder>)
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Collections.Generic.IEnumerable(Of CustomAttributeBuilder))
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
  fullName.vb: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 502
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a new assembly that has the specified name, access rights, and attributes.
  syntax:
    content: public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Collections.Generic.IEnumerable<CustomAttributeBuilder> assemblyAttributes)
    content.vb: Public Shared Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As Collections.Generic.IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The name of the assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The access rights of the assembly.
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
      description: A collection that contains the attributes of the assembly.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: An object that represents the new assembly.
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  id: DefineDynamicModule(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: DefineDynamicModule(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 583
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a named transient dynamic module in this assembly.
  syntax:
    content: public ModuleBuilder DefineDynamicModule(string name)
    content.vb: Public Function DefineDynamicModule(name As String) As ModuleBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic module. Must be less than 260 characters in length.
    return:
      type: System.Reflection.Emit.ModuleBuilder
      description: A <xref href="System.Reflection.Emit.ModuleBuilder" data-throw-if-not-resolved="false"></xref> representing the defined dynamic module.
  exceptions:
  - type: System.ArgumentException
    description: '*name* begins with white space.-or- The length of *name* is zero.-or- The length of *name* is greater than or equal to 260.'
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.ExecutionEngineException
    description: The assembly for default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found.
- uid: System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: Equals(Object)
  fullName: System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1137
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a value that indicates whether this instance is equal to the specified object.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or null.
    return:
      type: System.Boolean
      description: true if *obj* equals the type and value of this instance; otherwise, false.
- uid: System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  id: GetDynamicModule(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: GetDynamicModule(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1515
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the dynamic module with the specified name.
  syntax:
    content: public ModuleBuilder GetDynamicModule(string name)
    content.vb: Public Function GetDynamicModule(name As String) As ModuleBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the requested dynamic module.
    return:
      type: System.Reflection.Emit.ModuleBuilder
      description: A ModuleBuilder object representing the requested dynamic module.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The length of *name* is zero.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.Reflection.Emit.AssemblyBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.AssemblyBuilder
  name: GetHashCode()
  fullName: System.Reflection.Emit.AssemblyBuilder.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1142
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: GetManifestResourceInfo(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1200
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns information about how the given resource has been persisted.
  syntax:
    content: public override ManifestResourceInfo GetManifestResourceInfo(string resourceName)
    content.vb: Public Overrides Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo
    parameters:
    - id: resourceName
      type: System.String
      description: The name of the resource.
    return:
      type: System.Reflection.ManifestResourceInfo
      description: <xref href="System.Reflection.ManifestResourceInfo" data-throw-if-not-resolved="false"></xref> populated with information about the resource's topology, or null if the resource is not found.
  exceptions:
  - type: System.NotSupportedException
    description: This method is not currently supported.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Emit.AssemblyBuilder
  name: GetManifestResourceNames()
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1169
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Loads the specified manifest resource from this assembly.
  syntax:
    content: public override string[] GetManifestResourceNames()
    content.vb: Public Overrides Function GetManifestResourceNames As String()
    return:
      type: System.String[]
      description: An array of type String containing the names of all the resources.
  exceptions:
  - type: System.NotSupportedException
    description: This method is not supported on a dynamic assembly. To get the manifest resource names, use <xref href="System.Reflection.Assembly.GetManifestResourceNames" data-throw-if-not-resolved="false"></xref>.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: GetManifestResourceStream(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1195
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Loads the specified manifest resource from this assembly.
  syntax:
    content: public override IO.Stream GetManifestResourceStream(string name)
    content.vb: Public Overrides Function GetManifestResourceStream(name As String) As IO.Stream
    parameters:
    - id: name
      type: System.String
      description: The name of the manifest resource being requested.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> representing this manifest resource.
  exceptions:
  - type: System.NotSupportedException
    description: This method is not currently supported.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.AssemblyBuilder
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
  fullName: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  fullName.vb: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1609
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Set a custom attribute on this assembly using a specified custom attribute blob.
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte blob representing the attributes.
  exceptions:
  - type: System.ArgumentNullException
    description: '*con* or *binaryAttribute* is null.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.ArgumentException
    description: '*con* is not a RuntimeConstructorInfo object.'
- uid: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.AssemblyBuilder
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1650
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Set a custom attribute on this assembly using a custom attribute builder.
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class to define the custom attribute.
  exceptions:
  - type: System.ArgumentNullException
    description: '*con* is null.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Emit.AssemblyBuilder
  name: DefinedTypes
  fullName: System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  type: Property
  source:
    remote: &o1
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 102
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
    content.vb: Public Overrides ReadOnly Property DefinedTypes As Collections.Generic.IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TypeInfo}
- uid: System.Reflection.Emit.AssemblyBuilder.Modules
  id: Modules
  parent: System.Reflection.Emit.AssemblyBuilder
  name: Modules
  fullName: System.Reflection.Emit.AssemblyBuilder.Modules
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 104
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Collections.Generic.IEnumerable<Module> Modules { get; }
    content.vb: Public Overrides ReadOnly Property Modules As Collections.Generic.IEnumerable(Of Module)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Module}
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Reflection.Assembly
  fullName: System.Reflection.Assembly
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Reflection.Emit.AssemblyBuilderAccess
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilderAccess
  fullName: System.Reflection.Emit.AssemblyBuilderAccess
- uid: System.Reflection.Emit.AssemblyBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeBuilder>
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeBuilder)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Reflection.Emit.ModuleBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.String[]
  isExternal: false
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Reflection.ConstructorInfo
  isExternal: false
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Collections.Generic.IEnumerable{TypeInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TypeInfo>
  name.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  fullName: System.Collections.Generic.IEnumerable<TypeInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: TypeInfo
    name: TypeInfo
    fullName: TypeInfo
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: TypeInfo
    name: TypeInfo
    fullName: TypeInfo
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Module}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Module>
  name.vb: Collections.Generic.IEnumerable(Of Module)
  fullName: System.Collections.Generic.IEnumerable<Module>
  fullName.vb: System.Collections.Generic.IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: Module
    name: Module
    fullName: Module
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Module
    name: Module
    fullName: Module
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ExecutionEngineException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
