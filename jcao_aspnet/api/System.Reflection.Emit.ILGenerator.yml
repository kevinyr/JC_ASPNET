items:
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  id: ILGenerator
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  - System.Reflection.Emit.ILGenerator.BeginFaultBlock
  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  - System.Reflection.Emit.ILGenerator.BeginScope
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  - System.Reflection.Emit.ILGenerator.DefineLabel
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  - System.Reflection.Emit.ILGenerator.EndExceptionBlock
  - System.Reflection.Emit.ILGenerator.EndScope
  - System.Reflection.Emit.ILGenerator.ILOffset
  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  langs:
  - csharp
  - vb
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ILGenerator
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 17
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: 'public class ILGenerator : object'
    content.vb: >-
      Public Class ILGenerator
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  commentId: P:System.Reflection.Emit.ILGenerator.ILOffset
  id: ILOffset
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: ILOffset
  nameWithType: ILGenerator.ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ILOffset
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 20
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual int ILOffset { get; }
    content.vb: Public Overridable ReadOnly Property ILOffset As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  id: BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginCatchBlock(Type)
  nameWithType: ILGenerator.BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginCatchBlock
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 21
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void BeginCatchBlock(Type exceptionType)
    content.vb: Public Overridable Sub BeginCatchBlock(exceptionType As Type)
    parameters:
    - id: exceptionType
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  id: BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginExceptFilterBlock()
  nameWithType: ILGenerator.BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginExceptFilterBlock
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 22
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void BeginExceptFilterBlock()
    content.vb: Public Overridable Sub BeginExceptFilterBlock
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  id: BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginExceptionBlock()
  nameWithType: ILGenerator.BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginExceptionBlock
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 23
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual Label BeginExceptionBlock()
    content.vb: Public Overridable Function BeginExceptionBlock As Label
    return:
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginFaultBlock
  id: BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginFaultBlock()
  nameWithType: ILGenerator.BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginFaultBlock
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 24
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void BeginFaultBlock()
    content.vb: Public Overridable Sub BeginFaultBlock
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  id: BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginFinallyBlock()
  nameWithType: ILGenerator.BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginFinallyBlock
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 25
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void BeginFinallyBlock()
    content.vb: Public Overridable Sub BeginFinallyBlock
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  commentId: M:System.Reflection.Emit.ILGenerator.BeginScope
  id: BeginScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginScope()
  nameWithType: ILGenerator.BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginScope
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 26
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void BeginScope()
    content.vb: Public Overridable Sub BeginScope
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  id: DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type)
  nameWithType: ILGenerator.DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclareLocal
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 27
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual LocalBuilder DeclareLocal(Type localType)
    content.vb: Public Overridable Function DeclareLocal(localType As Type) As LocalBuilder
    parameters:
    - id: localType
      type: System.Type
    return:
      type: System.Reflection.Emit.LocalBuilder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  id: DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type, Boolean)
  nameWithType: ILGenerator.DeclareLocal(Type, Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclareLocal
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 28
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual LocalBuilder DeclareLocal(Type localType, bool pinned)
    content.vb: Public Overridable Function DeclareLocal(localType As Type, pinned As Boolean) As LocalBuilder
    parameters:
    - id: localType
      type: System.Type
    - id: pinned
      type: System.Boolean
    return:
      type: System.Reflection.Emit.LocalBuilder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  commentId: M:System.Reflection.Emit.ILGenerator.DefineLabel
  id: DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DefineLabel()
  nameWithType: ILGenerator.DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineLabel
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 29
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual Label DefineLabel()
    content.vb: Public Overridable Function DefineLabel As Label
    return:
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  id: Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode)
  nameWithType: ILGenerator.Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 30
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode)
    content.vb: Public Overridable Sub Emit(opcode As OpCode)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  id: Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Byte)
  nameWithType: ILGenerator.Emit(OpCode, Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 31
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, byte arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Byte)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Byte
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  id: Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Double)
  nameWithType: ILGenerator.Emit(OpCode, Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 32
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, double arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Double)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Double
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  id: Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int16)
  nameWithType: ILGenerator.Emit(OpCode, Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 34
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, short arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Short)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Int16
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  id: Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int32)
  nameWithType: ILGenerator.Emit(OpCode, Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 35
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, int arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Integer)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  id: Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int64)
  nameWithType: ILGenerator.Emit(OpCode, Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 36
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, long arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Long)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Int64
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, ConstructorInfo)
  nameWithType: ILGenerator.Emit(OpCode, ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 37
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, ConstructorInfo con)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, con As ConstructorInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: con
      type: System.Reflection.ConstructorInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label)
  nameWithType: ILGenerator.Emit(OpCode, Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 39
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, Label label)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, label As Label)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: label
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label[])
  nameWithType: ILGenerator.Emit(OpCode, Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 40
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, Label[] labels)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, labels As Label())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: labels
      type: System.Reflection.Emit.Label[]
  nameWithType.vb: ILGenerator.Emit(OpCode, Label())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label())
  name.vb: Emit(OpCode, Label())
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, LocalBuilder)
  nameWithType: ILGenerator.Emit(OpCode, LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 41
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, LocalBuilder local)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, local As LocalBuilder)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: local
      type: System.Reflection.Emit.LocalBuilder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SignatureHelper)
  nameWithType: ILGenerator.Emit(OpCode, SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 42
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, SignatureHelper signature)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, signature As SignatureHelper)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: signature
      type: System.Reflection.Emit.SignatureHelper
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, FieldInfo)
  nameWithType: ILGenerator.Emit(OpCode, FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 43
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, FieldInfo field)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, field As FieldInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: field
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, MethodInfo)
  nameWithType: ILGenerator.Emit(OpCode, MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 44
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, MethodInfo meth)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, meth As MethodInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: meth
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  id: Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SByte)
  nameWithType: ILGenerator.Emit(OpCode, SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 46
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public void Emit(OpCode opcode, sbyte arg)
    content.vb: Public Sub Emit(opcode As OpCode, arg As SByte)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.SByte
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  id: Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Single)
  nameWithType: ILGenerator.Emit(OpCode, Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Single)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 48
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, float arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Single)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Single
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  id: Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, String)
  nameWithType: ILGenerator.Emit(OpCode, String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 50
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, string str)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, str As String)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: str
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  id: Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Type)
  nameWithType: ILGenerator.Emit(OpCode, Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Emit
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 51
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void Emit(OpCode opcode, Type cls)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, cls As Type)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: cls
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCall(OpCode, MethodInfo, Type[])
  nameWithType: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitCall
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 53
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)
    content.vb: Public Overridable Sub EmitCall(opcode As OpCode, methodInfo As MethodInfo, optionalParameterTypes As Type())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: methodInfo
      type: System.Reflection.MethodInfo
    - id: optionalParameterTypes
      type: System.Type[]
  nameWithType.vb: ILGenerator.EmitCall(OpCode, MethodInfo, Type())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type())
  name.vb: EmitCall(OpCode, MethodInfo, Type())
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitCalli
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 55
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
    content.vb: Public Overridable Sub EmitCalli(opcode As OpCode, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), optionalParameterTypes As Type())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: optionalParameterTypes
      type: System.Type[]
  nameWithType.vb: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type(), Type())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type())
  name.vb: EmitCalli(OpCode, CallingConventions, Type, Type(), Type())
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(LocalBuilder)
  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitWriteLine
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 57
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EmitWriteLine(LocalBuilder localBuilder)
    content.vb: Public Overridable Sub EmitWriteLine(localBuilder As LocalBuilder)
    parameters:
    - id: localBuilder
      type: System.Reflection.Emit.LocalBuilder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  id: EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(FieldInfo)
  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitWriteLine
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 58
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EmitWriteLine(FieldInfo fld)
    content.vb: Public Overridable Sub EmitWriteLine(fld As FieldInfo)
    parameters:
    - id: fld
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  id: EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(String)
  nameWithType: ILGenerator.EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitWriteLine
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 59
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EmitWriteLine(string value)
    content.vb: Public Overridable Sub EmitWriteLine(value As String)
    parameters:
    - id: value
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  commentId: M:System.Reflection.Emit.ILGenerator.EndExceptionBlock
  id: EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EndExceptionBlock()
  nameWithType: ILGenerator.EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndExceptionBlock
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 60
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EndExceptionBlock()
    content.vb: Public Overridable Sub
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EndScope
  commentId: M:System.Reflection.Emit.ILGenerator.EndScope
  id: EndScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EndScope()
  nameWithType: ILGenerator.EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndScope
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 61
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void EndScope()
    content.vb: Public Overridable Sub
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  id: MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: MarkLabel(Label)
  nameWithType: ILGenerator.MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MarkLabel
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 62
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void MarkLabel(Label loc)
    content.vb: Public Overridable Sub MarkLabel(loc As Label)
    parameters:
    - id: loc
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  id: ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: ThrowException(Type)
  nameWithType: ILGenerator.ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThrowException
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 63
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void ThrowException(Type excType)
    content.vb: Public Overridable Sub ThrowException(excType As Type)
    parameters:
    - id: excType
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  id: UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: UsingNamespace(String)
  nameWithType: ILGenerator.UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UsingNamespace
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 64
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  syntax:
    content: public virtual void UsingNamespace(string usingNamespace)
    content.vb: Public Overridable Sub UsingNamespace(usingNamespace As String)
    parameters:
    - id: usingNamespace
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.Label
  commentId: T:System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.LocalBuilder
  commentId: T:System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.OpCode
  commentId: T:System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.Emit.Label[]
  name: Label[]
  nameWithType: Label[]
  fullName: System.Reflection.Emit.Label[]
  nameWithType.vb: Label()
  fullname.vb: System.Reflection.Emit.Label()
  name.vb: Label()
  spec.csharp:
  - uid: System.Reflection.Emit.Label
    name: Label
    nameWithType: Label
    fullName: System.Reflection.Emit.Label
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Emit.Label
    name: Label
    nameWithType: Label
    fullName: System.Reflection.Emit.Label
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.SignatureHelper
  commentId: T:System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.CallingConventions
  commentId: T:System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
