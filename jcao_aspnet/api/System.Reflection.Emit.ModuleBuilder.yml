items:
- uid: System.Reflection.Emit.ModuleBuilder
  commentId: T:System.Reflection.Emit.ModuleBuilder
  id: ModuleBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ModuleBuilder.Assembly
  - System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  - System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  - System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  - System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.GetHashCode
  - System.Reflection.Emit.ModuleBuilder.Name
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuleBuilder
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 145
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: 'public class ModuleBuilder : Module'
    content.vb: >-
      Public Class ModuleBuilder
          Inherits

           Module
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ModuleBuilder.Assembly
  commentId: P:System.Reflection.Emit.ModuleBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: ModuleBuilder.Assembly
  fullName: System.Reflection.Emit.ModuleBuilder.Assembly
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 148
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Assembly Assembly { get; }
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  commentId: P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: FullyQualifiedName
  nameWithType: ModuleBuilder.FullyQualifiedName
  fullName: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullyQualifiedName
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 149
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override string FullyQualifiedName { get; }
    content.vb: Public Overrides ReadOnly Property FullyQualifiedName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.Name
  commentId: P:System.Reflection.Emit.ModuleBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ModuleBuilder.Name
  fullName: System.Reflection.Emit.ModuleBuilder.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 150
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  commentId: M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  id: CreateGlobalFunctions
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: CreateGlobalFunctions()
  nameWithType: ModuleBuilder.CreateGlobalFunctions()
  fullName: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateGlobalFunctions
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 151
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public void CreateGlobalFunctions()
    content.vb: Public Sub CreateGlobalFunctions
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineEnum(String, TypeAttributes, Type)
  nameWithType: ModuleBuilder.DefineEnum(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineEnum
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 152
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType)
    content.vb: Public Function DefineEnum(name As String, visibility As TypeAttributes, underlyingType As Type) As EnumBuilder
    parameters:
    - id: name
      type: System.String
    - id: visibility
      type: System.Reflection.TypeAttributes
    - id: underlyingType
      type: System.Type
    return:
      type: System.Reflection.Emit.EnumBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineGlobalMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 153
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    return:
      type: System.Reflection.Emit.MethodBuilder
  nameWithType.vb: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type())
  name.vb: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineGlobalMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 154
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
    - id: parameterTypes
      type: System.Type[]
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
    return:
      type: System.Reflection.Emit.MethodBuilder
  nameWithType.vb: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, Type, Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineGlobalMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 155
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    return:
      type: System.Reflection.Emit.MethodBuilder
  nameWithType.vb: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type())
  name.vb: DefineGlobalMethod(String, MethodAttributes, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  id: DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineInitializedData(String, Byte[], FieldAttributes)
  nameWithType: ModuleBuilder.DefineInitializedData(String, Byte[], FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineInitializedData
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 156
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes)
    content.vb: Public Function DefineInitializedData(name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
    - id: data
      type: System.Byte[]
    - id: attributes
      type: System.Reflection.FieldAttributes
    return:
      type: System.Reflection.Emit.FieldBuilder
  nameWithType.vb: ModuleBuilder.DefineInitializedData(String, Byte(), FieldAttributes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String, System.Byte(), System.Reflection.FieldAttributes)
  name.vb: DefineInitializedData(String, Byte(), FieldAttributes)
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  id: DefineType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String)
  nameWithType: ModuleBuilder.DefineType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 157
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name)
    content.vb: Public Function DefineType(name As String) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.Emit.TypeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  id: DefineType(System.String,System.Reflection.TypeAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 158
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name, TypeAttributes attr)
    content.vb: Public Function DefineType(name As String, attr As TypeAttributes) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    return:
      type: System.Reflection.Emit.TypeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 159
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent)
    content.vb: Public Function DefineType(name As String, attr As TypeAttributes, parent As Type) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    return:
      type: System.Reflection.Emit.TypeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, Int32)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 160
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize)
    content.vb: Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, typesize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: typesize
      type: System.Int32
    return:
      type: System.Reflection.Emit.TypeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, PackingSize)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, PackingSize)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 161
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize)
    content.vb: Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, packsize As PackingSize) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: packsize
      type: System.Reflection.Emit.PackingSize
    return:
      type: System.Reflection.Emit.TypeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, PackingSize, Int32)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, PackingSize, Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 162
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize)
    content.vb: Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, packingSize As PackingSize, typesize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: packingSize
      type: System.Reflection.Emit.PackingSize
    - id: typesize
      type: System.Int32
    return:
      type: System.Reflection.Emit.TypeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, Type[])
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 163
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
    content.vb: Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder
    parameters:
    - id: name
      type: System.String
    - id: attr
      type: System.Reflection.TypeAttributes
    - id: parent
      type: System.Type
    - id: interfaces
      type: System.Type[]
    return:
      type: System.Reflection.Emit.TypeBuilder
  nameWithType.vb: ModuleBuilder.DefineType(String, TypeAttributes, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type())
  name.vb: DefineType(String, TypeAttributes, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  id: DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineUninitializedData(String, Int32, FieldAttributes)
  nameWithType: ModuleBuilder.DefineUninitializedData(String, Int32, FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineUninitializedData
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 164
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes)
    content.vb: Public Function DefineUninitializedData(name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
    - id: size
      type: System.Int32
    - id: attributes
      type: System.Reflection.FieldAttributes
    return:
      type: System.Reflection.Emit.FieldBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ModuleBuilder.Equals(Object)
  fullName: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 165
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: GetArrayMethod(Type, String, CallingConventions, Type, Type[])
  nameWithType: ModuleBuilder.GetArrayMethod(Type, String, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetArrayMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 166
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: Public Function GetArrayMethod(arrayClass As Type, methodName As String, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodInfo
    parameters:
    - id: arrayClass
      type: System.Type
    - id: methodName
      type: System.String
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
  nameWithType.vb: ModuleBuilder.GetArrayMethod(Type, String, CallingConventions, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type())
  name.vb: GetArrayMethod(Type, String, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.ModuleBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ModuleBuilder.GetHashCode()
  fullName: System.Reflection.Emit.ModuleBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 167
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType: ModuleBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 168
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
    - id: binaryAttribute
      type: System.Byte[]
  nameWithType.vb: ModuleBuilder.SetCustomAttribute(ConstructorInfo, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 169
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  commentId: T:System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder
  commentId: T:System.Reflection.Emit.EnumBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: EnumBuilder
  nameWithType: EnumBuilder
  fullName: System.Reflection.Emit.EnumBuilder
- uid: System.Reflection.MethodAttributes
  commentId: T:System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  commentId: T:System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.MethodBuilder
  commentId: T:System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.Type[][]
  name: Type[][]
  nameWithType: Type[][]
  fullName: System.Type[][]
  nameWithType.vb: Type()()
  fullname.vb: System.Type()()
  name.vb: Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.FieldAttributes
  commentId: T:System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.Emit.FieldBuilder
  commentId: T:System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.Reflection.Emit.TypeBuilder
  commentId: T:System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.PackingSize
  commentId: T:System.Reflection.Emit.PackingSize
  parent: System.Reflection.Emit
  isExternal: false
  name: PackingSize
  nameWithType: PackingSize
  fullName: System.Reflection.Emit.PackingSize
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.CustomAttributeBuilder
  commentId: T:System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
