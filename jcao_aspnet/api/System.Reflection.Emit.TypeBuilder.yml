items:
- uid: System.Reflection.Emit.TypeBuilder
  id: TypeBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)
  - System.Reflection.Emit.TypeBuilder.Assembly
  - System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  - System.Reflection.Emit.TypeBuilder.Attributes
  - System.Reflection.Emit.TypeBuilder.BaseType
  - System.Reflection.Emit.TypeBuilder.ContainsGenericParameters
  - System.Reflection.Emit.TypeBuilder.CreateTypeInfo
  - System.Reflection.Emit.TypeBuilder.DeclaringMethod
  - System.Reflection.Emit.TypeBuilder.DeclaringType
  - System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])
  - System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)
  - System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])
  - System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.TypeBuilder.DefineTypeInitializer
  - System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  - System.Reflection.Emit.TypeBuilder.FullName
  - System.Reflection.Emit.TypeBuilder.GenericParameterAttributes
  - System.Reflection.Emit.TypeBuilder.GenericParameterPosition
  - System.Reflection.Emit.TypeBuilder.GenericTypeArguments
  - System.Reflection.Emit.TypeBuilder.GetArrayRank
  - System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.TypeBuilder.GetElementType
  - System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)
  - System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints
  - System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition
  - System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)
  - System.Reflection.Emit.TypeBuilder.GUID
  - System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.Emit.TypeBuilder.IsCreated
  - System.Reflection.Emit.TypeBuilder.IsEnum
  - System.Reflection.Emit.TypeBuilder.IsGenericParameter
  - System.Reflection.Emit.TypeBuilder.IsGenericType
  - System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition
  - System.Reflection.Emit.TypeBuilder.IsSerializable
  - System.Reflection.Emit.TypeBuilder.MakeArrayType
  - System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)
  - System.Reflection.Emit.TypeBuilder.MakeByRefType
  - System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])
  - System.Reflection.Emit.TypeBuilder.MakePointerType
  - System.Reflection.Emit.TypeBuilder.Module
  - System.Reflection.Emit.TypeBuilder.Name
  - System.Reflection.Emit.TypeBuilder.Namespace
  - System.Reflection.Emit.TypeBuilder.PackingSize
  - System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.TypeBuilder.SetParent(System.Type)
  - System.Reflection.Emit.TypeBuilder.Size
  - System.Reflection.Emit.TypeBuilder.ToString
  - System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize
  name: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 37
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines and creates new instances of classes during run time.
  syntax:
    content: 'public sealed class TypeBuilder : TypeInfo, TypeInfo'
    content.vb: Public NotInheritable Class TypeBuilder Inherits TypeInfo Implements TypeInfo
  inheritance:
  - System.Object
  implements:
  - System.Reflection.TypeInfo
- uid: System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize
  id: UnspecifiedTypeSize
  parent: System.Reflection.Emit.TypeBuilder
  name: UnspecifiedTypeSize
  fullName: System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 172
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Represents that total size for the type is not specified.
  syntax:
    content: public const int UnspecifiedTypeSize
    content.vb: Public Const UnspecifiedTypeSize As Integer = Nothing
- uid: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.Emit.TypeBuilder
  name: AssemblyQualifiedName
  fullName: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1086
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the full name of this type qualified by the display name of the assembly.
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    content.vb: Public Overrides ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: Read-only. The full name of this type qualified by the display name of the assembly.
- uid: System.Reflection.Emit.TypeBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.TypeBuilder
  name: FullName
  fullName: System.Reflection.Emit.TypeBuilder.FullName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1070
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the full path of this type.
  syntax:
    content: public override string FullName { get; }
    content.vb: Public Overrides ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: Read-only. Retrieves the full path of this type.
- uid: System.Reflection.Emit.TypeBuilder.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.Emit.TypeBuilder
  name: IsGenericParameter
  fullName: System.Reflection.Emit.TypeBuilder.IsGenericParameter
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1582
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the current type is a generic type parameter.
  syntax:
    content: public override bool IsGenericParameter { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> object represents a generic type parameter; otherwise, false.
- uid: System.Reflection.Emit.TypeBuilder.Name
  id: Name
  parent: System.Reflection.Emit.TypeBuilder
  name: Name
  fullName: System.Reflection.Emit.TypeBuilder.Name
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1019
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the name of this type.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: Read-only. Retrieves the <xref href="System.String" data-throw-if-not-resolved="false"></xref> name of this type.
- uid: System.Reflection.Emit.TypeBuilder.PackingSize
  id: PackingSize
  parent: System.Reflection.Emit.TypeBuilder
  name: PackingSize
  fullName: System.Reflection.Emit.TypeBuilder.PackingSize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2453
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the packing size of this type.
  syntax:
    content: public PackingSize PackingSize { get; }
    content.vb: Public ReadOnly Property PackingSize As PackingSize
    parameters: []
    return:
      type: System.Reflection.Emit.PackingSize
      description: Read-only. Retrieves the packing size of this type.
- uid: System.Reflection.Emit.TypeBuilder.Size
  id: Size
  parent: System.Reflection.Emit.TypeBuilder
  name: Size
  fullName: System.Reflection.Emit.TypeBuilder.Size
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2448
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the total size of a type.
  syntax:
    content: public int Size { get; }
    content.vb: Public ReadOnly Property Size As Integer
    parameters: []
    return:
      type: System.Int32
      description: "Read-only. Retrieves this type’s total size."
- uid: System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)
  id: AddInterfaceImplementation(System.Type)
  parent: System.Reflection.Emit.TypeBuilder
  name: AddInterfaceImplementation(Type)
  fullName: System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2488
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds an interface that this type implements.
  syntax:
    content: public void AddInterfaceImplementation(Type interfaceType)
    content.vb: Public Sub AddInterfaceImplementation(interfaceType As Type)
    parameters:
    - id: interfaceType
      type: System.Type
      description: The interface that this type implements.
  exceptions:
  - type: System.ArgumentNullException
    description: '*interfaceType* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.CreateTypeInfo
  id: CreateTypeInfo
  parent: System.Reflection.Emit.TypeBuilder
  name: CreateTypeInfo()
  fullName: System.Reflection.Emit.TypeBuilder.CreateTypeInfo()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2236
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a <xref href="System.Reflection.TypeInfo" data-throw-if-not-resolved="false"></xref> object that represents this type.
  syntax:
    content: public TypeInfo CreateTypeInfo()
    content.vb: Public Function CreateTypeInfo As TypeInfo
    return:
      type: System.Reflection.TypeInfo
      description: An object that represents this type.
- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])
  id: DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineConstructor(MethodAttributes, CallingConventions, Type[])
  name.vb: DefineConstructor(MethodAttributes, CallingConventions, Type())
  fullName: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1819
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new constructor to the type, with the given attributes and signature.
  syntax:
    content: public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes)
    content.vb: Public Function DefineConstructor(attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type()) As ConstructorBuilder
    parameters:
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the constructor.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the constructor.
    - id: parameterTypes
      type: System.Type[]
      description: The parameter types of the constructor.
    return:
      type: System.Reflection.Emit.ConstructorBuilder
      description: The defined constructor.
  exceptions:
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])
  id: DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])
  name.vb: DefineConstructor(MethodAttributes, CallingConventions, Type(), Type()(), Type()())
  fullName: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type[], System.Type[][], System.Type[][])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type(), System.Type()(), System.Type()())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1825
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.
  syntax:
    content: public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
    content.vb: Public Function DefineConstructor(attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()()) As ConstructorBuilder
    parameters:
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the constructor.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the constructor.
    - id: parameterTypes
      type: System.Type[]
      description: The parameter types of the constructor.
    - id: requiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.
    - id: optionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.
    return:
      type: System.Reflection.Emit.ConstructorBuilder
      description: The defined constructor.
  exceptions:
  - type: System.ArgumentException
    description: The size of *requiredCustomModifiers* or *optionalCustomModifiers* does not equal the size of *parameterTypes*.
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)
  id: DefineDefaultConstructor(System.Reflection.MethodAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineDefaultConstructor(MethodAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1751
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.
  syntax:
    content: public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes)
    content.vb: Public Function DefineDefaultConstructor(attributes As MethodAttributes) As ConstructorBuilder
    parameters:
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: A MethodAttributes object representing the attributes to be applied to the constructor.
    return:
      type: System.Reflection.Emit.ConstructorBuilder
      description: Returns the constructor.
  exceptions:
  - type: System.NotSupportedException
    description: The parent type (base type) does not have a default constructor.
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)
  id: DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineEvent(String, EventAttributes, Type)
  fullName: System.Reflection.Emit.TypeBuilder.DefineEvent(System.String, System.Reflection.EventAttributes, System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2185
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new event to the type, with the given name, attributes and event type.
  syntax:
    content: public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype)
    content.vb: Public Function DefineEvent(name As String, attributes As EventAttributes, eventtype As Type) As EventBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the event. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.EventAttributes
      description: The attributes of the event.
    - id: eventtype
      type: System.Type
      description: The type of the event.
    return:
      type: System.Reflection.Emit.EventBuilder
      description: The defined event.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *eventtype* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)
  id: DefineField(System.String,System.Type,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineField(String, Type, FieldAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineField(System.String, System.Type, System.Reflection.FieldAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2015
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new field to the type, with the given name, attributes, and field type.
  syntax:
    content: public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes)
    content.vb: Public Function DefineField(fieldName As String, type As Type, attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: fieldName
      type: System.String
      description: The name of the field. *fieldName* cannot contain embedded nulls.
    - id: type
      type: System.Type
      description: The type of the field
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: The attributes of the field.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: The defined field.
  exceptions:
  - type: System.ArgumentException
    description: The length of *fieldName* is zero.-or- *type* is System.Void.-or- A total size was specified for the parent class of this field.
  - type: System.ArgumentNullException
    description: '*fieldName* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)
  id: DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineField(String, Type, Type[], Type[], FieldAttributes)
  name.vb: DefineField(String, Type, Type(), Type(), FieldAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineField(System.String, System.Type, System.Type[], System.Type[], System.Reflection.FieldAttributes)
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineField(System.String, System.Type, System.Type(), System.Type(), System.Reflection.FieldAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2020
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.
  syntax:
    content: public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes)
    content.vb: Public Function DefineField(fieldName As String, type As Type, requiredCustomModifiers As Type(), optionalCustomModifiers As Type(), attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: fieldName
      type: System.String
      description: The name of the field. *fieldName* cannot contain embedded nulls.
    - id: type
      type: System.Type
      description: The type of the field
    - id: requiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers for the field, such as <xref href="Microsoft.VisualC.IsConstModifier" data-throw-if-not-resolved="false"></xref>.
    - id: optionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers for the field, such as <xref href="Microsoft.VisualC.IsConstModifier" data-throw-if-not-resolved="false"></xref>.
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: The attributes of the field.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: The defined field.
  exceptions:
  - type: System.ArgumentException
    description: The length of *fieldName* is zero.-or- *type* is System.Void.-or- A total size was specified for the parent class of this field.
  - type: System.ArgumentNullException
    description: '*fieldName* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])
  id: DefineGenericParameters(System.String[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineGenericParameters(String[])
  name.vb: DefineGenericParameters(String())
  fullName: System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1546
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder" data-throw-if-not-resolved="false"></xref> objects that can be used to set their constraints.
  syntax:
    content: public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
    content.vb: Public Function DefineGenericParameters(ParamArray names As String()) As GenericTypeParameterBuilder()
    parameters:
    - id: names
      type: System.String[]
      description: An array of names for the generic type parameters.
    return:
      type: System.Reflection.Emit.GenericTypeParameterBuilder[]
      description: An array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder" data-throw-if-not-resolved="false"></xref> objects that can be used to define the constraints of the generic type parameters for the current type.
  exceptions:
  - type: System.InvalidOperationException
    description: Generic type parameters have already been defined for this type.
  - type: System.ArgumentNullException
    description: '*names* is null.-or-An element of *names* is null.'
  - type: System.ArgumentException
    description: '*names* is an empty array.'
- uid: System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  id: DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineInitializedData(String, Byte[], FieldAttributes)
  name.vb: DefineInitializedData(String, Byte(), FieldAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String, System.Byte(), System.Reflection.FieldAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2051
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines initialized data field in the .sdata section of the portable executable (PE) file.
  syntax:
    content: public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes)
    content.vb: Public Function DefineInitializedData(name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
      description: The name used to refer to the data. *name* cannot contain embedded nulls.
    - id: data
      type: System.Byte[]
      description: The blob of data.
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: The attributes for the field.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: A field to reference the data.
  exceptions:
  - type: System.ArgumentException
    description: Length of *name* is zero.-or- The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.
  - type: System.ArgumentNullException
    description: '*name* or *data* is null.'
  - type: System.InvalidOperationException
    description: <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref> has been previously called.
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)
  id: DefineMethod(System.String,System.Reflection.MethodAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineMethod(String, MethodAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1632
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new method to the type, with the specified name and method attributes.
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes)
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the method. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: A <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> representing the newly defined method.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)
  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineMethod(String, MethodAttributes, CallingConventions)
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1639
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new method to the type, with the specified name, method attributes, and calling convention.
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention)
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the method. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the method.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: A <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> representing the newly defined method.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.-or- The type of the parent of this method is an interface and this method is not virtual (Overridable in Visual Basic).
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  name.vb: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type())
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1646
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the method. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the method.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: A <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> representing the newly defined method.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  name.vb: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1654
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the method. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: returnTypeRequiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify null.
    - id: returnTypeOptionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify null.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the method.
    - id: parameterTypeRequiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.
    - id: parameterTypeOptionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: A <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> object representing the newly added method.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). -or-The size of *parameterTypeRequiredCustomModifiers* or *parameterTypeOptionalCustomModifiers* does not equal the size of *parameterTypes*.
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineMethod(String, MethodAttributes, Type, Type[])
  name.vb: DefineMethod(String, MethodAttributes, Type, Type())
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1625
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new method to the type, with the specified name, method attributes, and method signature.
  syntax:
    content: public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineMethod(name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the method. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the method.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: The defined method.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic).
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  id: DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineMethodOverride(MethodInfo, MethodInfo)
  fullName: System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1591
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Specifies a given method body that implements a given method declaration, potentially with a different name.
  syntax:
    content: public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration)
    content.vb: Public Sub DefineMethodOverride(methodInfoBody As MethodInfo, methodInfoDeclaration As MethodInfo)
    parameters:
    - id: methodInfoBody
      type: System.Reflection.MethodInfo
      description: The method body to be used. This should be a MethodBuilder object.
    - id: methodInfoDeclaration
      type: System.Reflection.MethodInfo
      description: The method whose declaration is to be used.
  exceptions:
  - type: System.ArgumentException
    description: '*methodInfoBody* does not belong to this class.'
  - type: System.ArgumentNullException
    description: '*methodInfoBody* or *methodInfoDeclaration* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or- The declaring type of *methodInfoBody* is not the type represented by this <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)
  id: DefineNestedType(System.String)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String)
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1926
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name.
  syntax:
    content: public TypeBuilder DefineNestedType(string name)
    content.vb: Public Function DefineNestedType(name As String) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded nulls.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
  exceptions:
  - type: System.ArgumentException
    description: Length of *name* is zero or greater than 1023. -or-This operation would create a type with a duplicate <xref href="System.Reflection.Emit.TypeBuilder.FullName" data-throw-if-not-resolved="false"></xref> in the current assembly.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)
  id: DefineNestedType(System.String,System.Reflection.TypeAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String, TypeAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1958
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name and attributes.
  syntax:
    content: public TypeBuilder DefineNestedType(string name, TypeAttributes attr)
    content.vb: Public Function DefineNestedType(name As String, attr As TypeAttributes) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
  exceptions:
  - type: System.ArgumentException
    description: The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of *name* is zero or greater than 1023. -or-This operation would create a type with a duplicate <xref href="System.Reflection.Emit.TypeBuilder.FullName" data-throw-if-not-resolved="false"></xref> in the current assembly.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1949
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name, attributes, and the type that it extends.
  syntax:
    content: public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent)
    content.vb: Public Function DefineNestedType(name As String, attr As TypeAttributes, parent As Type) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the type.
    - id: parent
      type: System.Type
      description: The type that the nested type extends.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
  exceptions:
  - type: System.ArgumentException
    description: The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of *name* is zero or greater than 1023. -or-This operation would create a type with a duplicate <xref href="System.Reflection.Emit.TypeBuilder.FullName" data-throw-if-not-resolved="false"></xref> in the current assembly.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String, TypeAttributes, Type, Int32)
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1968
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.
  syntax:
    content: public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize)
    content.vb: Public Function DefineNestedType(name As String, attr As TypeAttributes, parent As Type, typeSize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the type.
    - id: parent
      type: System.Type
      description: The type that the nested type extends.
    - id: typeSize
      type: System.Int32
      description: The total size of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
  exceptions:
  - type: System.ArgumentException
    description: The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of *name* is zero or greater than 1023. -or-This operation would create a type with a duplicate <xref href="System.Reflection.Emit.TypeBuilder.FullName" data-throw-if-not-resolved="false"></xref> in the current assembly.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String, TypeAttributes, Type, PackingSize)
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1981
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name, attributes, the type that it extends, and the packing size.
  syntax:
    content: public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize)
    content.vb: Public Function DefineNestedType(name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the type.
    - id: parent
      type: System.Type
      description: The type that the nested type extends.
    - id: packSize
      type: System.Reflection.Emit.PackingSize
      description: The packing size of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
  exceptions:
  - type: System.ArgumentException
    description: The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of *name* is zero or greater than 1023. -or-This operation would create a type with a duplicate <xref href="System.Reflection.Emit.TypeBuilder.FullName" data-throw-if-not-resolved="false"></xref> in the current assembly.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1994
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name, attributes, size, and the type that it extends.
  syntax:
    content: public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize, int typeSize)
    content.vb: Public Function DefineNestedType(name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize, typeSize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded null values.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the type.
    - id: parent
      type: System.Type
      description: The type that the nested type extends.
    - id: packSize
      type: System.Reflection.Emit.PackingSize
      description: The packing size of the type.
    - id: typeSize
      type: System.Int32
      description: The total size of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineNestedType(String, TypeAttributes, Type, Type[])
  name.vb: DefineNestedType(String, TypeAttributes, Type, Type())
  fullName: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1935
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.
  syntax:
    content: public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
    content.vb: Public Function DefineNestedType(name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: The short name of the type. *name* cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the type.
    - id: parent
      type: System.Type
      description: The type that the nested type extends.
    - id: interfaces
      type: System.Type[]
      description: The interfaces that the nested type implements.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: The defined nested type.
  exceptions:
  - type: System.ArgumentException
    description: The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of *name* is zero or greater than 1023. -or-This operation would create a type with a duplicate <xref href="System.Reflection.Emit.TypeBuilder.FullName" data-throw-if-not-resolved="false"></xref> in the current assembly.
  - type: System.ArgumentNullException
    description: '*name* is null.-or-An element of the *interfaces* array is null.'
- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])
  name.vb: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type())
  fullName: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Reflection.CallingConventions, System.Type, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2107
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new property to the type, with the given name, attributes, calling convention, and property signature.
  syntax:
    content: public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineProperty(name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As PropertyBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the property. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.PropertyAttributes
      description: The attributes of the property.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the property accessors.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the property.
    return:
      type: System.Reflection.Emit.PropertyBuilder
      description: The defined property.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.
  - type: System.ArgumentNullException
    description: '*name* is null. -or- Any of the elements of the *parameterTypes* array is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  name.vb: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
  fullName: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2123
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.
  syntax:
    content: public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
    content.vb: Public Function DefineProperty(name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the property. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.PropertyAttributes
      description: The attributes of the property.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the property accessors.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: returnTypeRequiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify null.
    - id: returnTypeOptionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify null.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the property.
    - id: parameterTypeRequiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.
    - id: parameterTypeOptionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.
    return:
      type: System.Reflection.Emit.PropertyBuilder
      description: The defined property.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.
  - type: System.ArgumentNullException
    description: '*name* is null. -or- Any of the elements of the *parameterTypes* array is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])
  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineProperty(String, PropertyAttributes, Type, Type[])
  name.vb: DefineProperty(String, PropertyAttributes, Type, Type())
  fullName: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2102
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new property to the type, with the given name and property signature.
  syntax:
    content: public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineProperty(name As String, attributes As PropertyAttributes, returnType As Type, parameterTypes As Type()) As PropertyBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the property. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.PropertyAttributes
      description: The attributes of the property.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the property.
    return:
      type: System.Reflection.Emit.PropertyBuilder
      description: The defined property.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.
  - type: System.ArgumentNullException
    description: '*name* is null. -or- Any of the elements of the *parameterTypes* array is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])
  name.vb: DefineProperty(String, PropertyAttributes, Type, Type(), Type(), Type(), Type()(), Type()())
  fullName: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  fullName.vb: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2114
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds a new property to the type, with the given name, property signature, and custom modifiers.
  syntax:
    content: public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
    content.vb: Public Function DefineProperty(name As String, attributes As PropertyAttributes, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder
    parameters:
    - id: name
      type: System.String
      description: The name of the property. *name* cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.PropertyAttributes
      description: The attributes of the property.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: returnTypeRequiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify null.
    - id: returnTypeOptionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify null.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the property.
    - id: parameterTypeRequiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.
    - id: parameterTypeOptionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.
    return:
      type: System.Reflection.Emit.PropertyBuilder
      description: The defined property.
  exceptions:
  - type: System.ArgumentException
    description: The length of *name* is zero.
  - type: System.ArgumentNullException
    description: '*name* is null-or- Any of the elements of the *parameterTypes* array is null'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineTypeInitializer
  id: DefineTypeInitializer
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineTypeInitializer()
  fullName: System.Reflection.Emit.TypeBuilder.DefineTypeInitializer()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1727
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines the initializer for this type.
  syntax:
    content: public ConstructorBuilder DefineTypeInitializer()
    content.vb: Public Function DefineTypeInitializer As ConstructorBuilder
    return:
      type: System.Reflection.Emit.ConstructorBuilder
      description: Returns a type initializer.
  exceptions:
  - type: System.InvalidOperationException
    description: The containing type has been previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  id: DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.TypeBuilder
  name: DefineUninitializedData(String, Int32, FieldAttributes)
  fullName: System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2078
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.
  syntax:
    content: public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes)
    content.vb: Public Function DefineUninitializedData(name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
      description: The name used to refer to the data. *name* cannot contain embedded nulls.
    - id: size
      type: System.Int32
      description: The size of the data field.
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: The attributes for the field.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: A field to reference the data.
  exceptions:
  - type: System.ArgumentException
    description: Length of *name* is zero.-or- *size* is less than or equal to zero, or greater than or equal to 0x003f0000.
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.
- uid: System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)
  id: GetConstructor(System.Type,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.TypeBuilder
  name: GetConstructor(Type, ConstructorInfo)
  fullName: System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type, System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 127
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.
  syntax:
    content: public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor)
    content.vb: Public Shared Function GetConstructor(type As Type, constructor As ConstructorInfo) As ConstructorInfo
    parameters:
    - id: type
      type: System.Type
      description: The constructed generic type whose constructor is returned.
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: A constructor on the generic type definition of *type*, which specifies which constructor of *type* to return.
    return:
      type: System.Reflection.ConstructorInfo
      description: A <xref href="System.Reflection.ConstructorInfo" data-throw-if-not-resolved="false"></xref> object that represents the constructor of *type* corresponding to *constructor*, which specifies a constructor belonging to the generic type definition of *type*.
  exceptions:
  - type: System.ArgumentException
    description: '*type* does not represent a generic type. -or-*type* is not of type <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref>.-or-The declaring type of *constructor* is not a generic type definition. -or-The declaring type of *constructor* is not the generic type definition of *type*.'
- uid: System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)
  id: GetField(System.Type,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.TypeBuilder
  name: GetField(Type, FieldInfo)
  fullName: System.Reflection.Emit.TypeBuilder.GetField(System.Type, System.Reflection.FieldInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 148
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.
  syntax:
    content: public static FieldInfo GetField(Type type, FieldInfo field)
    content.vb: Public Shared Function GetField(type As Type, field As FieldInfo) As FieldInfo
    parameters:
    - id: type
      type: System.Type
      description: The constructed generic type whose field is returned.
    - id: field
      type: System.Reflection.FieldInfo
      description: A field on the generic type definition of *type*, which specifies which field of *type* to return.
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo" data-throw-if-not-resolved="false"></xref> object that represents the field of *type* corresponding to *field*, which specifies a field belonging to the generic type definition of *type*.
  exceptions:
  - type: System.ArgumentException
    description: '*type* does not represent a generic type. -or-*type* is not of type <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref>.-or-The declaring type of *field* is not a generic type definition. -or-The declaring type of *field* is not the generic type definition of *type*.'
- uid: System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.Emit.TypeBuilder
  name: GetGenericTypeDefinition()
  fullName: System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1587
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents a generic type definition from which the current type can be obtained.
  syntax:
    content: public override Type GetGenericTypeDefinition()
    content.vb: Public Overrides Function GetGenericTypeDefinition As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing a generic type definition from which the current type can be obtained.
  exceptions:
  - type: System.InvalidOperationException
    description: The current type is not generic. That is, <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> returns false.
- uid: System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)
  id: GetMethod(System.Type,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.TypeBuilder
  name: GetMethod(Type, MethodInfo)
  fullName: System.Reflection.Emit.TypeBuilder.GetMethod(System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 94
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.
  syntax:
    content: public static MethodInfo GetMethod(Type type, MethodInfo method)
    content.vb: Public Shared Function GetMethod(type As Type, method As MethodInfo) As MethodInfo
    parameters:
    - id: type
      type: System.Type
      description: The constructed generic type whose method is returned.
    - id: method
      type: System.Reflection.MethodInfo
      description: A method on the generic type definition of *type*, which specifies which method of *type* to return.
    return:
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo" data-throw-if-not-resolved="false"></xref> object that represents the method of *type* corresponding to *method*, which specifies a method belonging to the generic type definition of *type*.
  exceptions:
  - type: System.ArgumentException
    description: '*method* is a generic method that is not a generic method definition.-or-*type* does not represent a generic type.-or-*type* is not of type <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref>.-or-The declaring type of *method* is not a generic type definition. -or-The declaring type of *method* is not the generic type definition of *type*.'
- uid: System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.TypeBuilder
  name: IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 43
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether a specified <xref href="System.Reflection.TypeInfo" data-throw-if-not-resolved="false"></xref> object can be assigned to this object.
  syntax:
    content: public override bool IsAssignableFrom(TypeInfo typeInfo)
    content.vb: Public Overrides Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The object to test.
    return:
      type: System.Boolean
      description: true if *typeInfo* can be assigned to this object; otherwise, false.
- uid: System.Reflection.Emit.TypeBuilder.IsCreated
  id: IsCreated
  parent: System.Reflection.Emit.TypeBuilder
  name: IsCreated()
  fullName: System.Reflection.Emit.TypeBuilder.IsCreated()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 909
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a value that indicates whether the current dynamic type has been created.
  syntax:
    content: public bool IsCreated()
    content.vb: Public Function IsCreated As Boolean
    return:
      type: System.Boolean
      description: true if the <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref> method has been called; otherwise, false.
- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.Emit.TypeBuilder
  name: MakeArrayType()
  fullName: System.Reflection.Emit.TypeBuilder.MakeArrayType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1452
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents a one-dimensional array of the current type, with a lower bound of zero.
  syntax:
    content: public override Type MakeArrayType()
    content.vb: Public Overrides Function MakeArrayType As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.
- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.TypeBuilder
  name: MakeArrayType(Int32)
  fullName: System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1457
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents an array of the current type, with the specified number of dimensions.
  syntax:
    content: public override Type MakeArrayType(int rank)
    content.vb: Public Overrides Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
      description: The number of dimensions for the array.
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents a one-dimensional array of the current type.
  exceptions:
  - type: System.IndexOutOfRangeException
    description: '*rank* is not a valid array dimension.'
- uid: System.Reflection.Emit.TypeBuilder.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.Emit.TypeBuilder
  name: MakeByRefType()
  fullName: System.Reflection.Emit.TypeBuilder.MakeByRefType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1447
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).
  syntax:
    content: public override Type MakeByRefType()
    content.vb: Public Overrides Function MakeByRefType As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).
- uid: System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.Emit.TypeBuilder
  name: MakeGenericType(Type[])
  name.vb: MakeGenericType(Type())
  fullName: System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1570
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.
  syntax:
    content: public override Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public Overrides Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of types to be substituted for the type parameters of the current generic type definition.
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> representing the constructed type formed by substituting the elements of *typeArguments* for the type parameters of the current generic type.
  exceptions:
  - type: System.InvalidOperationException
    description: The current type does not represent the definition of a generic type. That is, <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> returns false.
  - type: System.ArgumentNullException
    description: '*typeArguments* is null.-or- Any element of *typeArguments* is null.'
  - type: System.ArgumentException
    description: The <xref href="System.Type.Module" data-throw-if-not-resolved="false"></xref> property of any element of *typeArguments* is null. -or- The <xref href="System.Reflection.Module.Assembly" data-throw-if-not-resolved="false"></xref> property of the module of any element of *typeArguments* is null.
- uid: System.Reflection.Emit.TypeBuilder.MakePointerType
  id: MakePointerType
  parent: System.Reflection.Emit.TypeBuilder
  name: MakePointerType()
  fullName: System.Reflection.Emit.TypeBuilder.MakePointerType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1442
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the type of an unmanaged pointer to the current type.
  syntax:
    content: public override Type MakePointerType()
    content.vb: Public Overrides Function MakePointerType As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the type of an unmanaged pointer to the current type.
- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.TypeBuilder
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
  fullName: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  fullName.vb: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2565
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a specified custom attribute blob.
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte blob representing the attributes.
  exceptions:
  - type: System.ArgumentNullException
    description: '*con* or *binaryAttribute* is null.'
  - type: System.InvalidOperationException
    description: For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.TypeBuilder
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2583
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Set a custom attribute using a custom attribute builder.
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class to define the custom attribute.
  exceptions:
  - type: System.ArgumentNullException
    description: '*customBuilder* is null.'
  - type: System.InvalidOperationException
    description: For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
- uid: System.Reflection.Emit.TypeBuilder.SetParent(System.Type)
  id: SetParent(System.Type)
  parent: System.Reflection.Emit.TypeBuilder
  name: SetParent(Type)
  fullName: System.Reflection.Emit.TypeBuilder.SetParent(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 2458
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the base type of the type currently under construction.
  syntax:
    content: public void SetParent(Type parent)
    content.vb: Public Sub SetParent(parent As Type)
    parameters:
    - id: parent
      type: System.Type
      description: The new base type.
  exceptions:
  - type: System.InvalidOperationException
    description: The type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-*parent* is null, and the current instance represents an interface whose attributes do not include <xref href="System.Reflection.TypeAttributes.Abstract" data-throw-if-not-resolved="false"></xref>.-or-For the current dynamic type, the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericType" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> property is false.
  - type: System.ArgumentException
    description: '*parent* is an interface. This exception condition is new in the .NET Framework version 2.0.'
- uid: System.Reflection.Emit.TypeBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.TypeBuilder
  name: ToString()
  fullName: System.Reflection.Emit.TypeBuilder.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 999
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the name of the type excluding the namespace.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: Read-only. The name of the type excluding the namespace.
- uid: System.Reflection.Emit.TypeBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.TypeBuilder
  name: Attributes
  fullName: System.Reflection.Emit.TypeBuilder.Attributes
  type: Property
  source:
    remote: &o1
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 20
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override TypeAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
- uid: System.Reflection.Emit.TypeBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.TypeBuilder
  name: Assembly
  fullName: System.Reflection.Emit.TypeBuilder.Assembly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1059
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the dynamic assembly that contains this type definition.
  syntax:
    content: public override Assembly Assembly { get; }
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: Assembly
      description: Read-only. Retrieves the dynamic assembly that contains this type definition.
- uid: System.Reflection.Emit.TypeBuilder.BaseType
  id: BaseType
  parent: System.Reflection.Emit.TypeBuilder
  name: BaseType
  fullName: System.Reflection.Emit.TypeBuilder.BaseType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1094
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the base type of this type.
  syntax:
    content: public override Type BaseType { get; }
    content.vb: Public Overrides ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: Type
      description: Read-only. Retrieves the base type of this type.
- uid: System.Reflection.Emit.TypeBuilder.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.Emit.TypeBuilder
  name: DeclaringMethod
  fullName: System.Reflection.Emit.TypeBuilder.DeclaringMethod
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1586
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the method that declared the current generic type parameter.
  syntax:
    content: public override MethodBase DeclaringMethod { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: MethodBase
      description: A <xref href="System.Reflection.MethodBase" data-throw-if-not-resolved="false"></xref> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, null.
- uid: System.Reflection.Emit.TypeBuilder.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.Emit.TypeBuilder
  name: GenericParameterAttributes
  fullName: System.Reflection.Emit.TypeBuilder.GenericParameterAttributes
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1532
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates the covariance and special constraints of the current generic type parameter.
  syntax:
    content: public override GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: GenericParameterAttributes
      description: A bitwise combination of <xref href="System.Reflection.GenericParameterAttributes" data-throw-if-not-resolved="false"></xref> values that describes the covariance and special constraints of the current generic type parameter.
- uid: System.Reflection.Emit.TypeBuilder.Module
  id: Module
  parent: System.Reflection.Emit.TypeBuilder
  name: Module
  fullName: System.Reflection.Emit.TypeBuilder.Module
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1024
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the dynamic module that contains this type definition.
  syntax:
    content: public override Module Module { get; }
    content.vb: Public Overrides ReadOnly Property Module As
    parameters: []
    return:
      type: Module
      description: Read-only. Retrieves the dynamic module that contains this type definition.
- uid: System.Reflection.Emit.TypeBuilder.GetArrayRank
  id: GetArrayRank
  parent: System.Reflection.Emit.TypeBuilder
  name: GetArrayRank()
  fullName: System.Reflection.Emit.TypeBuilder.GetArrayRank()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 27
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override int GetArrayRank()
    content.vb: Public Overrides Function GetArrayRank As Integer
    return:
      type: System.Int32
- uid: System.Reflection.Emit.TypeBuilder.GetElementType
  id: GetElementType
  parent: System.Reflection.Emit.TypeBuilder
  name: GetElementType()
  fullName: System.Reflection.Emit.TypeBuilder.GetElementType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1351
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Calling this method always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override Type GetElementType()
    content.vb: Public Overrides Function GetElementType As Type
    return:
      type: Type
      description: This method is not supported. No value is returned.
  exceptions:
  - type: System.NotSupportedException
    description: This method is not supported.
- uid: System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Reflection.Emit.TypeBuilder
  name: GetGenericParameterConstraints()
  fullName: System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 29
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GetGenericParameterConstraints()
    content.vb: Public Overrides Function GetGenericParameterConstraints As Type()
    return:
      type: System.Type[]
- uid: System.Reflection.Emit.TypeBuilder.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Reflection.Emit.TypeBuilder
  name: GenericTypeArguments
  fullName: System.Reflection.Emit.TypeBuilder.GenericTypeArguments
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 30
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GenericTypeArguments { get; }
    content.vb: Public Overrides ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
- uid: System.Reflection.Emit.TypeBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.TypeBuilder
  name: ContainsGenericParameters
  fullName: System.Reflection.Emit.TypeBuilder.ContainsGenericParameters
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 31
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    content.vb: Public Overrides ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.Emit.TypeBuilder.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.Emit.TypeBuilder
  name: GenericParameterPosition
  fullName: System.Reflection.Emit.TypeBuilder.GenericParameterPosition
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1585
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.
  syntax:
    content: public override int GenericParameterPosition { get; }
    content.vb: Public Overrides ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
      description: If the current <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.
- uid: System.Reflection.Emit.TypeBuilder.GUID
  id: GUID
  parent: System.Reflection.Emit.TypeBuilder
  name: GUID
  fullName: System.Reflection.Emit.TypeBuilder.GUID
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1037
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the GUID of this type.
  syntax:
    content: public override Guid GUID { get; }
    content.vb: Public Overrides ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: Guid
      description: Read-only. Retrieves the GUID of this type
  exceptions:
  - type: System.NotSupportedException
    description: This method is not currently supported for incomplete types.
- uid: System.Reflection.Emit.TypeBuilder.IsEnum
  id: IsEnum
  parent: System.Reflection.Emit.TypeBuilder
  name: IsEnum
  fullName: System.Reflection.Emit.TypeBuilder.IsEnum
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 34
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsEnum { get; }
    content.vb: Public Overrides ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.Emit.TypeBuilder.IsGenericType
  id: IsGenericType
  parent: System.Reflection.Emit.TypeBuilder
  name: IsGenericType
  fullName: System.Reflection.Emit.TypeBuilder.IsGenericType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1581
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the current type is a generic type.
  syntax:
    content: public override bool IsGenericType { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the type represented by the current <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> object is generic; otherwise, false.
- uid: System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.Emit.TypeBuilder
  name: IsGenericTypeDefinition
  fullName: System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1580
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the current <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> represents a generic type definition from which other generic types can be constructed.
  syntax:
    content: public override bool IsGenericTypeDefinition { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> object represents a generic type definition; otherwise, false.
- uid: System.Reflection.Emit.TypeBuilder.IsSerializable
  id: IsSerializable
  parent: System.Reflection.Emit.TypeBuilder
  name: IsSerializable
  fullName: System.Reflection.Emit.TypeBuilder.IsSerializable
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 37
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsSerializable { get; }
    content.vb: Public Overrides ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.Emit.TypeBuilder.Namespace
  id: Namespace
  parent: System.Reflection.Emit.TypeBuilder
  name: Namespace
  fullName: System.Reflection.Emit.TypeBuilder.Namespace
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1081
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the namespace where this TypeBuilder is defined.
  syntax:
    content: public override string Namespace { get; }
    content.vb: Public Overrides ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: Read-only. Retrieves the namespace where this TypeBuilder is defined.
- uid: System.Reflection.Emit.TypeBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.TypeBuilder
  name: DeclaringType
  fullName: System.Reflection.Emit.TypeBuilder.DeclaringType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Emit/TypeBuilder.cs
    startLine: 1007
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the type that declared this type.
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: Type
      description: Read-only. The type that declared this type.
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.PackingSize
  parent: System.Reflection.Emit
  isExternal: false
  name: PackingSize
  fullName: System.Reflection.Emit.PackingSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type[]
  isExternal: false
  name: Type[]
  name.vb: Type()
  fullName: System.Type[]
  fullName.vb: System.Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.ConstructorBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ConstructorBuilder
  fullName: System.Reflection.Emit.ConstructorBuilder
- uid: System.Type[][]
  isExternal: true
  name: Type[][]
  name.vb: Type()()
  fullName: System.Type[][]
  fullName.vb: System.Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ()
    fullName: ()
- uid: System.Reflection.EventAttributes
  parent: System.Reflection
  isExternal: false
  name: EventAttributes
  fullName: System.Reflection.EventAttributes
- uid: System.Reflection.Emit.EventBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: EventBuilder
  fullName: System.Reflection.Emit.EventBuilder
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.String[]
  isExternal: false
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.GenericTypeParameterBuilder[]
  isExternal: false
  name: GenericTypeParameterBuilder[]
  name.vb: GenericTypeParameterBuilder()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder[]
  fullName.vb: System.Reflection.Emit.GenericTypeParameterBuilder()
  spec.csharp:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: ()
    fullName: ()
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Reflection.PropertyAttributes
  parent: System.Reflection
  isExternal: false
  name: PropertyAttributes
  fullName: System.Reflection.PropertyAttributes
- uid: System.Reflection.Emit.PropertyBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: PropertyBuilder
  fullName: System.Reflection.Emit.PropertyBuilder
- uid: System.Reflection.ConstructorInfo
  isExternal: false
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: Assembly
  isExternal: true
  name: Assembly
  fullName: Assembly
- uid: Type
  isExternal: true
  name: Type
  fullName: Type
- uid: MethodBase
  isExternal: true
  name: MethodBase
  fullName: MethodBase
- uid: GenericParameterAttributes
  isExternal: true
  name: GenericParameterAttributes
  fullName: GenericParameterAttributes
- uid: Module
  isExternal: true
  name: Module
  fullName: Module
- uid: Guid
  isExternal: true
  name: Guid
  fullName: Guid
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
