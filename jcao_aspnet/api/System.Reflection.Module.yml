items:
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  id: Module
  parent: System.Reflection
  children:
  - System.Reflection.Module.Assembly
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.Equals(System.Object)
  - System.Reflection.Module.FullyQualifiedName
  - System.Reflection.Module.GetHashCode
  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Module.Name
  - System.Reflection.Module.ToString
  langs:
  - csharp
  - vb
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Module
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 200
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: 'public abstract class Module : object'
    content.vb: >-
      Public MustInherit Class Module
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.Module.Assembly
  commentId: P:System.Reflection.Module.Assembly
  id: Assembly
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: Module.Assembly
  fullName: System.Reflection.Module.Assembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 203
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Assembly Assembly { get; }
    content.vb: Public Overridable ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.CustomAttributes
  commentId: P:System.Reflection.Module.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: CustomAttributes
  nameWithType: Module.CustomAttributes
  fullName: System.Reflection.Module.CustomAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAttributes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 204
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As Collections.Generic.IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.FullyQualifiedName
  commentId: P:System.Reflection.Module.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: FullyQualifiedName
  nameWithType: Module.FullyQualifiedName
  fullName: System.Reflection.Module.FullyQualifiedName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullyQualifiedName
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 205
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual string FullyQualifiedName { get; }
    content.vb: Public Overridable ReadOnly Property FullyQualifiedName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.Name
  commentId: P:System.Reflection.Module.Name
  id: Name
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Module.Name
  fullName: System.Reflection.Module.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 206
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Module.Equals(System.Object)
  commentId: M:System.Reflection.Module.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Module.Equals(Object)
  fullName: System.Reflection.Module.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 207
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Module.GetHashCode
  commentId: M:System.Reflection.Module.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Module.GetHashCode()
  fullName: System.Reflection.Module.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 208
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  nameWithType: Module.GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 209
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type GetType(string className, bool throwOnError, bool ignoreCase)
    content.vb: Public Overridable Function GetType(className As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: className
      type: System.String
    - id: throwOnError
      type: System.Boolean
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Module.ToString
  commentId: M:System.Reflection.Module.ToString
  id: ToString
  parent: System.Reflection.Module
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Module.ToString()
  fullName: System.Reflection.Module.ToString()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 210
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeData>
  nameWithType: Collections.Generic.IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  nameWithType.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
