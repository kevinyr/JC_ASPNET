items:
- uid: System.Reflection.RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
  id: RuntimeReflectionExtensions
  parent: System.Reflection
  children:
  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  langs:
  - csharp
  - vb
  name: RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  type: Class
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeReflectionExtensions
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 57
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: 'public class RuntimeReflectionExtensions : object'
    content.vb: >-
      Public Class RuntimeReflectionExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  id: GetMethodInfo(System.Delegate)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetMethodInfo(Delegate)
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethodInfo
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 59
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo GetMethodInfo(this Delegate del)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethodInfo(del As  Delegate) As MethodInfo
    parameters:
    - id: del
      type: System.Delegate
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  id: GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeBaseDefinition(MethodInfo)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeBaseDefinition
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 60
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo GetRuntimeBaseDefinition(this MethodInfo method)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeBaseDefinition(method As MethodInfo) As MethodInfo
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  id: GetRuntimeEvent(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeEvent(Type, String)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvent(Type, String)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeEvent
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 61
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static EventInfo GetRuntimeEvent(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeEvent(type As Type, name As String) As EventInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.EventInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  id: GetRuntimeEvents(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeEvents(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvents(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeEvents
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 62
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static Collections.Generic.IEnumerable<EventInfo> GetRuntimeEvents(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeEvents(type As Type) As Collections.Generic.IEnumerable(Of EventInfo)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  id: GetRuntimeField(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeField(Type, String)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeField(Type, String)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeField
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 63
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static FieldInfo GetRuntimeField(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeField(type As Type, name As String) As FieldInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  id: GetRuntimeFields(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeFields(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeFields(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeFields
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 64
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static Collections.Generic.IEnumerable<FieldInfo> GetRuntimeFields(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeFields(type As Type) As Collections.Generic.IEnumerable(Of FieldInfo)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  id: GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeInterfaceMap(TypeInfo, Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeInterfaceMap
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 65
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static InterfaceMapping GetRuntimeInterfaceMap(this TypeInfo typeInfo, Type interfaceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeInterfaceMap(typeInfo As TypeInfo, interfaceType As Type) As InterfaceMapping
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
    - id: interfaceType
      type: System.Type
    return:
      type: System.Reflection.InterfaceMapping
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  id: GetRuntimeMethod(System.Type,System.String,System.Type[])
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeMethod(Type, String, Type[])
  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type[])
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type, System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeMethod
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 66
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo GetRuntimeMethod(this Type type, string name, Type[] parameters)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeMethod(type As Type, name As String, parameters As Type()) As MethodInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: parameters
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
  nameWithType.vb: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type, System.String, System.Type())
  name.vb: GetRuntimeMethod(Type, String, Type())
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  id: GetRuntimeMethods(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeMethods(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethods(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeMethods
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 67
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static Collections.Generic.IEnumerable<MethodInfo> GetRuntimeMethods(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeMethods(type As Type) As Collections.Generic.IEnumerable(Of MethodInfo)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  id: GetRuntimeProperties(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeProperties(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperties(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeProperties
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 68
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static Collections.Generic.IEnumerable<PropertyInfo> GetRuntimeProperties(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeProperties(type As Type) As Collections.Generic.IEnumerable(Of PropertyInfo)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  id: GetRuntimeProperty(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeProperty(Type, String)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperty(Type, String)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeProperty
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 69
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo GetRuntimeProperty(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeProperty(type As Type, name As String) As PropertyInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Delegate
  commentId: T:System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.EventInfo
  commentId: T:System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<EventInfo>
  nameWithType: Collections.Generic.IEnumerable<EventInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of EventInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)
  name.vb: Collections.Generic.IEnumerable(Of EventInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<FieldInfo>
  nameWithType: Collections.Generic.IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of FieldInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)
  name.vb: Collections.Generic.IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.InterfaceMapping
  commentId: T:System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: false
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MethodInfo>
  nameWithType: Collections.Generic.IEnumerable<MethodInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of MethodInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)
  name.vb: Collections.Generic.IEnumerable(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<PropertyInfo>
  nameWithType: Collections.Generic.IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of PropertyInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: Collections.Generic.IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
