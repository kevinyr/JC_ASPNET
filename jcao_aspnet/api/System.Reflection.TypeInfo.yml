items:
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  id: TypeInfo
  parent: System.Reflection
  children:
  - System.Reflection.TypeInfo.Assembly
  - System.Reflection.TypeInfo.AssemblyQualifiedName
  - System.Reflection.TypeInfo.AsType
  - System.Reflection.TypeInfo.Attributes
  - System.Reflection.TypeInfo.BaseType
  - System.Reflection.TypeInfo.ContainsGenericParameters
  - System.Reflection.TypeInfo.DeclaredConstructors
  - System.Reflection.TypeInfo.DeclaredEvents
  - System.Reflection.TypeInfo.DeclaredFields
  - System.Reflection.TypeInfo.DeclaredMembers
  - System.Reflection.TypeInfo.DeclaredMethods
  - System.Reflection.TypeInfo.DeclaredNestedTypes
  - System.Reflection.TypeInfo.DeclaredProperties
  - System.Reflection.TypeInfo.DeclaringMethod
  - System.Reflection.TypeInfo.FullName
  - System.Reflection.TypeInfo.GenericParameterAttributes
  - System.Reflection.TypeInfo.GenericParameterPosition
  - System.Reflection.TypeInfo.GenericTypeArguments
  - System.Reflection.TypeInfo.GenericTypeParameters
  - System.Reflection.TypeInfo.GetArrayRank
  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  - System.Reflection.TypeInfo.GetDeclaredField(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  - System.Reflection.TypeInfo.GetElementType
  - System.Reflection.TypeInfo.GetGenericParameterConstraints
  - System.Reflection.TypeInfo.GetGenericTypeDefinition
  - System.Reflection.TypeInfo.GUID
  - System.Reflection.TypeInfo.HasElementType
  - System.Reflection.TypeInfo.ImplementedInterfaces
  - System.Reflection.TypeInfo.IsAbstract
  - System.Reflection.TypeInfo.IsAnsiClass
  - System.Reflection.TypeInfo.IsArray
  - System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.TypeInfo.IsAutoClass
  - System.Reflection.TypeInfo.IsAutoLayout
  - System.Reflection.TypeInfo.IsByRef
  - System.Reflection.TypeInfo.IsClass
  - System.Reflection.TypeInfo.IsEnum
  - System.Reflection.TypeInfo.IsExplicitLayout
  - System.Reflection.TypeInfo.IsGenericParameter
  - System.Reflection.TypeInfo.IsGenericType
  - System.Reflection.TypeInfo.IsGenericTypeDefinition
  - System.Reflection.TypeInfo.IsImport
  - System.Reflection.TypeInfo.IsInterface
  - System.Reflection.TypeInfo.IsLayoutSequential
  - System.Reflection.TypeInfo.IsMarshalByRef
  - System.Reflection.TypeInfo.IsNested
  - System.Reflection.TypeInfo.IsNestedAssembly
  - System.Reflection.TypeInfo.IsNestedFamANDAssem
  - System.Reflection.TypeInfo.IsNestedFamily
  - System.Reflection.TypeInfo.IsNestedFamORAssem
  - System.Reflection.TypeInfo.IsNestedPrivate
  - System.Reflection.TypeInfo.IsNestedPublic
  - System.Reflection.TypeInfo.IsNotPublic
  - System.Reflection.TypeInfo.IsPointer
  - System.Reflection.TypeInfo.IsPrimitive
  - System.Reflection.TypeInfo.IsPublic
  - System.Reflection.TypeInfo.IsSealed
  - System.Reflection.TypeInfo.IsSerializable
  - System.Reflection.TypeInfo.IsSpecialName
  - System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  - System.Reflection.TypeInfo.IsUnicodeClass
  - System.Reflection.TypeInfo.IsValueType
  - System.Reflection.TypeInfo.IsVisible
  - System.Reflection.TypeInfo.MakeArrayType
  - System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  - System.Reflection.TypeInfo.MakeByRefType
  - System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  - System.Reflection.TypeInfo.MakePointerType
  - System.Reflection.TypeInfo.Namespace
  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  langs:
  - csharp
  - vb
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeInfo
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: 'public abstract class TypeInfo : MemberInfo, IReflectableType'
    content.vb: >-
      Public MustInherit Class TypeInfo
          Inherits MemberInfo
          Implements IReflectableType
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Reflection.IReflectableType
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.Equals(System.Object)
  - System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.TypeInfo.DeclaredConstructors
  commentId: P:System.Reflection.TypeInfo.DeclaredConstructors
  id: DeclaredConstructors
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredConstructors
  nameWithType: TypeInfo.DeclaredConstructors
  fullName: System.Reflection.TypeInfo.DeclaredConstructors
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredConstructors
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 282
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<ConstructorInfo> DeclaredConstructors { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredConstructors As Collections.Generic.IEnumerable(Of ConstructorInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredEvents
  commentId: P:System.Reflection.TypeInfo.DeclaredEvents
  id: DeclaredEvents
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredEvents
  nameWithType: TypeInfo.DeclaredEvents
  fullName: System.Reflection.TypeInfo.DeclaredEvents
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredEvents
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 283
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<EventInfo> DeclaredEvents { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredEvents As Collections.Generic.IEnumerable(Of EventInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredFields
  commentId: P:System.Reflection.TypeInfo.DeclaredFields
  id: DeclaredFields
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredFields
  nameWithType: TypeInfo.DeclaredFields
  fullName: System.Reflection.TypeInfo.DeclaredFields
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredFields
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 284
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<FieldInfo> DeclaredFields { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredFields As Collections.Generic.IEnumerable(Of FieldInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredMembers
  commentId: P:System.Reflection.TypeInfo.DeclaredMembers
  id: DeclaredMembers
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredMembers
  nameWithType: TypeInfo.DeclaredMembers
  fullName: System.Reflection.TypeInfo.DeclaredMembers
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredMembers
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 285
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<MemberInfo> DeclaredMembers { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredMembers As Collections.Generic.IEnumerable(Of MemberInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredMethods
  commentId: P:System.Reflection.TypeInfo.DeclaredMethods
  id: DeclaredMethods
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredMethods
  nameWithType: TypeInfo.DeclaredMethods
  fullName: System.Reflection.TypeInfo.DeclaredMethods
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredMethods
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 286
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<MethodInfo> DeclaredMethods { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredMethods As Collections.Generic.IEnumerable(Of MethodInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredNestedTypes
  commentId: P:System.Reflection.TypeInfo.DeclaredNestedTypes
  id: DeclaredNestedTypes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredNestedTypes
  nameWithType: TypeInfo.DeclaredNestedTypes
  fullName: System.Reflection.TypeInfo.DeclaredNestedTypes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredNestedTypes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 287
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<TypeInfo> DeclaredNestedTypes { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredNestedTypes As Collections.Generic.IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredProperties
  commentId: P:System.Reflection.TypeInfo.DeclaredProperties
  id: DeclaredProperties
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredProperties
  nameWithType: TypeInfo.DeclaredProperties
  fullName: System.Reflection.TypeInfo.DeclaredProperties
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaredProperties
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 288
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<PropertyInfo> DeclaredProperties { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredProperties As Collections.Generic.IEnumerable(Of PropertyInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.GenericTypeParameters
  commentId: P:System.Reflection.TypeInfo.GenericTypeParameters
  id: GenericTypeParameters
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericTypeParameters
  nameWithType: TypeInfo.GenericTypeParameters
  fullName: System.Reflection.TypeInfo.GenericTypeParameters
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericTypeParameters
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 289
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type[] GenericTypeParameters { get; }
    content.vb: Public Overridable ReadOnly Property GenericTypeParameters As Type()
    parameters: []
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.ImplementedInterfaces
  commentId: P:System.Reflection.TypeInfo.ImplementedInterfaces
  id: ImplementedInterfaces
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: ImplementedInterfaces
  nameWithType: TypeInfo.ImplementedInterfaces
  fullName: System.Reflection.TypeInfo.ImplementedInterfaces
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImplementedInterfaces
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 290
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<Type> ImplementedInterfaces { get; }
    content.vb: Public Overridable ReadOnly Property ImplementedInterfaces As Collections.Generic.IEnumerable(Of Type)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.AsType
  commentId: M:System.Reflection.TypeInfo.AsType
  id: AsType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: AsType()
  nameWithType: TypeInfo.AsType()
  fullName: System.Reflection.TypeInfo.AsType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 291
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type AsType()
    content.vb: Public Overridable Function AsType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  id: GetDeclaredEvent(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredEvent(String)
  nameWithType: TypeInfo.GetDeclaredEvent(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDeclaredEvent
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 292
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual EventInfo GetDeclaredEvent(string name)
    content.vb: Public Overridable Function GetDeclaredEvent(name As String) As EventInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.EventInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredField(System.String)
  id: GetDeclaredField(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredField(String)
  nameWithType: TypeInfo.GetDeclaredField(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredField(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDeclaredField
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 293
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual FieldInfo GetDeclaredField(string name)
    content.vb: Public Overridable Function GetDeclaredField(name As String) As FieldInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  id: GetDeclaredMethod(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredMethod(String)
  nameWithType: TypeInfo.GetDeclaredMethod(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDeclaredMethod
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 294
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MethodInfo GetDeclaredMethod(string name)
    content.vb: Public Overridable Function GetDeclaredMethod(name As String) As MethodInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  id: GetDeclaredMethods(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredMethods(String)
  nameWithType: TypeInfo.GetDeclaredMethods(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDeclaredMethods
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 295
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Collections.Generic.IEnumerable<MethodInfo> GetDeclaredMethods(string name)
    content.vb: Public Overridable Function GetDeclaredMethods(name As String) As Collections.Generic.IEnumerable(Of MethodInfo)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  id: GetDeclaredNestedType(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredNestedType(String)
  nameWithType: TypeInfo.GetDeclaredNestedType(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDeclaredNestedType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 296
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual TypeInfo GetDeclaredNestedType(string name)
    content.vb: Public Overridable Function GetDeclaredNestedType(name As String) As TypeInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.TypeInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  id: GetDeclaredProperty(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredProperty(String)
  nameWithType: TypeInfo.GetDeclaredProperty(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDeclaredProperty
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 297
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual PropertyInfo GetDeclaredProperty(string name)
    content.vb: Public Overridable Function GetDeclaredProperty(name As String) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(TypeInfo)
  nameWithType: TypeInfo.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAssignableFrom
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 298
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsAssignableFrom(TypeInfo typeInfo)
    content.vb: Public Overridable Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  commentId: M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  id: System#Reflection#IReflectableType#GetTypeInfo
  isEii: true
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IReflectableType.GetTypeInfo()
  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()
  fullName: System.Reflection.TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Reflection.IReflectableType.GetTypeInfo
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 299
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: TypeInfo IReflectableType.GetTypeInfo()
    content.vb: Function System.Reflection.IReflectableType.GetTypeInfo As TypeInfo Implements IReflectableType.GetTypeInfo
    return:
      type: System.Reflection.TypeInfo
  implements:
  - System.Reflection.IReflectableType.GetTypeInfo
  nameWithType.vb: TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()
  name.vb: System.Reflection.IReflectableType.GetTypeInfo()
- uid: System.Reflection.TypeInfo.Attributes
  commentId: P:System.Reflection.TypeInfo.Attributes
  id: Attributes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: TypeInfo.Attributes
  fullName: System.Reflection.TypeInfo.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 26
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract TypeAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GetArrayRank
  commentId: M:System.Reflection.TypeInfo.GetArrayRank
  id: GetArrayRank
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetArrayRank()
  nameWithType: TypeInfo.GetArrayRank()
  fullName: System.Reflection.TypeInfo.GetArrayRank()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetArrayRank
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract int GetArrayRank()
    content.vb: Public MustOverride Function GetArrayRank As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.GetElementType
  commentId: M:System.Reflection.TypeInfo.GetElementType
  id: GetElementType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetElementType()
  nameWithType: TypeInfo.GetElementType()
  fullName: System.Reflection.TypeInfo.GetElementType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type GetElementType()
    content.vb: Public MustOverride Function GetElementType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.GetGenericParameterConstraints
  commentId: M:System.Reflection.TypeInfo.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetGenericParameterConstraints()
  nameWithType: TypeInfo.GetGenericParameterConstraints()
  fullName: System.Reflection.TypeInfo.GetGenericParameterConstraints()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericParameterConstraints
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 29
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type[] GetGenericParameterConstraints()
    content.vb: Public MustOverride Function GetGenericParameterConstraints As Type()
    return:
      type: Type[]
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  commentId: M:System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  id: IsSubclassOf(System.Type)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSubclassOf(Type)
  nameWithType: TypeInfo.IsSubclassOf(Type)
  fullName: System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSubclassOf
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsSubclassOf(Type c)
    content.vb: Public Overridable Function IsSubclassOf(c As Type) As Boolean
    parameters:
    - id: c
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GenericTypeArguments
  commentId: P:System.Reflection.TypeInfo.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericTypeArguments
  nameWithType: TypeInfo.GenericTypeArguments
  fullName: System.Reflection.TypeInfo.GenericTypeArguments
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericTypeArguments
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type[] GenericTypeArguments { get; }
    content.vb: Public MustOverride ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: Type[]
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GetGenericTypeDefinition
  commentId: M:System.Reflection.TypeInfo.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition()
  nameWithType: TypeInfo.GetGenericTypeDefinition()
  fullName: System.Reflection.TypeInfo.GetGenericTypeDefinition()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericTypeDefinition
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 32
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type GetGenericTypeDefinition()
    content.vb: Public MustOverride Function GetGenericTypeDefinition As Type
    return:
      type: Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.Assembly
  commentId: P:System.Reflection.TypeInfo.Assembly
  id: Assembly
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: TypeInfo.Assembly
  fullName: System.Reflection.TypeInfo.Assembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 33
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Assembly Assembly { get; }
    content.vb: Public MustOverride ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.BaseType
  commentId: P:System.Reflection.TypeInfo.BaseType
  id: BaseType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: BaseType
  nameWithType: TypeInfo.BaseType
  fullName: System.Reflection.TypeInfo.BaseType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 34
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type BaseType { get; }
    content.vb: Public MustOverride ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.ContainsGenericParameters
  commentId: P:System.Reflection.TypeInfo.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  nameWithType: TypeInfo.ContainsGenericParameters
  fullName: System.Reflection.TypeInfo.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsGenericParameters
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool ContainsGenericParameters { get; }
    content.vb: Public MustOverride ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaringMethod
  commentId: P:System.Reflection.TypeInfo.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaringMethod
  nameWithType: TypeInfo.DeclaringMethod
  fullName: System.Reflection.TypeInfo.DeclaringMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringMethod
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 37
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract MethodBase DeclaringMethod { get; }
    content.vb: Public MustOverride ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: System.Reflection.MethodBase
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.FullName
  commentId: P:System.Reflection.TypeInfo.FullName
  id: FullName
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: TypeInfo.FullName
  fullName: System.Reflection.TypeInfo.FullName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 38
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string FullName { get; }
    content.vb: Public MustOverride ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GenericParameterAttributes
  commentId: P:System.Reflection.TypeInfo.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericParameterAttributes
  nameWithType: TypeInfo.GenericParameterAttributes
  fullName: System.Reflection.TypeInfo.GenericParameterAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterAttributes
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 39
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: GenericParameterAttributes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GenericParameterPosition
  commentId: P:System.Reflection.TypeInfo.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericParameterPosition
  nameWithType: TypeInfo.GenericParameterPosition
  fullName: System.Reflection.TypeInfo.GenericParameterPosition
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterPosition
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 40
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract int GenericParameterPosition { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GUID
  commentId: P:System.Reflection.TypeInfo.GUID
  id: GUID
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GUID
  nameWithType: TypeInfo.GUID
  fullName: System.Reflection.TypeInfo.GUID
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GUID
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Guid GUID { get; }
    content.vb: Public MustOverride ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: Guid
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.HasElementType
  commentId: P:System.Reflection.TypeInfo.HasElementType
  id: HasElementType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: HasElementType
  nameWithType: TypeInfo.HasElementType
  fullName: System.Reflection.TypeInfo.HasElementType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasElementType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 42
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool HasElementType { get; }
    content.vb: Public ReadOnly Property HasElementType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAbstract
  commentId: P:System.Reflection.TypeInfo.IsAbstract
  id: IsAbstract
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAbstract
  nameWithType: TypeInfo.IsAbstract
  fullName: System.Reflection.TypeInfo.IsAbstract
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAbstract
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 43
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAbstract { get; }
    content.vb: Public ReadOnly Property IsAbstract As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAnsiClass
  commentId: P:System.Reflection.TypeInfo.IsAnsiClass
  id: IsAnsiClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAnsiClass
  nameWithType: TypeInfo.IsAnsiClass
  fullName: System.Reflection.TypeInfo.IsAnsiClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAnsiClass
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 44
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAnsiClass { get; }
    content.vb: Public ReadOnly Property IsAnsiClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsArray
  commentId: P:System.Reflection.TypeInfo.IsArray
  id: IsArray
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsArray
  nameWithType: TypeInfo.IsArray
  fullName: System.Reflection.TypeInfo.IsArray
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsArray
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 45
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsArray { get; }
    content.vb: Public ReadOnly Property IsArray As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAutoClass
  commentId: P:System.Reflection.TypeInfo.IsAutoClass
  id: IsAutoClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAutoClass
  nameWithType: TypeInfo.IsAutoClass
  fullName: System.Reflection.TypeInfo.IsAutoClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAutoClass
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 46
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAutoClass { get; }
    content.vb: Public ReadOnly Property IsAutoClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAutoLayout
  commentId: P:System.Reflection.TypeInfo.IsAutoLayout
  id: IsAutoLayout
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAutoLayout
  nameWithType: TypeInfo.IsAutoLayout
  fullName: System.Reflection.TypeInfo.IsAutoLayout
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAutoLayout
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 47
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAutoLayout { get; }
    content.vb: Public ReadOnly Property IsAutoLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsByRef
  commentId: P:System.Reflection.TypeInfo.IsByRef
  id: IsByRef
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsByRef
  nameWithType: TypeInfo.IsByRef
  fullName: System.Reflection.TypeInfo.IsByRef
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsByRef
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 48
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsByRef { get; }
    content.vb: Public ReadOnly Property IsByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsClass
  commentId: P:System.Reflection.TypeInfo.IsClass
  id: IsClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsClass
  nameWithType: TypeInfo.IsClass
  fullName: System.Reflection.TypeInfo.IsClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsClass
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 49
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsClass { get; }
    content.vb: Public ReadOnly Property IsClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsEnum
  commentId: P:System.Reflection.TypeInfo.IsEnum
  id: IsEnum
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsEnum
  nameWithType: TypeInfo.IsEnum
  fullName: System.Reflection.TypeInfo.IsEnum
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnum
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 50
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsEnum { get; }
    content.vb: Public MustOverride ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsExplicitLayout
  commentId: P:System.Reflection.TypeInfo.IsExplicitLayout
  id: IsExplicitLayout
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsExplicitLayout
  nameWithType: TypeInfo.IsExplicitLayout
  fullName: System.Reflection.TypeInfo.IsExplicitLayout
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsExplicitLayout
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 51
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsExplicitLayout { get; }
    content.vb: Public ReadOnly Property IsExplicitLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsGenericParameter
  commentId: P:System.Reflection.TypeInfo.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsGenericParameter
  nameWithType: TypeInfo.IsGenericParameter
  fullName: System.Reflection.TypeInfo.IsGenericParameter
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericParameter
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 52
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericParameter { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsGenericType
  commentId: P:System.Reflection.TypeInfo.IsGenericType
  id: IsGenericType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsGenericType
  nameWithType: TypeInfo.IsGenericType
  fullName: System.Reflection.TypeInfo.IsGenericType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 53
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericType { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsGenericTypeDefinition
  commentId: P:System.Reflection.TypeInfo.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsGenericTypeDefinition
  nameWithType: TypeInfo.IsGenericTypeDefinition
  fullName: System.Reflection.TypeInfo.IsGenericTypeDefinition
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericTypeDefinition
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericTypeDefinition { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsImport
  commentId: P:System.Reflection.TypeInfo.IsImport
  id: IsImport
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsImport
  nameWithType: TypeInfo.IsImport
  fullName: System.Reflection.TypeInfo.IsImport
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsImport
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 55
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsImport { get; }
    content.vb: Public ReadOnly Property IsImport As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsInterface
  commentId: P:System.Reflection.TypeInfo.IsInterface
  id: IsInterface
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsInterface
  nameWithType: TypeInfo.IsInterface
  fullName: System.Reflection.TypeInfo.IsInterface
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInterface
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 56
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsInterface { get; }
    content.vb: Public ReadOnly Property IsInterface As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsLayoutSequential
  commentId: P:System.Reflection.TypeInfo.IsLayoutSequential
  id: IsLayoutSequential
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsLayoutSequential
  nameWithType: TypeInfo.IsLayoutSequential
  fullName: System.Reflection.TypeInfo.IsLayoutSequential
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLayoutSequential
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 57
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsLayoutSequential { get; }
    content.vb: Public ReadOnly Property IsLayoutSequential As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsMarshalByRef
  commentId: P:System.Reflection.TypeInfo.IsMarshalByRef
  id: IsMarshalByRef
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsMarshalByRef
  nameWithType: TypeInfo.IsMarshalByRef
  fullName: System.Reflection.TypeInfo.IsMarshalByRef
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMarshalByRef
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 58
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsMarshalByRef { get; }
    content.vb: Public ReadOnly Property IsMarshalByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNested
  commentId: P:System.Reflection.TypeInfo.IsNested
  id: IsNested
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNested
  nameWithType: TypeInfo.IsNested
  fullName: System.Reflection.TypeInfo.IsNested
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNested
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNested { get; }
    content.vb: Public ReadOnly Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedAssembly
  commentId: P:System.Reflection.TypeInfo.IsNestedAssembly
  id: IsNestedAssembly
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedAssembly
  nameWithType: TypeInfo.IsNestedAssembly
  fullName: System.Reflection.TypeInfo.IsNestedAssembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedAssembly
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 60
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedAssembly { get; }
    content.vb: Public ReadOnly Property IsNestedAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem
  commentId: P:System.Reflection.TypeInfo.IsNestedFamANDAssem
  id: IsNestedFamANDAssem
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedFamANDAssem
  nameWithType: TypeInfo.IsNestedFamANDAssem
  fullName: System.Reflection.TypeInfo.IsNestedFamANDAssem
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedFamANDAssem
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 61
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamANDAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamANDAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedFamily
  commentId: P:System.Reflection.TypeInfo.IsNestedFamily
  id: IsNestedFamily
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedFamily
  nameWithType: TypeInfo.IsNestedFamily
  fullName: System.Reflection.TypeInfo.IsNestedFamily
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedFamily
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 62
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamily { get; }
    content.vb: Public ReadOnly Property IsNestedFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedFamORAssem
  commentId: P:System.Reflection.TypeInfo.IsNestedFamORAssem
  id: IsNestedFamORAssem
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedFamORAssem
  nameWithType: TypeInfo.IsNestedFamORAssem
  fullName: System.Reflection.TypeInfo.IsNestedFamORAssem
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedFamORAssem
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 63
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamORAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamORAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedPrivate
  commentId: P:System.Reflection.TypeInfo.IsNestedPrivate
  id: IsNestedPrivate
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedPrivate
  nameWithType: TypeInfo.IsNestedPrivate
  fullName: System.Reflection.TypeInfo.IsNestedPrivate
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedPrivate
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 64
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedPrivate { get; }
    content.vb: Public ReadOnly Property IsNestedPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedPublic
  commentId: P:System.Reflection.TypeInfo.IsNestedPublic
  id: IsNestedPublic
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedPublic
  nameWithType: TypeInfo.IsNestedPublic
  fullName: System.Reflection.TypeInfo.IsNestedPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedPublic
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 65
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedPublic { get; }
    content.vb: Public ReadOnly Property IsNestedPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNotPublic
  commentId: P:System.Reflection.TypeInfo.IsNotPublic
  id: IsNotPublic
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNotPublic
  nameWithType: TypeInfo.IsNotPublic
  fullName: System.Reflection.TypeInfo.IsNotPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNotPublic
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 66
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNotPublic { get; }
    content.vb: Public ReadOnly Property IsNotPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsPointer
  commentId: P:System.Reflection.TypeInfo.IsPointer
  id: IsPointer
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsPointer
  nameWithType: TypeInfo.IsPointer
  fullName: System.Reflection.TypeInfo.IsPointer
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPointer
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 67
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsPointer { get; }
    content.vb: Public ReadOnly Property IsPointer As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsPrimitive
  commentId: P:System.Reflection.TypeInfo.IsPrimitive
  id: IsPrimitive
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsPrimitive
  nameWithType: TypeInfo.IsPrimitive
  fullName: System.Reflection.TypeInfo.IsPrimitive
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPrimitive
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsPrimitive { get; }
    content.vb: Public Overridable ReadOnly Property IsPrimitive As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsPublic
  commentId: P:System.Reflection.TypeInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsPublic
  nameWithType: TypeInfo.IsPublic
  fullName: System.Reflection.TypeInfo.IsPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPublic
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 69
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsSealed
  commentId: P:System.Reflection.TypeInfo.IsSealed
  id: IsSealed
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSealed
  nameWithType: TypeInfo.IsSealed
  fullName: System.Reflection.TypeInfo.IsSealed
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSealed
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 70
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsSealed { get; }
    content.vb: Public ReadOnly Property IsSealed As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsVisible
  commentId: P:System.Reflection.TypeInfo.IsVisible
  id: IsVisible
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsVisible
  nameWithType: TypeInfo.IsVisible
  fullName: System.Reflection.TypeInfo.IsVisible
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsVisible
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 71
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsVisible { get; }
    content.vb: Public ReadOnly Property IsVisible As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsSerializable
  commentId: P:System.Reflection.TypeInfo.IsSerializable
  id: IsSerializable
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSerializable
  nameWithType: TypeInfo.IsSerializable
  fullName: System.Reflection.TypeInfo.IsSerializable
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSerializable
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 72
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsSerializable { get; }
    content.vb: Public MustOverride ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsSpecialName
  commentId: P:System.Reflection.TypeInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  nameWithType: TypeInfo.IsSpecialName
  fullName: System.Reflection.TypeInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSpecialName
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 73
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsUnicodeClass
  commentId: P:System.Reflection.TypeInfo.IsUnicodeClass
  id: IsUnicodeClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsUnicodeClass
  nameWithType: TypeInfo.IsUnicodeClass
  fullName: System.Reflection.TypeInfo.IsUnicodeClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsUnicodeClass
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 74
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsUnicodeClass { get; }
    content.vb: Public ReadOnly Property IsUnicodeClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsValueType
  commentId: P:System.Reflection.TypeInfo.IsValueType
  id: IsValueType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsValueType
  nameWithType: TypeInfo.IsValueType
  fullName: System.Reflection.TypeInfo.IsValueType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValueType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 75
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsValueType { get; }
    content.vb: Public Overridable ReadOnly Property IsValueType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.Namespace
  commentId: P:System.Reflection.TypeInfo.Namespace
  id: Namespace
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: TypeInfo.Namespace
  fullName: System.Reflection.TypeInfo.Namespace
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 76
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string Namespace { get; }
    content.vb: Public MustOverride ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.AssemblyQualifiedName
  commentId: P:System.Reflection.TypeInfo.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  nameWithType: TypeInfo.AssemblyQualifiedName
  fullName: System.Reflection.TypeInfo.AssemblyQualifiedName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyQualifiedName
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 77
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.MakeArrayType
  commentId: M:System.Reflection.TypeInfo.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeArrayType()
  nameWithType: TypeInfo.MakeArrayType()
  fullName: System.Reflection.TypeInfo.MakeArrayType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 79
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeArrayType()
    content.vb: Public MustOverride Function MakeArrayType As Type
    return:
      type: Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  commentId: M:System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeArrayType(Int32)
  nameWithType: TypeInfo.MakeArrayType(Int32)
  fullName: System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 80
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeArrayType(int rank)
    content.vb: Public MustOverride Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
    return:
      type: Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.MakeByRefType
  commentId: M:System.Reflection.TypeInfo.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeByRefType()
  nameWithType: TypeInfo.MakeByRefType()
  fullName: System.Reflection.TypeInfo.MakeByRefType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeByRefType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 81
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeByRefType()
    content.vb: Public MustOverride Function MakeByRefType As Type
    return:
      type: Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  commentId: M:System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeGenericType(Type[])
  nameWithType: TypeInfo.MakeGenericType(Type[])
  fullName: System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGenericType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 82
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public MustOverride Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
    return:
      type: Type
  nameWithType.vb: TypeInfo.MakeGenericType(Type())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Reflection.TypeInfo.MakeGenericType(System.Type())
  name.vb: MakeGenericType(Type())
- uid: System.Reflection.TypeInfo.MakePointerType
  commentId: M:System.Reflection.TypeInfo.MakePointerType
  id: MakePointerType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakePointerType()
  nameWithType: TypeInfo.MakePointerType()
  fullName: System.Reflection.TypeInfo.MakePointerType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakePointerType
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 83
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakePointerType()
    content.vb: Public MustOverride Function MakePointerType As Type
    return:
      type: Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.IReflectableType
  commentId: T:System.Reflection.IReflectableType
  parent: System.Reflection
  isExternal: false
  name: IReflectableType
  nameWithType: IReflectableType
  fullName: System.Reflection.IReflectableType
- uid: System.Reflection.MemberInfo.CustomAttributes
  commentId: P:System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  commentId: P:System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  commentId: P:System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  commentId: P:System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  commentId: M:System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<ConstructorInfo>
  nameWithType: Collections.Generic.IEnumerable<ConstructorInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of ConstructorInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.ConstructorInfo)
  name.vb: Collections.Generic.IEnumerable(Of ConstructorInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  nameWithType: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: Collections.Generic.IEnumerable(Of )
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<EventInfo>
  nameWithType: Collections.Generic.IEnumerable<EventInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of EventInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)
  name.vb: Collections.Generic.IEnumerable(Of EventInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<FieldInfo>
  nameWithType: Collections.Generic.IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of FieldInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)
  name.vb: Collections.Generic.IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MemberInfo>
  nameWithType: Collections.Generic.IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of MemberInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  name.vb: Collections.Generic.IEnumerable(Of MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MethodInfo>
  nameWithType: Collections.Generic.IEnumerable<MethodInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of MethodInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)
  name.vb: Collections.Generic.IEnumerable(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TypeInfo>
  nameWithType: Collections.Generic.IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<PropertyInfo>
  nameWithType: Collections.Generic.IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  nameWithType.vb: Collections.Generic.IEnumerable(Of PropertyInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: Collections.Generic.IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Type}'
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Type>
  nameWithType: Collections.Generic.IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: Collections.Generic.IEnumerable(Of Type)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: Collections.Generic.IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    nameWithType: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.EventInfo
  commentId: T:System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.IReflectableType.GetTypeInfo
  commentId: M:System.Reflection.IReflectableType.GetTypeInfo
  parent: System.Reflection.IReflectableType
  isExternal: false
  name: GetTypeInfo()
  nameWithType: IReflectableType.GetTypeInfo()
  fullName: System.Reflection.IReflectableType.GetTypeInfo()
  spec.csharp:
  - uid: System.Reflection.IReflectableType.GetTypeInfo
    name: GetTypeInfo
    nameWithType: IReflectableType.GetTypeInfo
    fullName: System.Reflection.IReflectableType.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.IReflectableType.GetTypeInfo
    name: GetTypeInfo
    nameWithType: IReflectableType.GetTypeInfo
    fullName: System.Reflection.IReflectableType.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.TypeAttributes
  commentId: T:System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: Type[]
  nameWithType.vb: Type()
  fullname.vb: Type()
  name.vb: Type()
  spec.csharp:
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: GenericParameterAttributes
  isExternal: true
  name: GenericParameterAttributes
  nameWithType: GenericParameterAttributes
  fullName: GenericParameterAttributes
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
