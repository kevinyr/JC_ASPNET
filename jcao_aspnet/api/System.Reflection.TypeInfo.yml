items:
- uid: System.Reflection.TypeInfo
  id: TypeInfo
  parent: System.Reflection
  children:
  - System.Reflection.TypeInfo.Assembly
  - System.Reflection.TypeInfo.AssemblyQualifiedName
  - System.Reflection.TypeInfo.AsType
  - System.Reflection.TypeInfo.Attributes
  - System.Reflection.TypeInfo.BaseType
  - System.Reflection.TypeInfo.ContainsGenericParameters
  - System.Reflection.TypeInfo.DeclaredConstructors
  - System.Reflection.TypeInfo.DeclaredEvents
  - System.Reflection.TypeInfo.DeclaredFields
  - System.Reflection.TypeInfo.DeclaredMembers
  - System.Reflection.TypeInfo.DeclaredMethods
  - System.Reflection.TypeInfo.DeclaredNestedTypes
  - System.Reflection.TypeInfo.DeclaredProperties
  - System.Reflection.TypeInfo.DeclaringMethod
  - System.Reflection.TypeInfo.FullName
  - System.Reflection.TypeInfo.GenericParameterAttributes
  - System.Reflection.TypeInfo.GenericParameterPosition
  - System.Reflection.TypeInfo.GenericTypeArguments
  - System.Reflection.TypeInfo.GenericTypeParameters
  - System.Reflection.TypeInfo.GetArrayRank
  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  - System.Reflection.TypeInfo.GetDeclaredField(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  - System.Reflection.TypeInfo.GetElementType
  - System.Reflection.TypeInfo.GetGenericParameterConstraints
  - System.Reflection.TypeInfo.GetGenericTypeDefinition
  - System.Reflection.TypeInfo.GUID
  - System.Reflection.TypeInfo.HasElementType
  - System.Reflection.TypeInfo.ImplementedInterfaces
  - System.Reflection.TypeInfo.IsAbstract
  - System.Reflection.TypeInfo.IsAnsiClass
  - System.Reflection.TypeInfo.IsArray
  - System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.TypeInfo.IsAutoClass
  - System.Reflection.TypeInfo.IsAutoLayout
  - System.Reflection.TypeInfo.IsByRef
  - System.Reflection.TypeInfo.IsClass
  - System.Reflection.TypeInfo.IsCOMObject
  - System.Reflection.TypeInfo.IsEnum
  - System.Reflection.TypeInfo.IsEquivalentTo(Type)
  - System.Reflection.TypeInfo.IsExplicitLayout
  - System.Reflection.TypeInfo.IsGenericParameter
  - System.Reflection.TypeInfo.IsGenericType
  - System.Reflection.TypeInfo.IsGenericTypeDefinition
  - System.Reflection.TypeInfo.IsImport
  - System.Reflection.TypeInfo.IsInterface
  - System.Reflection.TypeInfo.IsLayoutSequential
  - System.Reflection.TypeInfo.IsMarshalByRef
  - System.Reflection.TypeInfo.IsNested
  - System.Reflection.TypeInfo.IsNestedAssembly
  - System.Reflection.TypeInfo.IsNestedFamANDAssem
  - System.Reflection.TypeInfo.IsNestedFamily
  - System.Reflection.TypeInfo.IsNestedFamORAssem
  - System.Reflection.TypeInfo.IsNestedPrivate
  - System.Reflection.TypeInfo.IsNestedPublic
  - System.Reflection.TypeInfo.IsNotPublic
  - System.Reflection.TypeInfo.IsPointer
  - System.Reflection.TypeInfo.IsPrimitive
  - System.Reflection.TypeInfo.IsPublic
  - System.Reflection.TypeInfo.IsSealed
  - System.Reflection.TypeInfo.IsSerializable
  - System.Reflection.TypeInfo.IsSpecialName
  - System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  - System.Reflection.TypeInfo.IsUnicodeClass
  - System.Reflection.TypeInfo.IsValueType
  - System.Reflection.TypeInfo.IsVisible
  - System.Reflection.TypeInfo.MakeArrayType
  - System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  - System.Reflection.TypeInfo.MakeByRefType
  - System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  - System.Reflection.TypeInfo.MakePointerType
  - System.Reflection.TypeInfo.Namespace
  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 24
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
  syntax:
    content: 'public abstract class TypeInfo : MemberInfo, IReflectableType'
    content.vb: Public MustInherit Class TypeInfo Inherits MemberInfo Implements IReflectableType
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Reflection.IReflectableType
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.Equals(System.Object)
  - System.Reflection.MemberInfo.GetHashCode
- uid: System.Reflection.TypeInfo.DeclaredConstructors
  id: DeclaredConstructors
  parent: System.Reflection.TypeInfo
  name: DeclaredConstructors
  fullName: System.Reflection.TypeInfo.DeclaredConstructors
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 123
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the constructors declared by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<ConstructorInfo> DeclaredConstructors { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredConstructors As Collections.Generic.IEnumerable(Of ConstructorInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
      description: A collection of the constructors declared by the current type.
- uid: System.Reflection.TypeInfo.DeclaredEvents
  id: DeclaredEvents
  parent: System.Reflection.TypeInfo
  name: DeclaredEvents
  fullName: System.Reflection.TypeInfo.DeclaredEvents
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 131
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the events defined by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<EventInfo> DeclaredEvents { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredEvents As Collections.Generic.IEnumerable(Of EventInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
      description: A collection of the events defined by the current type.
- uid: System.Reflection.TypeInfo.DeclaredFields
  id: DeclaredFields
  parent: System.Reflection.TypeInfo
  name: DeclaredFields
  fullName: System.Reflection.TypeInfo.DeclaredFields
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 139
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the fields defined by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<FieldInfo> DeclaredFields { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredFields As Collections.Generic.IEnumerable(Of FieldInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
      description: A collection of the fields defined by the current type.
- uid: System.Reflection.TypeInfo.DeclaredMembers
  id: DeclaredMembers
  parent: System.Reflection.TypeInfo
  name: DeclaredMembers
  fullName: System.Reflection.TypeInfo.DeclaredMembers
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 147
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the members defined by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<MemberInfo> DeclaredMembers { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredMembers As Collections.Generic.IEnumerable(Of MemberInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: A collection of the members defined by the current type.
- uid: System.Reflection.TypeInfo.DeclaredMethods
  id: DeclaredMethods
  parent: System.Reflection.TypeInfo
  name: DeclaredMethods
  fullName: System.Reflection.TypeInfo.DeclaredMethods
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 155
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the methods defined by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<MethodInfo> DeclaredMethods { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredMethods As Collections.Generic.IEnumerable(Of MethodInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
      description: A collection of the methods defined by the current type.
- uid: System.Reflection.TypeInfo.DeclaredNestedTypes
  id: DeclaredNestedTypes
  parent: System.Reflection.TypeInfo
  name: DeclaredNestedTypes
  fullName: System.Reflection.TypeInfo.DeclaredNestedTypes
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 162
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the nested types defined by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<TypeInfo> DeclaredNestedTypes { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredNestedTypes As Collections.Generic.IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
      description: A collection of nested types defined by the current type.
- uid: System.Reflection.TypeInfo.DeclaredProperties
  id: DeclaredProperties
  parent: System.Reflection.TypeInfo
  name: DeclaredProperties
  fullName: System.Reflection.TypeInfo.DeclaredProperties
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 172
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the properties defined by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<PropertyInfo> DeclaredProperties { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredProperties As Collections.Generic.IEnumerable(Of PropertyInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: A collection of the properties defined by the current type.
- uid: System.Reflection.TypeInfo.GenericTypeParameters
  id: GenericTypeParameters
  parent: System.Reflection.TypeInfo
  name: GenericTypeParameters
  fullName: System.Reflection.TypeInfo.GenericTypeParameters
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 38
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets an array of the generic type parameters of the current instance.
  syntax:
    content: public virtual Type[] GenericTypeParameters { get; }
    content.vb: Public Overridable ReadOnly Property GenericTypeParameters As Type()
    parameters: []
    return:
      type: System.Type[]
      description: An array that contains the current instance's generic type parameters, or an array of <xref href="System.Array.Length" data-throw-if-not-resolved="false"></xref> zero if the current instance has no generic type parameters.
- uid: System.Reflection.TypeInfo.ImplementedInterfaces
  id: ImplementedInterfaces
  parent: System.Reflection.TypeInfo
  name: ImplementedInterfaces
  fullName: System.Reflection.TypeInfo.ImplementedInterfaces
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 181
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection of the interfaces implemented by the current type.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<Type> ImplementedInterfaces { get; }
    content.vb: Public Overridable ReadOnly Property ImplementedInterfaces As Collections.Generic.IEnumerable(Of Type)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: A collection of the interfaces implemented by the current type.
- uid: System.Reflection.TypeInfo.AsType
  id: AsType
  parent: System.Reflection.TypeInfo
  name: AsType()
  fullName: System.Reflection.TypeInfo.AsType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 34
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the current type as a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public virtual Type AsType()
    content.vb: Public Overridable Function AsType As Type
    return:
      type: System.Type
      description: The current type.
- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  id: GetDeclaredEvent(System.String)
  parent: System.Reflection.TypeInfo
  name: GetDeclaredEvent(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 82
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns an object that represents the specified public event declared by the current type.
  syntax:
    content: public virtual EventInfo GetDeclaredEvent(string name)
    content.vb: Public Overridable Function GetDeclaredEvent(name As String) As EventInfo
    parameters:
    - id: name
      type: System.String
      description: The name of the event.
    return:
      type: System.Reflection.EventInfo
      description: An object that represents the specified event, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)
  id: GetDeclaredField(System.String)
  parent: System.Reflection.TypeInfo
  name: GetDeclaredField(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredField(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 86
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns an object that represents the specified public field declared by the current type.
  syntax:
    content: public virtual FieldInfo GetDeclaredField(string name)
    content.vb: Public Overridable Function GetDeclaredField(name As String) As FieldInfo
    parameters:
    - id: name
      type: System.String
      description: The name of the field.
    return:
      type: System.Reflection.FieldInfo
      description: An object that represents the specified field, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  id: GetDeclaredMethod(System.String)
  parent: System.Reflection.TypeInfo
  name: GetDeclaredMethod(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 90
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns an object that represents the specified public method declared by the current type.
  syntax:
    content: public virtual MethodInfo GetDeclaredMethod(string name)
    content.vb: Public Overridable Function GetDeclaredMethod(name As String) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The name of the method.
    return:
      type: System.Reflection.MethodInfo
      description: An object that represents the specified method, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  id: GetDeclaredMethods(System.String)
  parent: System.Reflection.TypeInfo
  name: GetDeclaredMethods(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 95
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a collection that contains all public methods declared on the current type that match the specified name.
  syntax:
    content: public virtual Collections.Generic.IEnumerable<MethodInfo> GetDeclaredMethods(string name)
    content.vb: Public Overridable Function GetDeclaredMethods(name As String) As Collections.Generic.IEnumerable(Of MethodInfo)
    parameters:
    - id: name
      type: System.String
      description: The method name to search for.
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
      description: A collection that contains methods that match *name*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  id: GetDeclaredNestedType(System.String)
  parent: System.Reflection.TypeInfo
  name: GetDeclaredNestedType(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 103
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns an object that represents the specified public nested type declared by the current type.
  syntax:
    content: public virtual TypeInfo GetDeclaredNestedType(string name)
    content.vb: Public Overridable Function GetDeclaredNestedType(name As String) As TypeInfo
    parameters:
    - id: name
      type: System.String
      description: The name of the nested type.
    return:
      type: System.Reflection.TypeInfo
      description: An object that represents the specified nested type, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  id: GetDeclaredProperty(System.String)
  parent: System.Reflection.TypeInfo
  name: GetDeclaredProperty(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 112
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns an object that represents the specified public property declared by the current type.
  syntax:
    content: public virtual PropertyInfo GetDeclaredProperty(string name)
    content.vb: Public Overridable Function GetDeclaredProperty(name As String) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The name of the property.
    return:
      type: System.Reflection.PropertyInfo
      description: An object that represents the specified property, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeInfo
  name: IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 50
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a value that indicates whether the specified type can be assigned to the current type.
  syntax:
    content: public virtual bool IsAssignableFrom(TypeInfo typeInfo)
    content.vb: Public Overridable Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The type to check.
    return:
      type: System.Boolean
      description: true if the specified type can be assigned to this type; otherwise, false.
- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  id: System#Reflection#IReflectableType#GetTypeInfo
  parent: System.Reflection.TypeInfo
  name: IReflectableType.GetTypeInfo()
  name.vb: System.Reflection.IReflectableType.GetTypeInfo()
  fullName: System.Reflection.TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a representation of the current type as a <xref href="System.Reflection.TypeInfo" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: TypeInfo IReflectableType.GetTypeInfo()
    content.vb: Function System.Reflection.IReflectableType.GetTypeInfo As TypeInfo Implements IReflectableType.GetTypeInfo
    return:
      type: System.Reflection.TypeInfo
      description: A reference to the current type.
- uid: System.Reflection.TypeInfo.Attributes
  id: Attributes
  parent: System.Reflection.TypeInfo
  name: Attributes
  fullName: System.Reflection.TypeInfo.Attributes
  type: Property
  source:
    remote: &o1
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract TypeAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
- uid: System.Reflection.TypeInfo.GetArrayRank
  id: GetArrayRank
  parent: System.Reflection.TypeInfo
  name: GetArrayRank()
  fullName: System.Reflection.TypeInfo.GetArrayRank()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 24
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract int GetArrayRank()
    content.vb: Public MustOverride Function GetArrayRank As Integer
    return:
      type: System.Int32
- uid: System.Reflection.TypeInfo.GetElementType
  id: GetElementType
  parent: System.Reflection.TypeInfo
  name: GetElementType()
  fullName: System.Reflection.TypeInfo.GetElementType()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 25
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type GetElementType()
    content.vb: Public MustOverride Function GetElementType As Type
    return:
      type: System.Type
- uid: System.Reflection.TypeInfo.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Reflection.TypeInfo
  name: GetGenericParameterConstraints()
  fullName: System.Reflection.TypeInfo.GetGenericParameterConstraints()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 26
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type[] GetGenericParameterConstraints()
    content.vb: Public MustOverride Function GetGenericParameterConstraints As Type()
    return:
      type: Type[]
- uid: System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  id: IsSubclassOf(System.Type)
  parent: System.Reflection.TypeInfo
  name: IsSubclassOf(Type)
  fullName: System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsSubclassOf(Type c)
    content.vb: Public Overridable Function IsSubclassOf(c As Type) As Boolean
    parameters:
    - id: c
      type: System.Type
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsEquivalentTo(Type)
  id: IsEquivalentTo(Type)
  parent: System.Reflection.TypeInfo
  name: IsEquivalentTo(Type)
  fullName: System.Reflection.TypeInfo.IsEquivalentTo(Type)
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsEquivalentTo(Type other)
    content.vb: Public Overridable Function IsEquivalentTo(other As Type) As Boolean
    parameters:
    - id: other
      type: Type
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Reflection.TypeInfo
  name: GenericTypeArguments
  fullName: System.Reflection.TypeInfo.GenericTypeArguments
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 29
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type[] GenericTypeArguments { get; }
    content.vb: Public MustOverride ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: Type[]
- uid: System.Reflection.TypeInfo.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.TypeInfo
  name: GetGenericTypeDefinition()
  fullName: System.Reflection.TypeInfo.GetGenericTypeDefinition()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type GetGenericTypeDefinition()
    content.vb: Public MustOverride Function GetGenericTypeDefinition As Type
    return:
      type: Type
- uid: System.Reflection.TypeInfo.Assembly
  id: Assembly
  parent: System.Reflection.TypeInfo
  name: Assembly
  fullName: System.Reflection.TypeInfo.Assembly
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Assembly Assembly { get; }
    content.vb: Public MustOverride ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
- uid: System.Reflection.TypeInfo.BaseType
  id: BaseType
  parent: System.Reflection.TypeInfo
  name: BaseType
  fullName: System.Reflection.TypeInfo.BaseType
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 32
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type BaseType { get; }
    content.vb: Public MustOverride ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: Type
- uid: System.Reflection.TypeInfo.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.TypeInfo
  name: ContainsGenericParameters
  fullName: System.Reflection.TypeInfo.ContainsGenericParameters
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 33
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool ContainsGenericParameters { get; }
    content.vb: Public MustOverride ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.TypeInfo
  name: DeclaringMethod
  fullName: System.Reflection.TypeInfo.DeclaringMethod
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract MethodBase DeclaringMethod { get; }
    content.vb: Public MustOverride ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: System.Reflection.MethodBase
- uid: System.Reflection.TypeInfo.FullName
  id: FullName
  parent: System.Reflection.TypeInfo
  name: FullName
  fullName: System.Reflection.TypeInfo.FullName
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 36
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string FullName { get; }
    content.vb: Public MustOverride ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
- uid: System.Reflection.TypeInfo.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.TypeInfo
  name: GenericParameterAttributes
  fullName: System.Reflection.TypeInfo.GenericParameterAttributes
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 37
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: GenericParameterAttributes
- uid: System.Reflection.TypeInfo.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.TypeInfo
  name: GenericParameterPosition
  fullName: System.Reflection.TypeInfo.GenericParameterPosition
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 38
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract int GenericParameterPosition { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Reflection.TypeInfo.GUID
  id: GUID
  parent: System.Reflection.TypeInfo
  name: GUID
  fullName: System.Reflection.TypeInfo.GUID
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 39
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Guid GUID { get; }
    content.vb: Public MustOverride ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: Guid
- uid: System.Reflection.TypeInfo.HasElementType
  id: HasElementType
  parent: System.Reflection.TypeInfo
  name: HasElementType
  fullName: System.Reflection.TypeInfo.HasElementType
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 40
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool HasElementType { get; }
    content.vb: Public ReadOnly Property HasElementType As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsAbstract
  id: IsAbstract
  parent: System.Reflection.TypeInfo
  name: IsAbstract
  fullName: System.Reflection.TypeInfo.IsAbstract
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAbstract { get; }
    content.vb: Public ReadOnly Property IsAbstract As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsAnsiClass
  id: IsAnsiClass
  parent: System.Reflection.TypeInfo
  name: IsAnsiClass
  fullName: System.Reflection.TypeInfo.IsAnsiClass
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 42
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAnsiClass { get; }
    content.vb: Public ReadOnly Property IsAnsiClass As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsArray
  id: IsArray
  parent: System.Reflection.TypeInfo
  name: IsArray
  fullName: System.Reflection.TypeInfo.IsArray
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 43
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsArray { get; }
    content.vb: Public ReadOnly Property IsArray As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsAutoClass
  id: IsAutoClass
  parent: System.Reflection.TypeInfo
  name: IsAutoClass
  fullName: System.Reflection.TypeInfo.IsAutoClass
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 44
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAutoClass { get; }
    content.vb: Public ReadOnly Property IsAutoClass As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsAutoLayout
  id: IsAutoLayout
  parent: System.Reflection.TypeInfo
  name: IsAutoLayout
  fullName: System.Reflection.TypeInfo.IsAutoLayout
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 45
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAutoLayout { get; }
    content.vb: Public ReadOnly Property IsAutoLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsByRef
  id: IsByRef
  parent: System.Reflection.TypeInfo
  name: IsByRef
  fullName: System.Reflection.TypeInfo.IsByRef
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 46
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsByRef { get; }
    content.vb: Public ReadOnly Property IsByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsClass
  id: IsClass
  parent: System.Reflection.TypeInfo
  name: IsClass
  fullName: System.Reflection.TypeInfo.IsClass
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 47
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsClass { get; }
    content.vb: Public ReadOnly Property IsClass As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsCOMObject
  id: IsCOMObject
  parent: System.Reflection.TypeInfo
  name: IsCOMObject
  fullName: System.Reflection.TypeInfo.IsCOMObject
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 48
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsCOMObject { get; }
    content.vb: Public Overridable ReadOnly Property IsCOMObject As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsEnum
  id: IsEnum
  parent: System.Reflection.TypeInfo
  name: IsEnum
  fullName: System.Reflection.TypeInfo.IsEnum
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 49
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsEnum { get; }
    content.vb: Public MustOverride ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsExplicitLayout
  id: IsExplicitLayout
  parent: System.Reflection.TypeInfo
  name: IsExplicitLayout
  fullName: System.Reflection.TypeInfo.IsExplicitLayout
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 50
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsExplicitLayout { get; }
    content.vb: Public ReadOnly Property IsExplicitLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.TypeInfo
  name: IsGenericParameter
  fullName: System.Reflection.TypeInfo.IsGenericParameter
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 51
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericParameter { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsGenericType
  id: IsGenericType
  parent: System.Reflection.TypeInfo
  name: IsGenericType
  fullName: System.Reflection.TypeInfo.IsGenericType
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 52
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericType { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.TypeInfo
  name: IsGenericTypeDefinition
  fullName: System.Reflection.TypeInfo.IsGenericTypeDefinition
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 53
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericTypeDefinition { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsImport
  id: IsImport
  parent: System.Reflection.TypeInfo
  name: IsImport
  fullName: System.Reflection.TypeInfo.IsImport
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsImport { get; }
    content.vb: Public ReadOnly Property IsImport As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsInterface
  id: IsInterface
  parent: System.Reflection.TypeInfo
  name: IsInterface
  fullName: System.Reflection.TypeInfo.IsInterface
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 55
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsInterface { get; }
    content.vb: Public ReadOnly Property IsInterface As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsLayoutSequential
  id: IsLayoutSequential
  parent: System.Reflection.TypeInfo
  name: IsLayoutSequential
  fullName: System.Reflection.TypeInfo.IsLayoutSequential
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 56
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsLayoutSequential { get; }
    content.vb: Public ReadOnly Property IsLayoutSequential As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsMarshalByRef
  id: IsMarshalByRef
  parent: System.Reflection.TypeInfo
  name: IsMarshalByRef
  fullName: System.Reflection.TypeInfo.IsMarshalByRef
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 57
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsMarshalByRef { get; }
    content.vb: Public ReadOnly Property IsMarshalByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNested
  id: IsNested
  parent: System.Reflection.TypeInfo
  name: IsNested
  fullName: System.Reflection.TypeInfo.IsNested
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 58
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNested { get; }
    content.vb: Public ReadOnly Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNestedAssembly
  id: IsNestedAssembly
  parent: System.Reflection.TypeInfo
  name: IsNestedAssembly
  fullName: System.Reflection.TypeInfo.IsNestedAssembly
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedAssembly { get; }
    content.vb: Public ReadOnly Property IsNestedAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem
  id: IsNestedFamANDAssem
  parent: System.Reflection.TypeInfo
  name: IsNestedFamANDAssem
  fullName: System.Reflection.TypeInfo.IsNestedFamANDAssem
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 60
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamANDAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamANDAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNestedFamily
  id: IsNestedFamily
  parent: System.Reflection.TypeInfo
  name: IsNestedFamily
  fullName: System.Reflection.TypeInfo.IsNestedFamily
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 61
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamily { get; }
    content.vb: Public ReadOnly Property IsNestedFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNestedFamORAssem
  id: IsNestedFamORAssem
  parent: System.Reflection.TypeInfo
  name: IsNestedFamORAssem
  fullName: System.Reflection.TypeInfo.IsNestedFamORAssem
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 62
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamORAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamORAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNestedPrivate
  id: IsNestedPrivate
  parent: System.Reflection.TypeInfo
  name: IsNestedPrivate
  fullName: System.Reflection.TypeInfo.IsNestedPrivate
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 63
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedPrivate { get; }
    content.vb: Public ReadOnly Property IsNestedPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNestedPublic
  id: IsNestedPublic
  parent: System.Reflection.TypeInfo
  name: IsNestedPublic
  fullName: System.Reflection.TypeInfo.IsNestedPublic
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 64
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedPublic { get; }
    content.vb: Public ReadOnly Property IsNestedPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsNotPublic
  id: IsNotPublic
  parent: System.Reflection.TypeInfo
  name: IsNotPublic
  fullName: System.Reflection.TypeInfo.IsNotPublic
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 65
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNotPublic { get; }
    content.vb: Public ReadOnly Property IsNotPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsPointer
  id: IsPointer
  parent: System.Reflection.TypeInfo
  name: IsPointer
  fullName: System.Reflection.TypeInfo.IsPointer
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 66
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsPointer { get; }
    content.vb: Public ReadOnly Property IsPointer As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsPrimitive
  id: IsPrimitive
  parent: System.Reflection.TypeInfo
  name: IsPrimitive
  fullName: System.Reflection.TypeInfo.IsPrimitive
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 67
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsPrimitive { get; }
    content.vb: Public Overridable ReadOnly Property IsPrimitive As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.TypeInfo
  name: IsPublic
  fullName: System.Reflection.TypeInfo.IsPublic
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsSealed
  id: IsSealed
  parent: System.Reflection.TypeInfo
  name: IsSealed
  fullName: System.Reflection.TypeInfo.IsSealed
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 69
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsSealed { get; }
    content.vb: Public ReadOnly Property IsSealed As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsVisible
  id: IsVisible
  parent: System.Reflection.TypeInfo
  name: IsVisible
  fullName: System.Reflection.TypeInfo.IsVisible
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 70
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsVisible { get; }
    content.vb: Public ReadOnly Property IsVisible As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsSerializable
  id: IsSerializable
  parent: System.Reflection.TypeInfo
  name: IsSerializable
  fullName: System.Reflection.TypeInfo.IsSerializable
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 71
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsSerializable { get; }
    content.vb: Public MustOverride ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.TypeInfo
  name: IsSpecialName
  fullName: System.Reflection.TypeInfo.IsSpecialName
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 72
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsUnicodeClass
  id: IsUnicodeClass
  parent: System.Reflection.TypeInfo
  name: IsUnicodeClass
  fullName: System.Reflection.TypeInfo.IsUnicodeClass
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 73
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsUnicodeClass { get; }
    content.vb: Public ReadOnly Property IsUnicodeClass As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.IsValueType
  id: IsValueType
  parent: System.Reflection.TypeInfo
  name: IsValueType
  fullName: System.Reflection.TypeInfo.IsValueType
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 74
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsValueType { get; }
    content.vb: Public Overridable ReadOnly Property IsValueType As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Reflection.TypeInfo.Namespace
  id: Namespace
  parent: System.Reflection.TypeInfo
  name: Namespace
  fullName: System.Reflection.TypeInfo.Namespace
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 75
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string Namespace { get; }
    content.vb: Public MustOverride ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
- uid: System.Reflection.TypeInfo.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.TypeInfo
  name: AssemblyQualifiedName
  fullName: System.Reflection.TypeInfo.AssemblyQualifiedName
  type: Property
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 76
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
- uid: System.Reflection.TypeInfo.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.TypeInfo
  name: MakeArrayType()
  fullName: System.Reflection.TypeInfo.MakeArrayType()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 78
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeArrayType()
    content.vb: Public MustOverride Function MakeArrayType As Type
    return:
      type: Type
- uid: System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.TypeInfo
  name: MakeArrayType(Int32)
  fullName: System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 79
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeArrayType(int rank)
    content.vb: Public MustOverride Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
    return:
      type: Type
- uid: System.Reflection.TypeInfo.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.TypeInfo
  name: MakeByRefType()
  fullName: System.Reflection.TypeInfo.MakeByRefType()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 80
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeByRefType()
    content.vb: Public MustOverride Function MakeByRefType As Type
    return:
      type: Type
- uid: System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.TypeInfo
  name: MakeGenericType(Type[])
  name.vb: MakeGenericType(Type())
  fullName: System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  fullName.vb: System.Reflection.TypeInfo.MakeGenericType(System.Type())
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 81
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public MustOverride Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
    return:
      type: Type
- uid: System.Reflection.TypeInfo.MakePointerType
  id: MakePointerType
  parent: System.Reflection.TypeInfo
  name: MakePointerType()
  fullName: System.Reflection.TypeInfo.MakePointerType()
  type: Method
  source:
    remote: *o1
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 82
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakePointerType()
    content.vb: Public MustOverride Function MakePointerType As Type
    return:
      type: Type
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.IReflectableType
  parent: System.Reflection
  isExternal: false
  name: IReflectableType
  fullName: System.Reflection.IReflectableType
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<ConstructorInfo>
  name.vb: Collections.Generic.IEnumerable(Of ConstructorInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.ConstructorInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<EventInfo>
  name.vb: Collections.Generic.IEnumerable(Of EventInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.EventInfo
    name: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.EventInfo
    name: EventInfo
    fullName: System.Reflection.EventInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<FieldInfo>
  name.vb: Collections.Generic.IEnumerable(Of FieldInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MemberInfo>
  name.vb: Collections.Generic.IEnumerable(Of MemberInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MethodInfo>
  name.vb: Collections.Generic.IEnumerable(Of MethodInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TypeInfo>
  name.vb: Collections.Generic.IEnumerable(Of TypeInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<PropertyInfo>
  name.vb: Collections.Generic.IEnumerable(Of PropertyInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: )
    fullName: )
- uid: System.Type[]
  isExternal: false
  name: Type[]
  name.vb: Type()
  fullName: System.Type[]
  fullName.vb: System.Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Type}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Type>
  name.vb: Collections.Generic.IEnumerable(Of Type)
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: Type[]
  isExternal: true
  name: Type[]
  name.vb: Type()
  fullName: Type[]
  fullName.vb: Type()
  spec.csharp:
  - uid: Type
    name: Type
    fullName: Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Type
    name: Type
    fullName: Type
    isExternal: true
  - name: ()
    fullName: ()
- uid: Type
  isExternal: true
  name: Type
  fullName: Type
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Reflection.Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodBase
  fullName: System.Reflection.MethodBase
- uid: GenericParameterAttributes
  isExternal: true
  name: GenericParameterAttributes
  fullName: GenericParameterAttributes
- uid: Guid
  isExternal: true
  name: Guid
  fullName: Guid
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
