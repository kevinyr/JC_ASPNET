items:
- uid: System.Security.AccessControl.QualifiedAce
  id: QualifiedAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.QualifiedAce.AceQualifier
  - System.Security.AccessControl.QualifiedAce.GetOpaque
  - System.Security.AccessControl.QualifiedAce.IsCallback
  - System.Security.AccessControl.QualifiedAce.OpaqueLength
  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  name: QualifiedAce
  fullName: System.Security.AccessControl.QualifiedAce
  type: Class
  source:
    remote: &o0
      path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
    startLine: 1115
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Represents an Access Control Entry (ACE) that contains a qualifier. The qualifier, represented by an <xref href="System.Security.AccessControl.AceQualifier" data-throw-if-not-resolved="false"></xref> object, specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms. The <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> class is the abstract base class for the <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> and <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> classes.
  syntax:
    content: 'public abstract class QualifiedAce : KnownAce'
    content.vb: Public MustInherit Class QualifiedAce Inherits KnownAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  - System.Security.AccessControl.KnownAce
  inheritedMembers:
  - System.Security.AccessControl.KnownAce.AccessMask
  - System.Security.AccessControl.KnownAce.SecurityIdentifier
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
- uid: System.Security.AccessControl.QualifiedAce.AceQualifier
  id: AceQualifier
  parent: System.Security.AccessControl.QualifiedAce
  name: AceQualifier
  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier
  type: Property
  source:
    remote: *o0
    path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
    startLine: 1235
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets a value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.
  syntax:
    content: public AceQualifier AceQualifier { get; }
    content.vb: Public ReadOnly Property AceQualifier As AceQualifier
    parameters: []
    return:
      type: System.Security.AccessControl.AceQualifier
      description: A value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.
- uid: System.Security.AccessControl.QualifiedAce.IsCallback
  id: IsCallback
  parent: System.Security.AccessControl.QualifiedAce
  name: IsCallback
  fullName: System.Security.AccessControl.QualifiedAce.IsCallback
  type: Property
  source:
    remote: *o0
    path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
    startLine: 1250
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Specifies whether this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object contains callback data.
  syntax:
    content: public bool IsCallback { get; }
    content.vb: Public ReadOnly Property IsCallback As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object contains callback data; otherwise, false.
- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength
  id: OpaqueLength
  parent: System.Security.AccessControl.QualifiedAce
  name: OpaqueLength
  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength
  type: Property
  source:
    remote: *o0
    path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
    startLine: 1269
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length of the opaque callback data associated with this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object. This property is valid only for callback Access Control Entries (ACEs).
  syntax:
    content: public int OpaqueLength { get; }
    content.vb: Public ReadOnly Property OpaqueLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length of the opaque callback data.
- uid: System.Security.AccessControl.QualifiedAce.GetOpaque
  id: GetOpaque
  parent: System.Security.AccessControl.QualifiedAce
  name: GetOpaque()
  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()
  type: Method
  source:
    remote: *o0
    path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
    startLine: 1293
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Returns the opaque callback data associated with this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public byte[] GetOpaque()
    content.vb: Public Function GetOpaque As Byte()
    return:
      type: System.Byte[]
      description: An array of byte values that represents the opaque callback data associated with this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object.
- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  id: SetOpaque(System.Byte[])
  parent: System.Security.AccessControl.QualifiedAce
  name: SetOpaque(Byte[])
  name.vb: SetOpaque(Byte())
  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  fullName.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Security.AccessControl/src/System/Security/AccessControl/ACE.cs
    startLine: 1298
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Sets the opaque callback data associated with this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public void SetOpaque(byte[] opaque)
    content.vb: Public Sub SetOpaque(opaque As Byte())
    parameters:
    - id: opaque
      type: System.Byte[]
      description: An array of byte values that represents the opaque callback data for this <xref href="System.Security.AccessControl.QualifiedAce" data-throw-if-not-resolved="false"></xref> object.
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.KnownAce
  parent: System.Security.AccessControl
  isExternal: false
  name: KnownAce
  fullName: System.Security.AccessControl.KnownAce
- uid: System.Security.AccessControl.KnownAce.AccessMask
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: AccessMask
  fullName: System.Security.AccessControl.KnownAce.AccessMask
- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: CreateFromBinaryForm(Byte[], Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  fullName.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  fullName.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.AccessControl.AceQualifier
  parent: System.Security.AccessControl
  isExternal: false
  name: AceQualifier
  fullName: System.Security.AccessControl.AceQualifier
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
