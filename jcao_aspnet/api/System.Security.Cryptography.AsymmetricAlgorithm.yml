items:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm
  id: AsymmetricAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  langs:
  - csharp
  - vb
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsymmetricAlgorithm
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 10
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: 'public abstract class AsymmetricAlgorithm : IDisposable'
    content.vb: >-
      Public MustInherit Class AsymmetricAlgorithm
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: protected AsymmetricAlgorithm()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySize
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 13
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: public virtual int KeySize { get; set; }
    content.vb: Public Overridable Property KeySize As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizes
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 14
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: public virtual KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overridable ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 15
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySizeValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: protected int KeySizeValue
    content.vb: Protected KeySizeValue As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizesValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 18
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  syntax:
    content: protected KeySizes[] LegalKeySizesValue
    content.vb: Protected LegalKeySizesValue As KeySizes()
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.KeySizes[]
  name: KeySizes[]
  nameWithType: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  nameWithType.vb: KeySizes()
  fullname.vb: System.Security.Cryptography.KeySizes()
  name.vb: KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
