items:
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  id: ECDiffieHellmanKeyDerivationFunction
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  - System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  - System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  langs:
  - csharp
  - vb
  name: ECDiffieHellmanKeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  type: Enum
  source:
    remote:
      path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
    startLine: 15
  assemblies:
  - System.Security.Cryptography.Encryption.ECDiffieHellman
  namespace: System.Security.Cryptography
  summary: Specifies the key derivation function that the <xref href="System.Security.Cryptography.ECDiffieHellmanCng" data-throw-if-not-resolved="false"></xref> class will use to convert secret agreements into key material.
  syntax:
    content: 'public enum ECDiffieHellmanKeyDerivationFunction : int'
    content.vb: Public Enum ECDiffieHellmanKeyDerivationFunction As Integer
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  id: Hash
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  langs:
  - csharp
  - vb
  name: Hash
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Encryption.ECDiffieHellman
  namespace: System.Security.Cryptography
  summary: A hash algorithm is used to generate key material. The <xref href="System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" data-throw-if-not-resolved="false"></xref> property specifies the name of the algorithm to use. If the algorithm name is not specified, <xref href="System.Security.Cryptography.SHA256" data-throw-if-not-resolved="false"></xref> is used as the default algorithm.
  syntax:
    content: Hash = null
    content.vb: Hash = Nothing
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  id: Hmac
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  langs:
  - csharp
  - vb
  name: Hmac
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
    startLine: 18
  assemblies:
  - System.Security.Cryptography.Encryption.ECDiffieHellman
  namespace: System.Security.Cryptography
  summary: A Hash-based Message Authentication Code (HMAC) algorithm is used to generate key material. The <xref href="System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" data-throw-if-not-resolved="false"></xref> property specifies the key to use. Either this property must be set or the <xref href="System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" data-throw-if-not-resolved="false"></xref> property must be set to true; otherwise, a <xref href="System.Security.Cryptography.CryptographicException" data-throw-if-not-resolved="false"></xref> is thrown when you use <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" data-throw-if-not-resolved="false"></xref>. If both properties are set, the secret agreement is used as the HMAC key.
  syntax:
    content: Hmac = null
    content.vb: Hmac = Nothing
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  id: Tls
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  langs:
  - csharp
  - vb
  name: Tls
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Encryption.ECDiffieHellman/ref/System.Security.Cryptography.Encryption.ECDiffieHellman.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Encryption.ECDiffieHellman
  namespace: System.Security.Cryptography
  summary: The Transport Layer Security (TLS) protocol is used to generate key material. The <xref href="System.Security.Cryptography.ECDiffieHellmanCng.Seed" data-throw-if-not-resolved="false"></xref> and <xref href="System.Security.Cryptography.ECDiffieHellmanCng.Label" data-throw-if-not-resolved="false"></xref> properties must be set; otherwise, a <xref href="System.Security.Cryptography.CryptographicException" data-throw-if-not-resolved="false"></xref> is thrown when you use <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: Tls = null
    content.vb: Tls = Nothing
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
