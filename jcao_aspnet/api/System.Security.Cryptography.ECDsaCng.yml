items:
- uid: System.Security.Cryptography.ECDsaCng
  id: ECDsaCng
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.ECDsaCng.#ctor
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsaCng.Key
  - System.Security.Cryptography.ECDsaCng.LegalKeySizes
  - System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  name: ECDsaCng
  fullName: System.Security.Cryptography.ECDsaCng
  type: Class
  source:
    remote: &o2
      path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.SignVerify.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.SignVerify.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).
  syntax:
    content: 'public sealed class ECDsaCng : ECDsa'
    content.vb: Public NotInheritable Class ECDsaCng Inherits ECDsa
  inheritance:
  - System.Object
  - System.Security.Cryptography.ECDsa
  inheritedMembers:
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsaCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsaCng
  name: ECDsaCng()
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng()
  type: Constructor
  source:
    remote: &o0
      path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng" data-throw-if-not-resolved="false"></xref> class with a random key pair.
  syntax:
    content: public ECDsaCng()
    content.vb: Public Sub New
  exceptions:
  - type: System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.ECDsaCng
  name: ECDsaCng(Int32)
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.cs
    startLine: 26
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng" data-throw-if-not-resolved="false"></xref> class with a random key pair, using the specified key size.
  syntax:
    content: public ECDsaCng(int keySize)
    content.vb: Public Sub New(keySize As Integer)
    parameters:
    - id: keySize
      type: System.Int32
      description: The size of the key. Valid key sizes are 256, 384, and 521 bits.
  exceptions:
  - type: System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
  - type: System.Security.Cryptography.CryptographicException
    description: '*keySize* specifies an invalid length.'
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.ECDsaCng
  name: ECDsaCng(CngKey)
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(System.Security.Cryptography.CngKey)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.cs
    startLine: 40
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsaCng" data-throw-if-not-resolved="false"></xref> class by using the specified <xref href="System.Security.Cryptography.CngKey" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public ECDsaCng(CngKey key)
    content.vb: Public Sub New(key As CngKey)
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: The key that will be used as input to the cryptographic operations performed by the current object.
  exceptions:
  - type: System.ArgumentException
    description: '*key* does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.'
  - type: System.ArgumentNullException
    description: '*key* is null.'
  - type: System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
- uid: System.Security.Cryptography.ECDsaCng.Key
  id: Key
  parent: System.Security.Cryptography.ECDsaCng
  name: Key
  fullName: System.Security.Cryptography.ECDsaCng.Key
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.Key.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.Key.cs
    startLine: 21
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Gets or sets the key to use when signing and verifying data.
  syntax:
    content: public CngKey Key { get; }
    content.vb: Public ReadOnly Property Key As CngKey
    parameters: []
    return:
      type: System.Security.Cryptography.CngKey
      description: An object that specifies the key.
- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.ECDsaCng
  name: LegalKeySizes
  fullName: System.Security.Cryptography.ECDsaCng.LegalKeySizes
  type: Property
  source:
    remote: *o0
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.cs
    startLine: 51
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: public override KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.cs
    startLine: 59
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  fullName.vb: System.Security.Cryptography.ECDsaCng.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote: &o1
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 238
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)
    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
    return:
      type: System.Byte[]
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  name: HashData(IO.Stream, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote: *o1
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 239
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm)
    content.vb: Protected Overrides Function HashData(data As IO.Stream, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.IO.Stream
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
    return:
      type: System.Byte[]
- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  name: SignHash(Byte[])
  name.vb: SignHash(Byte())
  fullName: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  fullName.vb: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte())
  type: Method
  source:
    remote: *o2
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.SignVerify.cs
    startLine: 21
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Generates a signature for the specified hash value.
  syntax:
    content: public override byte[] SignHash(byte[] hash)
    content.vb: Public Overrides Function SignHash(hash As Byte()) As Byte()
    parameters:
    - id: hash
      type: System.Byte[]
      description: The hash value of the data to be signed.
    return:
      type: System.Byte[]
      description: A digital signature for the specified hash value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*hash* is null.'
  - type: System.Security.Cryptography.CryptographicException
    description: The key information that is associated with the instance does not have a private key.
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  name: VerifyHash(Byte[], Byte[])
  name.vb: VerifyHash(Byte(), Byte())
  fullName: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[], System.Byte[])
  fullName.vb: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte(), System.Byte())
  type: Method
  source:
    remote: *o2
    path: src/System.Security.Cryptography.Cng/src/System/Security/Cryptography/ECDsaCng.SignVerify.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Verifies the specified digital signature against a specified hash value.
  syntax:
    content: public override bool VerifyHash(byte[] hash, byte[] signature)
    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte()) As Boolean
    parameters:
    - id: hash
      type: System.Byte[]
      description: The hash value of the data to be verified.
    - id: signature
      type: System.Byte[]
      description: The digital signature of the data to be verified against the hash value.
    return:
      type: System.Boolean
      description: true if the signature is valid; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*hash* or *signature* is null.'
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: true
  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)
  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  fullName.vb: System.Security.Cryptography.ECDsa.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
    name: SignData
    fullName: System.Security.Cryptography.ECDsa.SignData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
    name: SignData
    fullName: System.Security.Cryptography.ECDsa.SignData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: true
  name: SignData(Byte[], HashAlgorithmName)
  name.vb: SignData(Byte(), HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  fullName.vb: System.Security.Cryptography.ECDsa.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: SignData
    fullName: System.Security.Cryptography.ECDsa.SignData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: SignData
    fullName: System.Security.Cryptography.ECDsa.SignData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: true
  name: SignData(IO.Stream, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
    name: SignData
    fullName: System.Security.Cryptography.ECDsa.SignData
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: IO.Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
    name: SignData
    fullName: System.Security.Cryptography.ECDsa.SignData
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: IO.Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: true
  name: VerifyData(Byte[], Byte[], HashAlgorithmName)
  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: VerifyData
    fullName: System.Security.Cryptography.ECDsa.VerifyData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: VerifyData
    fullName: System.Security.Cryptography.ECDsa.VerifyData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: true
  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: VerifyData
    fullName: System.Security.Cryptography.ECDsa.VerifyData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: VerifyData
    fullName: System.Security.Cryptography.ECDsa.VerifyData
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: true
  name: VerifyData(IO.Stream, Byte[], HashAlgorithmName)
  name.vb: VerifyData(IO.Stream, Byte(), HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  spec.csharp:
  - uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: VerifyData
    fullName: System.Security.Cryptography.ECDsa.VerifyData
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: IO.Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
    name: VerifyData
    fullName: System.Security.Cryptography.ECDsa.VerifyData
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: IO.Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
    isExternal: true
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.KeySizes[]
  isExternal: false
  name: KeySizes[]
  name.vb: KeySizes()
  fullName: System.Security.Cryptography.KeySizes[]
  fullName.vb: System.Security.Cryptography.KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
