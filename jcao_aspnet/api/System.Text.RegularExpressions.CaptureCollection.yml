items:
- uid: System.Text.RegularExpressions.CaptureCollection
  id: CaptureCollection
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.CaptureCollection.Count
  - System.Text.RegularExpressions.CaptureCollection.GetEnumerator
  - System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  langs:
  - csharp
  - vb
  name: CaptureCollection
  fullName: System.Text.RegularExpressions.CaptureCollection
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 15
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Represents the set of captures made by a single capturing group.
  syntax:
    content: 'public class CaptureCollection : Collections.ICollection, Collections.IEnumerable'
    content.vb: Public Class CaptureCollection Inherits Collections.ICollection Implements Collections.IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
- uid: System.Text.RegularExpressions.CaptureCollection.Count
  id: Count
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Text.RegularExpressions.CaptureCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 18
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets the number of substrings captured by the group.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of items in the <xref href="System.Text.RegularExpressions.CaptureCollection" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  name.vb: Item(Int32)
  fullName: System.Text.RegularExpressions.CaptureCollection.Item[System.Int32]
  fullName.vb: System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 19
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets an individual member of the collection.
  syntax:
    content: public Capture this[int i] { get; }
    content.vb: Public ReadOnly Property Item(i As Integer) As Capture
    parameters:
    - id: i
      type: System.Int32
      description: Index into the capture collection.
    return:
      type: System.Text.RegularExpressions.Capture
      description: The captured substring at position *i* in the collection.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*i* is less than 0 or greater than <xref href="System.Text.RegularExpressions.CaptureCollection.Count" data-throw-if-not-resolved="false"></xref>.'
- uid: System.Text.RegularExpressions.CaptureCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Text.RegularExpressions.CaptureCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Text.RegularExpressions.CaptureCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 22
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Provides an enumerator that iterates through the collection.
  syntax:
    content: public Collections.IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Collections.IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An object that contains all <xref href="System.Text.RegularExpressions.Capture" data-throw-if-not-resolved="false"></xref> objects within the <xref href="System.Text.RegularExpressions.CaptureCollection" data-throw-if-not-resolved="false"></xref>.
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.RegularExpressions.Capture
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Capture
  fullName: System.Text.RegularExpressions.Capture
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
