items:
- uid: System.Text.UTF32Encoding
  id: UTF32Encoding
  parent: System.Text
  children:
  - System.Text.UTF32Encoding.#ctor
  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Text.UTF32Encoding.Equals(System.Object)
  - System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UTF32Encoding.GetByteCount(System.String)
  - System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UTF32Encoding.GetDecoder
  - System.Text.UTF32Encoding.GetEncoder
  - System.Text.UTF32Encoding.GetHashCode
  - System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  - System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - System.Text.UTF32Encoding.GetPreamble
  - System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  name: UTF32Encoding
  fullName: System.Text.UTF32Encoding
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Text/UTF32Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 24
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Represents a UTF-32 encoding of Unicode characters.
  syntax:
    content: 'public sealed class UTF32Encoding : Encoding'
    content.vb: Public NotInheritable Class UTF32Encoding Inherits Encoding
  inheritance:
  - System.Object
- uid: System.Text.UTF32Encoding.#ctor
  id: '#ctor'
  parent: System.Text.UTF32Encoding
  name: UTF32Encoding()
  fullName: System.Text.UTF32Encoding.UTF32Encoding()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 44
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public UTF32Encoding()
    content.vb: Public Sub New
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean)'
  parent: System.Text.UTF32Encoding
  name: UTF32Encoding(Boolean, Boolean)
  fullName: System.Text.UTF32Encoding.UTF32Encoding(System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 49
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href="System.Text.UTF32Encoding.GetPreamble" data-throw-if-not-resolved="false"></xref> method returns a Unicode Unicode byte order mark.
  syntax:
    content: public UTF32Encoding(bool bigEndian, bool byteOrderMark)
    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean)
    parameters:
    - id: bigEndian
      type: System.Boolean
      description: true to use the big endian byte order (most significant byte first), or false to use the little endian byte order (least significant byte first).
    - id: byteOrderMark
      type: System.Boolean
      description: true to specify that a Unicode byte order mark is provided; otherwise, false.
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Text.UTF32Encoding
  name: UTF32Encoding(Boolean, Boolean, Boolean)
  fullName: System.Text.UTF32Encoding.UTF32Encoding(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 55
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.
  syntax:
    content: public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters)
    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)
    parameters:
    - id: bigEndian
      type: System.Boolean
      description: true to use the big endian byte order (most significant byte first), or false to use the little endian byte order (least significant byte first).
    - id: byteOrderMark
      type: System.Boolean
      description: true to specify that a Unicode byte order mark is provided; otherwise, false.
    - id: throwOnInvalidCharacters
      type: System.Boolean
      description: true to specify that an exception should be thrown when an invalid encoding is detected; otherwise, false.
- uid: System.Text.UTF32Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UTF32Encoding
  name: Equals(Object)
  fullName: System.Text.UTF32Encoding.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1206
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to the current <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with the current object.
    return:
      type: System.Boolean
      description: true if *value* is an instance of <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> and is equal to the current object; otherwise, false.
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetByteCount(Char*, Int32)
  fullName: System.Text.UTF32Encoding.GetByteCount(System.Char*, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 145
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.
  syntax:
    content: public override int GetByteCount(char *chars, int count)
    content.vb: Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  exceptions:
  - type: System.ArgumentNullException
    description: '*chars* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*count* is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *chars* contains an invalid sequence of characters.
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetByteCount(Char[], Int32, Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
  fullName: System.Text.UTF32Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.Text.UTF32Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 98
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.
  syntax:
    content: public override int GetByteCount(char[] chars, int index, int count)
    content.vb: Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  exceptions:
  - type: System.ArgumentNullException
    description: '*chars* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is less than zero.-or- *index* and *count* do not denote a valid range in *chars*.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *chars* contains an invalid sequence of characters.
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UTF32Encoding
  name: GetByteCount(String)
  fullName: System.Text.UTF32Encoding.GetByteCount(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 129
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override int GetByteCount(string s)
    content.vb: Public Overrides Function GetByteCount(s As String) As Integer
    parameters:
    - id: s
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the set of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  exceptions:
  - type: System.ArgumentNullException
    description: '*s* is null.'
  - type: System.ArgumentOutOfRangeException
    description: The resulting number of bytes is greater than the maximum number that can be returned as an integer.
  - type: System.ArgumentException
    description: Error detection is enabled, and *s* contains an invalid sequence of characters.
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.UTF32Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 259
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.
  syntax:
    content: public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)
    content.vb: Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by the *bytes* parameter.
  exceptions:
  - type: System.ArgumentNullException
    description: '*chars* is null.-or- *bytes* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*charCount* or *byteCount* is less than zero.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *chars* contains an invalid sequence of characters.-or- *byteCount* is less than the resulting number of bytes.
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
  fullName: System.Text.UTF32Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  fullName.vb: System.Text.UTF32Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 215
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Encodes a set of characters from the specified character array into the specified byte array.
  syntax:
    content: public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into *bytes*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*chars* is null.-or- *bytes* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*charIndex* or *charCount* or *byteIndex* is less than zero.-or- *charIndex* and *charCount* do not denote a valid range in *chars*.-or- *byteIndex* is not a valid index in *bytes*.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *chars* contains an invalid sequence of characters.-or- *bytes* does not have enough capacity from *byteIndex* to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
  fullName: System.Text.UTF32Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  fullName.vb: System.Text.UTF32Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 168
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Encodes a set of characters from the specified <xref href="System.String" data-throw-if-not-resolved="false"></xref> into the specified byte array.
  syntax:
    content: public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: s
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into *bytes*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*s* is null.-or- *bytes* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*charIndex* or *charCount* or *byteIndex* is less than zero.-or- *charIndex* and *charCount* do not denote a valid range in *chars*.-or- *byteIndex* is not a valid index in *bytes*.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *s* contains an invalid sequence of characters.-or- *bytes* does not have enough capacity from *byteIndex* to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetCharCount(Byte*, Int32)
  fullName: System.Text.UTF32Encoding.GetCharCount(System.Byte*, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 314
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.
  syntax:
    content: public override int GetCharCount(byte *bytes, int count)
    content.vb: Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  exceptions:
  - type: System.ArgumentNullException
    description: '*bytes* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*count* is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *bytes* contains an invalid sequence of bytes.
  - type: System.Text.DecoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.DecoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.DecoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetCharCount(Byte[], Int32, Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
  fullName: System.Text.UTF32Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Text.UTF32Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 284
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  syntax:
    content: public override int GetCharCount(byte[] bytes, int index, int count)
    content.vb: Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  exceptions:
  - type: System.ArgumentNullException
    description: '*bytes* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is less than zero.-or- *index* and *count* do not denote a valid range in *bytes*.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *bytes* contains an invalid sequence of bytes.
  - type: System.Text.DecoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.DecoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.DecoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.UTF32Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 380
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.
  syntax:
    content: public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)
    content.vb: Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by *chars*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*bytes* is null.-or- *chars* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*byteCount* or *charCount* is less than zero.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *bytes* contains an invalid sequence of bytes.-or- *charCount* is less than the resulting number of characters.
  - type: System.Text.DecoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.DecoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.DecoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
  fullName: System.Text.UTF32Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  fullName.vb: System.Text.UTF32Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 336
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.
  syntax:
    content: public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into *chars*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*bytes* is null.-or- *chars* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*byteIndex* or *byteCount* or *charIndex* is less than zero.-or- *byteindex* and *byteCount* do not denote a valid range in *bytes*.-or- *charIndex* is not a valid index in *chars*.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *bytes* contains an invalid sequence of bytes.-or- *chars* does not have enough capacity from *charIndex* to the end of the array to accommodate the resulting characters.
  - type: System.Text.DecoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.DecoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.DecoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UTF32Encoding
  name: GetDecoder()
  fullName: System.Text.UTF32Encoding.GetDecoder()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1122
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.
  syntax:
    content: public override Decoder GetDecoder()
    content.vb: Public Overrides Function GetDecoder As Decoder
    return:
      type: System.Text.Decoder
      description: A <xref href="System.Text.Decoder" data-throw-if-not-resolved="false"></xref> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.
- uid: System.Text.UTF32Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UTF32Encoding
  name: GetEncoder()
  fullName: System.Text.UTF32Encoding.GetEncoder()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1128
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.
  syntax:
    content: public override Encoder GetEncoder()
    content.vb: Public Overrides Function GetEncoder As Encoder
    return:
      type: System.Text.Encoder
      description: A <xref href="System.Text.Encoder" data-throw-if-not-resolved="false"></xref> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.
- uid: System.Text.UTF32Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UTF32Encoding
  name: GetHashCode()
  fullName: System.Text.UTF32Encoding.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1221
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Returns the hash code for the current instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: The hash code for the current <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> object.
- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetMaxByteCount(Int32)
  fullName: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1134
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.
  syntax:
    content: public override int GetMaxByteCount(int charCount)
    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer
    parameters:
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The maximum number of bytes produced by encoding the specified number of characters.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*charCount* is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer.'
  - type: System.Text.EncoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.EncoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.EncoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetMaxCharCount(Int32)
  fullName: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1157
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.
  syntax:
    content: public override int GetMaxCharCount(int byteCount)
    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer
    parameters:
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The maximum number of characters produced by decoding the specified number of bytes.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*byteCount* is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer.'
  - type: System.Text.DecoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<xref href="System.Text.Encoding.DecoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.DecoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
- uid: System.Text.UTF32Encoding.GetPreamble
  id: GetPreamble
  parent: System.Text.UTF32Encoding
  name: GetPreamble()
  fullName: System.Text.UTF32Encoding.GetPreamble()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 1187
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Returns a Unicode byte order mark encoded in UTF-32 format, if the <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> object is configured to supply one.
  syntax:
    content: public override byte[] GetPreamble()
    content.vb: Public Overrides Function GetPreamble As Byte()
    return:
      type: System.Byte[]
      description: A byte array containing the Unicode byte order mark, if the <xref href="System.Text.UTF32Encoding" data-throw-if-not-resolved="false"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array.
- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  name: GetString(Byte[], Int32, Int32)
  name.vb: GetString(Byte(), Int32, Int32)
  fullName: System.Text.UTF32Encoding.GetString(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Text.UTF32Encoding.GetString(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Text/UTF32Encoding.cs
    startLine: 405
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: Decodes a range of bytes from a byte array into a string.
  syntax:
    content: public override string GetString(byte[] bytes, int index, int count)
    content.vb: Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A string that contains the results of decoding the specified sequence of bytes.
  exceptions:
  - type: System.ArgumentNullException
    description: '*bytes* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is less than zero.-or- *index* and *count* do not denote a valid range in *bytes*.'
  - type: System.ArgumentException
    description: Error detection is enabled, and *bytes* contains an invalid sequence of bytes.
  - type: System.Text.DecoderFallbackException
    description: A fallback occurred (see Character Encoding in the .NET Framework for a complete explanation)-and-<xref href="System.Text.Encoding.DecoderFallback" data-throw-if-not-resolved="false"></xref> is set to <xref href="System.Text.DecoderExceptionFallback" data-throw-if-not-resolved="false"></xref>.
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Char*
  isExternal: false
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char[]
  isExternal: false
  name: Char[]
  name.vb: Char()
  fullName: System.Char[]
  fullName.vb: System.Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  fullName: System.Text.Encoder
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
