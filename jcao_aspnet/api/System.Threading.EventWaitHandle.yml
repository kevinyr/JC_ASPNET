items:
- uid: System.Threading.EventWaitHandle
  id: EventWaitHandle
  parent: System.Threading
  children:
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)
  - System.Threading.EventWaitHandle.OpenExisting(System.String)
  - System.Threading.EventWaitHandle.Reset
  - System.Threading.EventWaitHandle.Set
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  name: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 41
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Represents a thread synchronization event.
  syntax:
    content: 'public class EventWaitHandle : WaitHandle'
    content.vb: Public Class EventWaitHandle Inherits WaitHandle
  inheritance:
  - System.Object
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode)'
  parent: System.Threading.EventWaitHandle
  name: EventWaitHandle(Boolean, EventResetMode)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(System.Boolean, System.Threading.EventResetMode)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 45
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.EventWaitHandle" data-throw-if-not-resolved="false"></xref> class, specifying whether the wait handle is initially signaled, and whether it resets automatically or manually.
  syntax:
    content: public EventWaitHandle(bool initialState, EventResetMode mode)
    content.vb: Public Sub New(initialState As Boolean, mode As EventResetMode)
    parameters:
    - id: initialState
      type: System.Boolean
      description: true to set the initial state to signaled; false to set it to nonsignaled.
    - id: mode
      type: System.Threading.EventResetMode
      description: One of the <xref href="System.Threading.EventResetMode" data-throw-if-not-resolved="false"></xref> values that determines whether the event resets automatically or manually.
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String)'
  parent: System.Threading.EventWaitHandle
  name: EventWaitHandle(Boolean, EventResetMode, String)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(System.Boolean, System.Threading.EventResetMode, System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 48
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.EventWaitHandle" data-throw-if-not-resolved="false"></xref> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, and the name of a system synchronization event.
  syntax:
    content: public EventWaitHandle(bool initialState, EventResetMode mode, string name)
    content.vb: Public Sub New(initialState As Boolean, mode As EventResetMode, name As String)
    parameters:
    - id: initialState
      type: System.Boolean
      description: true to set the initial state to signaled if the named event is created as a result of this call; false to set it to nonsignaled.
    - id: mode
      type: System.Threading.EventResetMode
      description: One of the <xref href="System.Threading.EventResetMode" data-throw-if-not-resolved="false"></xref> values that determines whether the event resets automatically or manually.
    - id: name
      type: System.String
      description: The name of a system-wide synchronization event.
  exceptions:
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    description: The named event exists and has access control security, but the user does not have <xref href="System.Security.AccessControl.EventWaitHandleRights.FullControl" data-throw-if-not-resolved="false"></xref>.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    description: The named event cannot be created, perhaps because a wait handle of a different type has the same name.
  - type: System.ArgumentException
    description: '*name* is longer than 260 characters.'
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)'
  parent: System.Threading.EventWaitHandle
  name: EventWaitHandle(Boolean, EventResetMode, String, out Boolean)
  name.vb: EventWaitHandle(Boolean, EventResetMode, String, ByRef Boolean)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(System.Boolean, System.Threading.EventResetMode, System.String, out System.Boolean)
  fullName.vb: System.Threading.EventWaitHandle.EventWaitHandle(System.Boolean, System.Threading.EventResetMode, System.String, ByRef System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 91
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.EventWaitHandle" data-throw-if-not-resolved="false"></xref> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, and a Boolean variable whose value after the call indicates whether the named system event was created.
  syntax:
    content: public EventWaitHandle(bool initialState, EventResetMode mode, string name, out bool createdNew)
    content.vb: Public Sub New(initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean)
    parameters:
    - id: initialState
      type: System.Boolean
      description: true to set the initial state to signaled if the named event is created as a result of this call; false to set it to nonsignaled.
    - id: mode
      type: System.Threading.EventResetMode
      description: One of the <xref href="System.Threading.EventResetMode" data-throw-if-not-resolved="false"></xref> values that determines whether the event resets automatically or manually.
    - id: name
      type: System.String
      description: The name of a system-wide synchronization event.
    - id: createdNew
      type: System.Boolean
      description: When this method returns, contains true if a local event was created (that is, if *name* is null or an empty string) or if the specified named system event was created; false if the specified named system event already existed. This parameter is passed uninitialized.
  exceptions:
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    description: The named event exists and has access control security, but the user does not have <xref href="System.Security.AccessControl.EventWaitHandleRights.FullControl" data-throw-if-not-resolved="false"></xref>.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    description: The named event cannot be created, perhaps because a wait handle of a different type has the same name.
  - type: System.ArgumentException
    description: '*name* is longer than 260 characters.'
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.EventWaitHandle
  name: OpenExisting(String)
  fullName: System.Threading.EventWaitHandle.OpenExisting(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 163
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named synchronization event, if it already exists.
  syntax:
    content: public static EventWaitHandle OpenExisting(string name)
    content.vb: Public Shared Function OpenExisting(name As String) As EventWaitHandle
    parameters:
    - id: name
      type: System.String
      description: The name of the system synchronization event to open.
    return:
      type: System.Threading.EventWaitHandle
      description: An  object that represents the named system event.
  exceptions:
  - type: System.ArgumentException
    description: '*name* is an empty string. -or-*name* is longer than 260 characters.'
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.Threading.WaitHandleCannotBeOpenedException
    description: The named system event does not exist.
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    description: The named event exists, but the user does not have the security access required to use it.
- uid: System.Threading.EventWaitHandle.Reset
  id: Reset
  parent: System.Threading.EventWaitHandle
  name: Reset()
  fullName: System.Threading.EventWaitHandle.Reset()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 258
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Sets the state of the event to nonsignaled, causing threads to block.
  syntax:
    content: public bool Reset()
    content.vb: Public Function Reset As Boolean
    return:
      type: System.Boolean
      description: true if the operation succeeds; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The <xref href="System.Threading.EventWaitHandle.Close" data-throw-if-not-resolved="false"></xref> method was previously called on this <xref href="System.Threading.EventWaitHandle" data-throw-if-not-resolved="false"></xref>.
- uid: System.Threading.EventWaitHandle.Set
  id: Set
  parent: System.Threading.EventWaitHandle
  name: Set()
  fullName: System.Threading.EventWaitHandle.Set()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 266
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
  syntax:
    content: public bool Set()
    content.vb: Public Function Set As Boolean
    return:
      type: System.Boolean
      description: true if the operation succeeds; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The <xref href="System.Threading.EventWaitHandle.Close" data-throw-if-not-resolved="false"></xref> method was previously called on this <xref href="System.Threading.EventWaitHandle" data-throw-if-not-resolved="false"></xref>.
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  id: TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  name: TryOpenExisting(String, out EventWaitHandle)
  name.vb: TryOpenExisting(String, ByRef EventWaitHandle)
  fullName: System.Threading.EventWaitHandle.TryOpenExisting(System.String, out System.Threading.EventWaitHandle)
  fullName.vb: System.Threading.EventWaitHandle.TryOpenExisting(System.String, ByRef System.Threading.EventWaitHandle)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/EventWaitHandle.cs
    startLine: 194
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.
  syntax:
    content: public static bool TryOpenExisting(string name, out EventWaitHandle result)
    content.vb: Public Shared Function TryOpenExisting(name As String, ByRef result As EventWaitHandle) As Boolean
    parameters:
    - id: name
      type: System.String
      description: The name of the system synchronization event to open.
    - id: result
      type: System.Threading.EventWaitHandle
      description: When this method returns, contains a <xref href="System.Threading.EventWaitHandle" data-throw-if-not-resolved="false"></xref> object that represents the named synchronization event if the call succeeded, or null if the call failed. This parameter is treated as uninitialized.
    return:
      type: System.Boolean
      description: true if the named synchronization event was opened successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: '*name* is an empty string.-or-*name* is longer than 260 characters.'
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    description: The named event exists, but the user does not have the desired security access.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  fullName: System.Threading.EventResetMode
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.Threading.WaitHandleCannotBeOpenedException
  isExternal: false
  name: WaitHandleCannotBeOpenedException
  fullName: System.Threading.WaitHandleCannotBeOpenedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
