items:
- uid: System.Threading.LockRecursionException
  id: LockRecursionException
  parent: System.Threading
  children:
  - System.Threading.LockRecursionException.#ctor
  - System.Threading.LockRecursionException.#ctor(System.String)
  - System.Threading.LockRecursionException.#ctor(System.String,System.Exception)
  name: LockRecursionException
  fullName: System.Threading.LockRecursionException
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/LockRecursionException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/LockRecursionException.cs
    startLine: 20
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: The exception that is thrown when recursive entry into a lock is not compatible with the recursion policy for the lock.
  syntax:
    content: 'public class LockRecursionException : Exception'
    content.vb: Public Class LockRecursionException Inherits Exception
  inheritance:
  - System.Object
- uid: System.Threading.LockRecursionException.#ctor
  id: '#ctor'
  parent: System.Threading.LockRecursionException
  name: LockRecursionException()
  fullName: System.Threading.LockRecursionException.LockRecursionException()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/LockRecursionException.cs
    startLine: 25
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.LockRecursionException" data-throw-if-not-resolved="false"></xref> class with a system-supplied message that describes the error.
  syntax:
    content: public LockRecursionException()
    content.vb: Public Sub New
- uid: System.Threading.LockRecursionException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Threading.LockRecursionException
  name: LockRecursionException(String)
  fullName: System.Threading.LockRecursionException.LockRecursionException(System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/LockRecursionException.cs
    startLine: 26
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.LockRecursionException" data-throw-if-not-resolved="false"></xref> class with a specified message that describes the error.
  syntax:
    content: public LockRecursionException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.
- uid: System.Threading.LockRecursionException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Threading.LockRecursionException
  name: LockRecursionException(String, Exception)
  fullName: System.Threading.LockRecursionException.LockRecursionException(System.String, System.Exception)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/LockRecursionException.cs
    startLine: 28
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.LockRecursionException" data-throw-if-not-resolved="false"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.
  syntax:
    content: public LockRecursionException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.
    - id: innerException
      type: System.Exception
      description: The exception that caused the current exception. If the *innerException* parameter is not null, the current exception is raised in a catch block that handles the inner exception.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
