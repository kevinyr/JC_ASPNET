items:
- uid: System.Threading.Tasks.TaskContinuationOptions
  id: TaskContinuationOptions
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  - System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  - System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  - System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  - System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  - System.Threading.Tasks.TaskContinuationOptions.LongRunning
  - System.Threading.Tasks.TaskContinuationOptions.None
  - System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  - System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  - System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  - System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  - System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
  type: Enum
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6904
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies the behavior for a task that is created by using the <xref href="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" data-throw-if-not-resolved="false"></xref> or <xref href="System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: 'public enum TaskContinuationOptions : int'
    content.vb: Public Enum TaskContinuationOptions As Integer
- uid: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  id: AttachedToParent
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: AttachedToParent
  fullName: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6934
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy. The continuation can be a child task only if its antecedent is also a child task. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <xref href="System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" data-throw-if-not-resolved="false"></xref> option so that the parent and child tasks are synchronized. Note that if a parent task is configured with the <xref href="System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" data-throw-if-not-resolved="false"></xref> option, the <xref href="System.Threading.Tasks.TaskCreationOptions.AttachedToParent" data-throw-if-not-resolved="false"></xref> option in the child task has no effect, and the child task will execute as a detached child task. For more information, see Attached and Detached Child Tasks.
  syntax:
    content: AttachedToParent = null
    content.vb: AttachedToParent = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  id: DenyChildAttach
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: DenyChildAttach
  fullName: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6939
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <xref href="System.Threading.Tasks.TaskCreationOptions.AttachedToParent" data-throw-if-not-resolved="false"></xref> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see Attached and Detached Child Tasks.
  syntax:
    content: DenyChildAttach = null
    content.vb: DenyChildAttach = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  id: ExecuteSynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: ExecuteSynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6992
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should be executed synchronously. With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation. If the antecedent's <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> is disposed in a finally block (Finally in Visual Basic), a continuation with this option will run in that finally block. Only very short-running continuations should be executed synchronously. Because the task executes synchronously, there is no need to call a method such as <xref href="System.Threading.Tasks.Task.Wait" data-throw-if-not-resolved="false"></xref> to ensure that the calling thread waits for the task to complete.
  syntax:
    content: ExecuteSynchronously = null
    content.vb: ExecuteSynchronously = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  id: HideScheduler
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: HideScheduler
  fullName: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6944
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that tasks created by the continuation by calling methods such as <xref href="System.Threading.Tasks.Task.Run(System.Action)" data-throw-if-not-resolved="false"></xref> or <xref href="System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" data-throw-if-not-resolved="false"></xref> see the default scheduler (<xref href="System.Threading.Tasks.TaskScheduler.Default" data-throw-if-not-resolved="false"></xref>) rather than the scheduler on which this continuation is running to be the current scheduler.
  syntax:
    content: HideScheduler = null
    content.vb: HideScheduler = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  id: LazyCancellation
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: LazyCancellation
  fullName: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6949
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.
  syntax:
    content: LazyCancellation = null
    content.vb: LazyCancellation = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  id: LongRunning
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: LongRunning
  fullName: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6930
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that a continuation will be a long-running, course-grained operation. It provides a hint to the <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that oversubscription may be warranted.
  syntax:
    content: LongRunning = null
    content.vb: LongRunning = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.None
  id: None
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: None
  fullName: System.Threading.Tasks.TaskContinuationOptions.None
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6914
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: When no continuation options are specified, specifies that default behavior should be used when executing a continuation. The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property value. It the continuation is a child task, it is created as a detached nested task.
  syntax:
    content: None = null
    content.vb: None = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  id: NotOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: NotOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6969
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should not be scheduled if its antecedent was canceled. An antecedent is canceled if its <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property upon completion is <xref href="System.Threading.Tasks.TaskStatus.Canceled" data-throw-if-not-resolved="false"></xref>. This option is not valid for multi-task continuations.
  syntax:
    content: NotOnCanceled = null
    content.vb: NotOnCanceled = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  id: NotOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: NotOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6964
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property upon completion is <xref href="System.Threading.Tasks.TaskStatus.Faulted" data-throw-if-not-resolved="false"></xref>. This option is not valid for multi-task continuations.
  syntax:
    content: NotOnFaulted = null
    content.vb: NotOnFaulted = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  id: NotOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: NotOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6959
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should not be scheduled if its antecedent ran to completion. An antecedent runs to completion if its <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property upon completion is <xref href="System.Threading.Tasks.TaskStatus.RanToCompletion" data-throw-if-not-resolved="false"></xref>. This option is not valid for multi-task continuations.
  syntax:
    content: NotOnRanToCompletion = null
    content.vb: NotOnRanToCompletion = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  id: OnlyOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: OnlyOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6984
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation should be scheduled only if its antecedent was canceled.  An antecedent is canceled if its <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property upon completion is <xref href="System.Threading.Tasks.TaskStatus.Canceled" data-throw-if-not-resolved="false"></xref>. This option is not valid for multi-task continuations.
  syntax:
    content: OnlyOnCanceled = null
    content.vb: OnlyOnCanceled = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  id: OnlyOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: OnlyOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6979
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property upon completion is <xref href="System.Threading.Tasks.TaskStatus.Faulted" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" data-throw-if-not-resolved="false"></xref>  option guarantees that the <xref href="System.Threading.Tasks.Task.Exception" data-throw-if-not-resolved="false"></xref> property in the antecedent is not null. You can use that property to catch the exception and see which exception caused the task to fault. If you do not access the <xref href="System.Threading.Tasks.Task.Exception" data-throw-if-not-resolved="false"></xref> property, the exception is unhandled. Also, if you attempt to access the <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property of a task that has been canceled or has faulted, a new exception is thrown. This option is not valid for multi-task continuations.
  syntax:
    content: OnlyOnFaulted = null
    content.vb: OnlyOnFaulted = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  id: OnlyOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: OnlyOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6974
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation should be scheduled only if its antecedent ran to completion. An antecedent runs to completion if its <xref href="System.Threading.Tasks.Task.Status" data-throw-if-not-resolved="false"></xref> property upon completion is <xref href="System.Threading.Tasks.TaskStatus.RanToCompletion" data-throw-if-not-resolved="false"></xref>. This option is not valid for multi-task continuations.
  syntax:
    content: OnlyOnRanToCompletion = null
    content.vb: OnlyOnRanToCompletion = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  id: PreferFairness
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: PreferFairness
  fullName: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6923
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: A hint to a <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.
  syntax:
    content: PreferFairness = null
    content.vb: PreferFairness = Nothing
- uid: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  id: RunContinuationsAsynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  name: RunContinuationsAsynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6951
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should be run asynchronously.  This option has precedence over <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: RunContinuationsAsynchronously = null
    content.vb: RunContinuationsAsynchronously = Nothing
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
