items:
- uid: System.Threading.Tasks.TaskFactory
  id: TaskFactory
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory.#ctor
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CancellationToken
  - System.Threading.Tasks.TaskFactory.ContinuationOptions
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.CreationOptions
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.Scheduler
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  name: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 39
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Provides support for creating and scheduling <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects.
  syntax:
    content: 'public class TaskFactory : object'
    content.vb: Public Class TaskFactory Inherits Object
  inheritance:
  - System.Object
- uid: System.Threading.Tasks.TaskFactory.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory
  name: TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 88
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> instance with the default configuration.
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory
  name: TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 109
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> instance with the specified configuration.
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to tasks created by this <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 204
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> instance with the specified configuration.
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The default <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to tasks created by this <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> to use when creating tasks with this TaskFactory.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> to use when creating continuation tasks with this TaskFactory.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The default <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* argument specifies an invalid <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>. -or-The *continuationOptions* argument specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 164
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> instance with the specified configuration.
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> to use when creating tasks with this TaskFactory.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> to use when creating continuation tasks with this TaskFactory.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* argument specifies an invalid <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>. -or-The *continuationOptions* argument specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  name: TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 133
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory" data-throw-if-not-resolved="false"></xref> instance with the specified configuration.
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  name: CancellationToken
  fullName: System.Threading.Tasks.TaskFactory.CancellationToken
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 243
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the default cancellation token for this task factory.
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: The default task cancellation token for this task factory.
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  name: ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory.ContinuationOptions
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 275
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the default task continuation options for this task factory.
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default task continuation options for this task factory.
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  name: CreationOptions
  fullName: System.Threading.Tasks.TaskFactory.CreationOptions
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 265
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the default task creation options for this task factory.
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default task creation options for this task factory.
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory
  name: Scheduler
  fullName: System.Threading.Tasks.TaskFactory.Scheduler
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 255
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the default task scheduler for this task factory.
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: The default task scheduler for this task factory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll(Task[], Action<Task[]>)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1800
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task())) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1832
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created *cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1916
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1869
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2096
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2132
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created *cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2224
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2173
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1944
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1977
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created *cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2065
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2016
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: The action delegate to execute when all tasks in the *tasks* array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationAction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2257
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2293
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created* cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2389
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created *cancellationToken* has already been disposed.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2336
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: An element in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ArgumentException
    description: The *tasks* array is empty or contains a null value.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny(Task[], Action<Task>)
  name.vb: ContinueWhenAny(Task(), Action(Of Task))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2530
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task)) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the *tasks* array completes.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null. -or-The The *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value. -or-The *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2561
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed. -or-*cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null. -or-The *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value. -or-The *tasks* array is empty .
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2645
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationAction* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2598
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the *tasks* array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationAction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *continuationOptions* argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2677
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2712
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.-or-The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2804
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2753
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *continuationOptions* argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2995
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: The action delegate to execute when one task in the *tasks* array completes.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 3027
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: The action delegate to execute when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.-or-The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationAction* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 3115
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: The action delegate to execute when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationAction* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 3066
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: The action delegate to execute when one task in the *tasks* array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationAction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *continuationOptions* argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2836
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2870
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.-or-The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2966
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2913
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TAntecedentResult
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *tasks* array is null.-or-The exception that is thrown when the *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *continuationOptions* argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    description: The exception that is thrown when the *tasks* array contains a null value.-or-The exception that is thrown when the *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 952
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 982
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value.
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync(IAsyncResult, Action<IAsyncResult>)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult))
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 852
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that executes an end method action when a specified <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The action delegate that processes the completed *asyncResult*.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *asyncResult* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 880
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that executes an end method action when a specified <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The action delegate that processes the completed *asyncResult*.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *asyncResult* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 913
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that executes an end method action when a specified <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The action delegate that processes the completed *asyncResult*.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the task that executes the end method.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *asyncResult* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1011
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1047
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TArg1
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1322
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1354
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult))
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1230
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that executes an end method function when a specified <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed *asyncResult*.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *asyncResult* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1260
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that executes an end method function when a specified <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed *asyncResult*.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *asyncResult* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1294
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that executes an end method function when a specified <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed *asyncResult*.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the task that executes the end method.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *asyncResult* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1081
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TArg2
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1120
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TArg1
    - id: TArg2
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1385
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1421
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TArg1
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1158
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: arg3
      type: '{TArg3}'
      description: The third argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TArg3
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1201
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: arg3
      type: '{TArg3}'
      description: The third argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TArg3
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1455
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1494
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1533
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: arg3
      type: '{TArg3}'
      description: The third argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TArg3
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1577
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: arg3
      type: '{TArg3}'
      description: The third argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TArg3
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *beginMethod* argument is null.-or-The exception that is thrown when the *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  id: StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 295
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task StartNew(Action action)
    content.vb: Public Function StartNew(action As Action) As Task
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    return:
      type: System.Threading.Tasks.Task
      description: The started task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *action* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  id: StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 322
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action action, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(action As Action, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *action* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 393
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *action* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 352
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action action, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(action As Action, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *action* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value.
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  id: StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action<Object>, Object)
  name.vb: StartNew(Action(Of Object), Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 429
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action<object> action, object state)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *action* delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The *action* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action<Object>, Object, CancellationToken)
  name.vb: StartNew(Action(Of Object), Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 460
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *action* delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *action* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Action(Of Object), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 535
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *action* delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *action* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew(Action<Object>, Object, TaskCreationOptions)
  name.vb: StartNew(Action(Of Object), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 492
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task StartNew(Action<object> action, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *action* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *action* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value.
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  id: StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<TResult>)
  name.vb: StartNew(Of TResult)(Func(Of TResult))
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 564
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<TResult>, CancellationToken)
  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 597
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 676
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  name.vb: StartNew(Of TResult)(Func(Of TResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 631
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  id: StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<Object, TResult>, Object)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 706
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *function* delegate.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 741
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *function* delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 824
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *function* delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.-or-The exception that is thrown when the *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  name: StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 777
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *function* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    description: The exception that is thrown when the *function* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the *creationOptions* argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" data-throw-if-not-resolved="false"></xref>
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  name: Task[]
  name.vb: Task()
  fullName: System.Threading.Tasks.Task[]
  fullName.vb: System.Threading.Tasks.Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
- uid: System.Action{System.Threading.Tasks.Task[]}
  definition: System.Action`1
  name: Action<Task[]>
  name.vb: Action(Of Task())
  fullName: System.Action<System.Threading.Tasks.Task[]>
  fullName.vb: System.Action(Of System.Threading.Tasks.Task())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  isExternal: false
  name: Action<>
  name.vb: Action(Of )
  fullName: System.Action<>
  fullName.vb: System.Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  definition: System.Func`2
  name: Func<Task[], TResult>
  name.vb: Func(Of Task(), TResult)
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  name.vb: Func(Of , )
  fullName: System.Func<, >
  fullName.vb: System.Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  name.vb: Threading.Tasks.Task(Of )
  fullName: System.Threading.Tasks.Task<>
  fullName.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  isExternal: false
  name: Task<TAntecedentResult>[]
  name.vb: Task(Of TAntecedentResult)()
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  fullName.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
  definition: System.Action`1
  name: Action<Task<TAntecedentResult>[]>
  name.vb: Action(Of Task(Of TAntecedentResult)())
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>
  fullName.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>[], TResult>
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Action{System.Threading.Tasks.Task}
  definition: System.Action`1
  name: Action<Task>
  name.vb: Action(Of Task)
  fullName: System.Action<System.Threading.Tasks.Task>
  fullName.vb: System.Action(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  definition: System.Func`2
  name: Func<Task, TResult>
  name.vb: Func(Of Task, TResult)
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
  definition: System.Action`1
  name: Action<Task<TAntecedentResult>>
  name.vb: Action(Of Task(Of TAntecedentResult))
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>>
  fullName.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>, TResult>
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`3
  name: Func<AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action{System.IAsyncResult}
  definition: System.Action`1
  name: Action<IAsyncResult>
  name.vb: Action(Of IAsyncResult)
  fullName: System.Action<System.IAsyncResult>
  fullName.vb: System.Action(Of System.IAsyncResult)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`4
  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg1}'
  isExternal: false
  name: TArg1
  fullName: TArg1
- uid: System.Func`4
  isExternal: false
  name: Func<T1, T2, T3, TResult>
  name.vb: Func(Of T1, T2, T3, TResult)
  fullName: System.Func<T1, T2, T3, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.IAsyncResult,{TResult}}
  definition: System.Func`2
  name: Func<IAsyncResult, TResult>
  name.vb: Func(Of IAsyncResult, TResult)
  fullName: System.Func<System.IAsyncResult, TResult>
  fullName.vb: System.Func(Of System.IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`5
  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg2}'
  isExternal: false
  name: TArg2
  fullName: TArg2
- uid: System.Func`5
  isExternal: false
  name: Func<, , , , >
  name.vb: Func(Of , , , , )
  fullName: System.Func<, , , , >
  fullName.vb: System.Func(Of , , , , )
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`6
  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg3}'
  isExternal: false
  name: TArg3
  fullName: TArg3
- uid: System.Func`6
  isExternal: false
  name: Func<T1, T2, T3, T4, T5, TResult>
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Action
  isExternal: false
  name: Action
  fullName: System.Action
- uid: System.Action{System.Object}
  definition: System.Action`1
  name: Action<Object>
  name.vb: Action(Of Object)
  fullName: System.Action<System.Object>
  fullName.vb: System.Action(Of System.Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TResult}}
  definition: System.Func`1
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  name.vb: Func(Of )
  fullName: System.Func<>
  fullName.vb: System.Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{System.Object,{TResult}}
  definition: System.Func`2
  name: Func<Object, TResult>
  name.vb: Func(Of Object, TResult)
  fullName: System.Func<System.Object, TResult>
  fullName.vb: System.Func(Of System.Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
