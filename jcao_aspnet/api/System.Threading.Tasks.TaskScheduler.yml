items:
- uid: System.Threading.Tasks.TaskScheduler
  id: TaskScheduler
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskScheduler.#ctor
  - System.Threading.Tasks.TaskScheduler.Current
  - System.Threading.Tasks.TaskScheduler.Default
  - System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  - System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  - System.Threading.Tasks.TaskScheduler.Id
  - System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  - System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  - System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 41
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Represents an object that handles the low-level work of queuing tasks onto threads.
  syntax:
    content: 'public abstract class TaskScheduler : object'
    content.vb: Public MustInherit Class TaskScheduler Inherits Object
  inheritance:
  - System.Object
- uid: System.Threading.Tasks.TaskScheduler.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskScheduler
  name: TaskScheduler()
  fullName: System.Threading.Tasks.TaskScheduler.TaskScheduler()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 302
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes the <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: protected TaskScheduler()
    content.vb: Protected Sub New
- uid: System.Threading.Tasks.TaskScheduler.Current
  id: Current
  parent: System.Threading.Tasks.TaskScheduler
  name: Current
  fullName: System.Threading.Tasks.TaskScheduler.Current
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 328
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> associated with the currently executing task.
  syntax:
    content: public static TaskScheduler Current { get; }
    content.vb: Public Shared ReadOnly Property Current As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: Returns the <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> associated with the currently executing task.
- uid: System.Threading.Tasks.TaskScheduler.Default
  id: Default
  parent: System.Threading.Tasks.TaskScheduler
  name: Default
  fullName: System.Threading.Tasks.TaskScheduler.Default
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 313
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the default <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> instance that is provided by the .NET Framework.
  syntax:
    content: public static TaskScheduler Default { get; }
    content.vb: Public Shared ReadOnly Property Default As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: Returns the default <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> instance.
- uid: System.Threading.Tasks.TaskScheduler.Id
  id: Id
  parent: System.Threading.Tasks.TaskScheduler
  name: Id
  fullName: System.Threading.Tasks.TaskScheduler.Id
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 381
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the unique ID for this <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: Returns the unique ID for this <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref>.
- uid: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  id: MaximumConcurrencyLevel
  parent: System.Threading.Tasks.TaskScheduler
  name: MaximumConcurrencyLevel
  fullName: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 166
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Indicates the maximum concurrency level this <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> is able to support.
  syntax:
    content: public virtual int MaximumConcurrencyLevel { get; }
    content.vb: Public Overridable ReadOnly Property MaximumConcurrencyLevel As Integer
    parameters: []
    return:
      type: System.Int32
      description: Returns an integer that represents the maximum concurrency level. The default scheduler returns <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
- uid: System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  id: UnobservedTaskException
  parent: System.Threading.Tasks.TaskScheduler
  name: UnobservedTaskException
  fullName: System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 459
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Occurs when a faulted task's unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.
  syntax:
    content: public static event EventHandler<UnobservedTaskExceptionEventArgs> UnobservedTaskException
    content.vb: Public Shared Event UnobservedTaskException As EventHandler(Of UnobservedTaskExceptionEventArgs)
- uid: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  id: FromCurrentSynchronizationContext
  parent: System.Threading.Tasks.TaskScheduler
  name: FromCurrentSynchronizationContext()
  fullName: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 373
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> associated with the current <xref href="System.Threading.SynchronizationContext" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static TaskScheduler FromCurrentSynchronizationContext()
    content.vb: Public Shared Function FromCurrentSynchronizationContext As TaskScheduler
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: A <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> associated with the current <xref href="System.Threading.SynchronizationContext" data-throw-if-not-resolved="false"></xref>, as determined by <xref href="System.Threading.SynchronizationContext.Current" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.InvalidOperationException
    description: The current SynchronizationContext may not be used as a TaskScheduler.
- uid: System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  id: GetScheduledTasks
  parent: System.Threading.Tasks.TaskScheduler
  name: GetScheduledTasks()
  fullName: System.Threading.Tasks.TaskScheduler.GetScheduledTasks()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 159
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: For debugger support only, generates an enumerable of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances currently queued to the scheduler waiting to be executed.
  syntax:
    content: protected abstract Collections.Generic.IEnumerable<Task> GetScheduledTasks()
    content.vb: Protected MustOverride Function GetScheduledTasks As Collections.Generic.IEnumerable(Of Task)
    return:
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.
  exceptions:
  - type: System.NotSupportedException
    description: This scheduler is unable to generate a list of queued tasks at this time.
- uid: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  id: QueueTask(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  name: QueueTask(Task)
  fullName: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 72
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to the scheduler.
  syntax:
    content: protected abstract void QueueTask(Task task)
    content.vb: Protected MustOverride Sub QueueTask(task As Task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to be queued.
  exceptions:
  - type: System.ArgumentNullException
    description: The *task* argument is null.
- uid: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  id: TryDequeue(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  name: TryDequeue(Task)
  fullName: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 239
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Attempts to dequeue a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that was previously queued to this scheduler.
  syntax:
    content: protected virtual bool TryDequeue(Task task)
    content.vb: Protected Overridable Function TryDequeue(task As Task) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to be dequeued.
    return:
      type: System.Boolean
      description: A Boolean denoting whether the *task* argument was successfully dequeued.
  exceptions:
  - type: System.ArgumentNullException
    description: The *task* argument is null.
- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  id: TryExecuteTask(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  name: TryExecuteTask(Task)
  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 430
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Attempts to execute the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> on this scheduler.
  syntax:
    content: protected bool TryExecuteTask(Task task)
    content.vb: Protected Function TryExecuteTask(task As Task) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object to be executed.
    return:
      type: System.Boolean
      description: A Boolean that is true if *task* was successfully executed, false if it was not. A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.
  exceptions:
  - type: System.InvalidOperationException
    description: The *task* is not associated with this scheduler.
- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  id: TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  parent: System.Threading.Tasks.TaskScheduler
  name: TryExecuteTaskInline(Task, Boolean)
  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 115
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Determines whether the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> can be executed synchronously in this call, and if it can, executes it.
  syntax:
    content: protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued)
    content.vb: Protected MustOverride Function TryExecuteTaskInline(task As Task, taskWasPreviouslyQueued As Boolean) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to be executed.
    - id: taskWasPreviouslyQueued
      type: System.Boolean
      description: A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.
    return:
      type: System.Boolean
      description: A Boolean value indicating whether the task was executed inline.
  exceptions:
  - type: System.ArgumentNullException
    description: The *task* argument is null.
  - type: System.InvalidOperationException
    description: The *task* was already executed.
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Task>
  name.vb: Collections.Generic.IEnumerable(Of Task)
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
