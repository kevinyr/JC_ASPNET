items:
- uid: System.Threading.ThreadLocal`1
  commentId: T:System.Threading.ThreadLocal`1
  id: ThreadLocal`1
  parent: System.Threading
  children:
  - System.Threading.ThreadLocal`1.#ctor
  - System.Threading.ThreadLocal`1.#ctor(System.Boolean)
  - System.Threading.ThreadLocal`1.#ctor(System.Func{`0})
  - System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)
  - System.Threading.ThreadLocal`1.Dispose
  - System.Threading.ThreadLocal`1.Dispose(System.Boolean)
  - System.Threading.ThreadLocal`1.Finalize
  - System.Threading.ThreadLocal`1.IsValueCreated
  - System.Threading.ThreadLocal`1.ToString
  - System.Threading.ThreadLocal`1.Value
  - System.Threading.ThreadLocal`1.Values
  langs:
  - csharp
  - vb
  name: ThreadLocal<T>
  nameWithType: ThreadLocal<T>
  fullName: System.Threading.ThreadLocal<T>
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThreadLocal
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 327
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: 'public class ThreadLocal<T> : IDisposable'
    content.vb: >-
      Public Class ThreadLocal(Of T)
          Inherits IDisposable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  nameWithType.vb: ThreadLocal(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Threading.ThreadLocal(Of T)
  name.vb: ThreadLocal(Of T)
- uid: System.Threading.ThreadLocal`1.#ctor
  commentId: M:System.Threading.ThreadLocal`1.#ctor
  id: '#ctor'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal()
  nameWithType: ThreadLocal<T>.ThreadLocal()
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal()
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 329
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public ThreadLocal()
    content.vb: Public Sub New
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal()
- uid: System.Threading.ThreadLocal`1.#ctor(System.Boolean)
  commentId: M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal(Boolean)
  nameWithType: ThreadLocal<T>.ThreadLocal(Boolean)
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 330
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public ThreadLocal(bool trackAllValues)
    content.vb: Public Sub New(trackAllValues As Boolean)
    parameters:
    - id: trackAllValues
      type: System.Boolean
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal(System.Boolean)
- uid: System.Threading.ThreadLocal`1.#ctor(System.Func{`0})
  commentId: M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal(Func<T>)
  nameWithType: ThreadLocal<T>.ThreadLocal(Func<T>)
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal(System.Func<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 331
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public ThreadLocal(Func<T> valueFactory)
    content.vb: Public Sub New(valueFactory As Func(Of T))
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal(Func(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal(System.Func(Of T))
  name.vb: ThreadLocal(Func(Of T))
- uid: System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)
  commentId: M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)
  id: '#ctor(System.Func{`0},System.Boolean)'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal(Func<T>, Boolean)
  nameWithType: ThreadLocal<T>.ThreadLocal(Func<T>, Boolean)
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal(System.Func<T>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 332
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public ThreadLocal(Func<T> valueFactory, bool trackAllValues)
    content.vb: Public Sub New(valueFactory As Func(Of T), trackAllValues As Boolean)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
    - id: trackAllValues
      type: System.Boolean
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal(Func(Of T), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal(System.Func(Of T), System.Boolean)
  name.vb: ThreadLocal(Func(Of T), Boolean)
- uid: System.Threading.ThreadLocal`1.IsValueCreated
  commentId: P:System.Threading.ThreadLocal`1.IsValueCreated
  id: IsValueCreated
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: IsValueCreated
  nameWithType: ThreadLocal<T>.IsValueCreated
  fullName: System.Threading.ThreadLocal<T>.IsValueCreated
  type: Property
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValueCreated
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 333
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public bool IsValueCreated { get; }
    content.vb: Public ReadOnly Property IsValueCreated As Boolean
    parameters: []
    return:
      type: System.Boolean
  nameWithType.vb: ThreadLocal(Of T).IsValueCreated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.ThreadLocal(Of T).IsValueCreated
- uid: System.Threading.ThreadLocal`1.Value
  commentId: P:System.Threading.ThreadLocal`1.Value
  id: Value
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ThreadLocal<T>.Value
  fullName: System.Threading.ThreadLocal<T>.Value
  type: Property
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 334
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public T Value { get; set; }
    content.vb: Public Property Value As T
    parameters: []
    return:
      type: '{T}'
  nameWithType.vb: ThreadLocal(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).Value
- uid: System.Threading.ThreadLocal`1.Values
  commentId: P:System.Threading.ThreadLocal`1.Values
  id: Values
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: ThreadLocal<T>.Values
  fullName: System.Threading.ThreadLocal<T>.Values
  type: Property
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 335
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public Collections.Generic.IList<T> Values { get; }
    content.vb: Public ReadOnly Property Values As Collections.Generic.IList(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{T}}
  nameWithType.vb: ThreadLocal(Of T).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.ThreadLocal(Of T).Values
- uid: System.Threading.ThreadLocal`1.Dispose
  commentId: M:System.Threading.ThreadLocal`1.Dispose
  id: Dispose
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ThreadLocal<T>.Dispose()
  fullName: System.Threading.ThreadLocal<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 336
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  nameWithType.vb: ThreadLocal(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).Dispose()
- uid: System.Threading.ThreadLocal`1.Dispose(System.Boolean)
  commentId: M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ThreadLocal<T>.Dispose(Boolean)
  fullName: System.Threading.ThreadLocal<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 337
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  nameWithType.vb: ThreadLocal(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Threading.ThreadLocal(Of T).Dispose(System.Boolean)
- uid: System.Threading.ThreadLocal`1.Finalize
  commentId: M:System.Threading.ThreadLocal`1.Finalize
  id: Finalize
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: ThreadLocal<T>.Finalize()
  fullName: System.Threading.ThreadLocal<T>.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 338
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  nameWithType.vb: ThreadLocal(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Threading.ThreadLocal(Of T).Finalize()
- uid: System.Threading.ThreadLocal`1.ToString
  commentId: M:System.Threading.ThreadLocal`1.ToString
  id: ToString
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ThreadLocal<T>.ToString()
  fullName: System.Threading.ThreadLocal<T>.ToString()
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 339
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  nameWithType.vb: ThreadLocal(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Threading.ThreadLocal(Of T).ToString()
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{{T}}
  commentId: '!:System.Func{``0}'
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: false
  name: Func<>
  nameWithType: Func<>
  fullName: System.Func<>
  nameWithType.vb: Func(Of )
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList{{T}}
  commentId: '!:System.Collections.Generic.IList{`0}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: false
  name: Collections.Generic.IList<>
  nameWithType: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: Collections.Generic.IList(Of )
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    nameWithType: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    nameWithType: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
