items:
- uid: System.Threading.ThreadPool
  id: ThreadPool
  parent: System.Threading
  children:
  - System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)
  - System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)
  - System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)
  - System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)
  - System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)
  - System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)
  - System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)
  name: ThreadPool
  fullName: System.Threading.ThreadPool
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/ThreadPool.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1343
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.
  syntax:
    content: 'public class ThreadPool : object'
    content.vb: Public Class ThreadPool Inherits Object
  inheritance:
  - System.Object
- uid: System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)
  id: BindHandle(System.Runtime.InteropServices.SafeHandle)
  parent: System.Threading.ThreadPool
  name: BindHandle(Runtime.InteropServices.SafeHandle)
  fullName: System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1870
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Binds an operating system handle to the <xref href="System.Threading.ThreadPool" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static bool BindHandle(Runtime.InteropServices.SafeHandle osHandle)
    content.vb: Public Shared Function BindHandle(osHandle As Runtime.InteropServices.SafeHandle) As Boolean
    parameters:
    - id: osHandle
      type: System.Runtime.InteropServices.SafeHandle
      description: A <xref href="System.Runtime.InteropServices.SafeHandle" data-throw-if-not-resolved="false"></xref>  that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.
    return:
      type: System.Boolean
      description: true if the handle is bound; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*osHandle* is null.'
- uid: System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)
  id: QueueUserWorkItem(System.Threading.WaitCallback)
  parent: System.Threading.ThreadPool
  name: QueueUserWorkItem(WaitCallback)
  fullName: System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1582
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Queues a method for execution. The method executes when a thread pool thread becomes available.
  syntax:
    content: public static bool QueueUserWorkItem(WaitCallback callBack)
    content.vb: Public Shared Function QueueUserWorkItem(callBack As WaitCallback) As Boolean
    parameters:
    - id: callBack
      type: System.Threading.WaitCallback
      description: A <xref href="System.Threading.WaitCallback" data-throw-if-not-resolved="false"></xref> that represents the method to be executed.
    return:
      type: System.Boolean
      description: true if the method is successfully queued; <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref> is thrown if the work item could not be queued.
  exceptions:
  - type: System.ArgumentNullException
    description: '*callBack* is null.'
  - type: System.NotSupportedException
    description: The common language runtime (CLR) is hosted, and the host does not support this action.
- uid: System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)
  id: QueueUserWorkItem(System.Threading.WaitCallback,System.Object)
  parent: System.Threading.ThreadPool
  name: QueueUserWorkItem(WaitCallback, Object)
  fullName: System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1571
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.
  syntax:
    content: public static bool QueueUserWorkItem(WaitCallback callBack, object state)
    content.vb: Public Shared Function QueueUserWorkItem(callBack As WaitCallback, state As Object) As Boolean
    parameters:
    - id: callBack
      type: System.Threading.WaitCallback
      description: A <xref href="System.Threading.WaitCallback" data-throw-if-not-resolved="false"></xref> representing the method to execute.
    - id: state
      type: System.Object
      description: An object containing data to be used by the method.
    return:
      type: System.Boolean
      description: true if the method is successfully queued; <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref> is thrown if the work item could not be queued.
  exceptions:
  - type: System.NotSupportedException
    description: The common language runtime (CLR) is hosted, and the host does not support this action.
  - type: System.ArgumentNullException
    description: '*callBack* is null.'
- uid: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)
  id: RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)
  parent: System.Threading.ThreadPool
  name: RegisterWaitForSingleObject(WaitHandle, WaitOrTimerCallback, Object, Int32, Boolean)
  fullName: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.Int32, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1465
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Registers a delegate to wait for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref>, specifying a 32-bit signed integer for the time-out in milliseconds.
  syntax:
    content: public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce)
    content.vb: Public Shared Function RegisterWaitForSingleObject(waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle
    parameters:
    - id: waitObject
      type: System.Threading.WaitHandle
      description: The <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> to register. Use a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> other than <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref>.
    - id: callBack
      type: System.Threading.WaitOrTimerCallback
      description: The <xref href="System.Threading.WaitOrTimerCallback" data-throw-if-not-resolved="false"></xref> delegate to call when the *waitObject* parameter is signaled.
    - id: state
      type: System.Object
      description: The object that is passed to the delegate.
    - id: millisecondsTimeOutInterval
      type: System.Int32
      description: The time-out in milliseconds. If the *millisecondsTimeOutInterval* parameter is 0 (zero), the function tests the object's state and returns immediately. If *millisecondsTimeOutInterval* is -1, the function's time-out interval never elapses.
    - id: executeOnlyOnce
      type: System.Boolean
      description: true to indicate that the thread will no longer wait on the *waitObject* parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.
    return:
      type: System.Threading.RegisteredWaitHandle
      description: The <xref href="System.Threading.RegisteredWaitHandle" data-throw-if-not-resolved="false"></xref> that encapsulates the native handle.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The *millisecondsTimeOutInterval* parameter is less than -1.
- uid: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)
  id: RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)
  parent: System.Threading.ThreadPool
  name: RegisterWaitForSingleObject(WaitHandle, WaitOrTimerCallback, Object, Int64, Boolean)
  fullName: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.Int64, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1499
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Registers a delegate to wait for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref>, specifying a 64-bit signed integer for the time-out in milliseconds.
  syntax:
    content: public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce)
    content.vb: Public Shared Function RegisterWaitForSingleObject(waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle
    parameters:
    - id: waitObject
      type: System.Threading.WaitHandle
      description: The <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> to register. Use a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> other than <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref>.
    - id: callBack
      type: System.Threading.WaitOrTimerCallback
      description: The <xref href="System.Threading.WaitOrTimerCallback" data-throw-if-not-resolved="false"></xref> delegate to call when the *waitObject* parameter is signaled.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
    - id: millisecondsTimeOutInterval
      type: System.Int64
      description: The time-out in milliseconds. If the *millisecondsTimeOutInterval* parameter is 0 (zero), the function tests the object's state and returns immediately. If *millisecondsTimeOutInterval* is -1, the function's time-out interval never elapses.
    - id: executeOnlyOnce
      type: System.Boolean
      description: true to indicate that the thread will no longer wait on the *waitObject* parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.
    return:
      type: System.Threading.RegisteredWaitHandle
      description: The <xref href="System.Threading.RegisteredWaitHandle" data-throw-if-not-resolved="false"></xref> that encapsulates the native handle.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The *millisecondsTimeOutInterval* parameter is less than -1.
- uid: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)
  id: RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)
  parent: System.Threading.ThreadPool
  name: RegisterWaitForSingleObject(WaitHandle, WaitOrTimerCallback, Object, TimeSpan, Boolean)
  fullName: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.TimeSpan, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1533
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Registers a delegate to wait for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref>, specifying a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> value for the time-out.
  syntax:
    content: public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce)
    content.vb: Public Shared Function RegisterWaitForSingleObject(waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle
    parameters:
    - id: waitObject
      type: System.Threading.WaitHandle
      description: The <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> to register. Use a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> other than <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref>.
    - id: callBack
      type: System.Threading.WaitOrTimerCallback
      description: The <xref href="System.Threading.WaitOrTimerCallback" data-throw-if-not-resolved="false"></xref> delegate to call when the *waitObject* parameter is signaled.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
    - id: timeout
      type: System.TimeSpan
      description: The time-out represented by a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref>. If *timeout* is 0 (zero), the function tests the object's state and returns immediately. If *timeout* is -1, the function's time-out interval never elapses.
    - id: executeOnlyOnce
      type: System.Boolean
      description: true to indicate that the thread will no longer wait on the *waitObject* parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.
    return:
      type: System.Threading.RegisteredWaitHandle
      description: The <xref href="System.Threading.RegisteredWaitHandle" data-throw-if-not-resolved="false"></xref> that encapsulates the native handle.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The *timeout* parameter is less than -1.
  - type: System.NotSupportedException
    description: The *timeout* parameter is greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
- uid: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)
  id: RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)
  parent: System.Threading.ThreadPool
  name: RegisterWaitForSingleObject(WaitHandle, WaitOrTimerCallback, Object, UInt32, Boolean)
  fullName: System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.UInt32, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1391
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: Registers a delegate to wait for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref>, specifying a 32-bit unsigned integer for the time-out in milliseconds.
  syntax:
    content: public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce)
    content.vb: Public Shared Function RegisterWaitForSingleObject(waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle
    parameters:
    - id: waitObject
      type: System.Threading.WaitHandle
      description: The <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> to register. Use a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> other than <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref>.
    - id: callBack
      type: System.Threading.WaitOrTimerCallback
      description: The <xref href="System.Threading.WaitOrTimerCallback" data-throw-if-not-resolved="false"></xref> delegate to call when the *waitObject* parameter is signaled.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
    - id: millisecondsTimeOutInterval
      type: System.UInt32
      description: The time-out in milliseconds. If the *millisecondsTimeOutInterval* parameter is 0 (zero), the function tests the object's state and returns immediately. If *millisecondsTimeOutInterval* is -1, the function's time-out interval never elapses.
    - id: executeOnlyOnce
      type: System.Boolean
      description: true to indicate that the thread will no longer wait on the *waitObject* parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.
    return:
      type: System.Threading.RegisteredWaitHandle
      description: The <xref href="System.Threading.RegisteredWaitHandle" data-throw-if-not-resolved="false"></xref> that can be used to cancel the registered wait operation.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The *millisecondsTimeOutInterval* parameter is less than -1.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: Runtime.InteropServices.SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Threading.WaitCallback
  parent: System.Threading
  isExternal: false
  name: WaitCallback
  fullName: System.Threading.WaitCallback
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.WaitOrTimerCallback
  parent: System.Threading
  isExternal: false
  name: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.RegisteredWaitHandle
  parent: System.Threading
  isExternal: false
  name: RegisteredWaitHandle
  fullName: System.Threading.RegisteredWaitHandle
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
