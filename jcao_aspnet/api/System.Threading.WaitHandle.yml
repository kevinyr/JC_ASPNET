items:
- uid: System.Threading.WaitHandle
  id: WaitHandle
  parent: System.Threading
  children:
  - System.Threading.WaitHandle.#ctor
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitTimeout
  name: WaitHandle
  fullName: System.Threading.WaitHandle
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "Encapsulates operating systemâ€“specific objects that wait for exclusive access to shared resources."
  syntax:
    content: 'public abstract class WaitHandle : IDisposable'
    content.vb: Public MustInherit Class WaitHandle Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: System.Threading.WaitHandle.InvalidHandle
  id: InvalidHandle
  parent: System.Threading.WaitHandle
  name: InvalidHandle
  fullName: System.Threading.WaitHandle.InvalidHandle
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 53
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Represents an invalid native operating system handle. This field is read-only.
  syntax:
    content: protected static readonly IntPtr InvalidHandle
    content.vb: Protected Shared ReadOnly InvalidHandle As IntPtr
- uid: System.Threading.WaitHandle.WaitTimeout
  id: WaitTimeout
  parent: System.Threading.WaitHandle
  name: WaitTimeout
  fullName: System.Threading.WaitHandle.WaitTimeout
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Indicates that a <xref href="System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" data-throw-if-not-resolved="false"></xref> operation timed out before any of the wait handles were signaled. This field is constant.
  syntax:
    content: public const int WaitTimeout
    content.vb: Public Const WaitTimeout As Integer = 258
- uid: System.Threading.WaitHandle.#ctor
  id: '#ctor'
  parent: System.Threading.WaitHandle
  name: WaitHandle()
  fullName: System.Threading.WaitHandle.WaitHandle()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 67
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected WaitHandle()
    content.vb: Protected Sub New
- uid: System.Threading.WaitHandle.Dispose
  id: Dispose
  parent: System.Threading.WaitHandle
  name: Dispose()
  fullName: System.Threading.WaitHandle.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 605
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Threading.WaitHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.WaitHandle
  name: Dispose(Boolean)
  fullName: System.Threading.WaitHandle.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 596
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: When overridden in a derived class, releases the unmanaged resources used by the <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref>, and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool explicitDisposing)
    content.vb: Protected Overridable Sub Dispose(explicitDisposing As Boolean)
    parameters:
    - id: explicitDisposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  id: WaitAll(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  name: WaitAll(WaitHandle[])
  name.vb: WaitAll(WaitHandle())
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 372
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Waits for all the elements in the specified array to receive a signal.
  syntax:
    content: public static bool WaitAll(WaitHandle[] waitHandles)
    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle()) As Boolean
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.
    return:
      type: System.Boolean
      description: true when every element in *waitHandles* has received a signal; otherwise the method never returns.
  exceptions:
  - type: System.ArgumentNullException
    description: The *waitHandles* parameter is null. -or- One or more of the objects in the *waitHandles* array are null. -or-*waitHandles* is an array with no elements and the .NET Framework version is 2.0 or later.
  - type: System.DuplicateWaitObjectException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>, instead.The *waitHandles* array contains elements that are duplicates.
  - type: System.NotSupportedException
    description: The number of objects in *waitHandles* is greater than the system permits.-or- The <xref href="System.STAThreadAttribute" data-throw-if-not-resolved="false"></xref> attribute is applied to the thread procedure for the current thread, and *waitHandles* contains more than one element.
  - type: System.ApplicationException
    description: '*waitHandles* is an array with no elements and the .NET Framework version is 1.0 or 1.1.'
  - type: System.Threading.AbandonedMutexException
    description: The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.InvalidOperationException
    description: The *waitHandles* array contains a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  id: WaitAll(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  name: WaitAll(WaitHandle[], Int32)
  name.vb: WaitAll(WaitHandle(), Int32)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32)
  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 377
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Waits for all the elements in the specified array to receive a signal, using an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value to specify the time interval.
  syntax:
    content: public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true when every element in *waitHandles* has received a signal; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: The *waitHandles* parameter is null.-or- One or more of the objects in the *waitHandles* array is null. -or-*waitHandles* is an array with no elements.
  - type: System.DuplicateWaitObjectException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>, instead.The *waitHandles* array contains elements that are duplicates.
  - type: System.NotSupportedException
    description: The number of objects in *waitHandles* is greater than the system permits.-or- The <xref href="System.STAThreadAttribute" data-throw-if-not-resolved="false"></xref> attribute is applied to the thread procedure for the current thread, and *waitHandles* contains more than one element.
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.InvalidOperationException
    description: The *waitHandles* array contains a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  id: WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  name: WaitAll(WaitHandle[], TimeSpan)
  name.vb: WaitAll(WaitHandle(), TimeSpan)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan)
  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 382
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Waits for all the elements in the specified array to receive a signal, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> value to specify the time interval.
  syntax:
    content: public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout)
    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds, to wait indefinitely.
    return:
      type: System.Boolean
      description: true when every element in *waitHandles* has received a signal; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: The *waitHandles* parameter is null. -or- One or more of the objects in the *waitHandles* array is null. -or-*waitHandles* is an array with no elements.
  - type: System.DuplicateWaitObjectException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>, instead.The *waitHandles* array contains elements that are duplicates.
  - type: System.NotSupportedException
    description: The number of objects in *waitHandles* is greater than the system permits.-or- The <xref href="System.STAThreadAttribute" data-throw-if-not-resolved="false"></xref> attribute is applied to the thread procedure for the current thread, and *waitHandles* contains more than one element.
  - type: System.ArgumentOutOfRangeException
    description: '*timeout* is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-*timeout* is greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.'
  - type: System.Threading.AbandonedMutexException
    description: The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.InvalidOperationException
    description: The *waitHandles* array contains a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  id: WaitAny(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  name: WaitAny(WaitHandle[])
  name.vb: WaitAny(WaitHandle())
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 482
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Waits for any of the elements in the specified array to receive a signal.
  syntax:
    content: public static int WaitAny(WaitHandle[] waitHandles)
    content.vb: Public Shared Function WaitAny(waitHandles As WaitHandle()) As Integer
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: A WaitHandle array containing the objects for which the current instance will wait.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait.
  exceptions:
  - type: System.ArgumentNullException
    description: The *waitHandles* parameter is null.-or-One or more of the objects in the *waitHandles* array is null.
  - type: System.NotSupportedException
    description: The number of objects in *waitHandles* is greater than the system permits.
  - type: System.ApplicationException
    description: '*waitHandles* is an array with no elements, and the .NET Framework version is 1.0 or 1.1.'
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.ArgumentException
    description: '*waitHandles* is an array with no elements, and the .NET Framework version is 2.0 or later.'
  - type: System.InvalidOperationException
    description: The *waitHandles* array contains a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  id: WaitAny(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  name: WaitAny(WaitHandle[], Int32)
  name.vb: WaitAny(WaitHandle(), Int32)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32)
  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 488
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.
  syntax:
    content: public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAny(waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: A WaitHandle array containing the objects for which the current instance will wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait, or <xref href="System.Threading.WaitHandle.WaitTimeout" data-throw-if-not-resolved="false"></xref> if no object satisfied the wait and a time interval equivalent to *millisecondsTimeout* has passed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *waitHandles* parameter is null.-or-One or more of the objects in the *waitHandles* array is null.
  - type: System.NotSupportedException
    description: The number of objects in *waitHandles* is greater than the system permits.
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.ArgumentException
    description: '*waitHandles* is an array with no elements.'
  - type: System.InvalidOperationException
    description: The *waitHandles* array contains a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  id: WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  name: WaitAny(WaitHandle[], TimeSpan)
  name.vb: WaitAny(WaitHandle(), TimeSpan)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan)
  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 472
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Waits for any of the elements in the specified array to receive a signal, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> to specify the time interval.
  syntax:
    content: public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout)
    content.vb: Public Shared Function WaitAny(waitHandles As WaitHandle(), timeout As TimeSpan) As Integer
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: A WaitHandle array containing the objects for which the current instance will wait.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait, or <xref href="System.Threading.WaitHandle.WaitTimeout" data-throw-if-not-resolved="false"></xref> if no object satisfied the wait and a time interval equivalent to *timeout* has passed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *waitHandles* parameter is null.-or-One or more of the objects in the *waitHandles* array is null.
  - type: System.NotSupportedException
    description: The number of objects in *waitHandles* is greater than the system permits.
  - type: System.ArgumentOutOfRangeException
    description: '*timeout* is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-*timeout* is greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.'
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.ArgumentException
    description: '*waitHandles* is an array with no elements.'
  - type: System.InvalidOperationException
    description: The *waitHandles* array contains a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitOne
  id: WaitOne
  parent: System.Threading.WaitHandle
  name: WaitOne()
  fullName: System.Threading.WaitHandle.WaitOne()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 197
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Blocks the current thread until the current <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> receives a signal.
  syntax:
    content: public virtual bool WaitOne()
    content.vb: Public Overridable Function WaitOne As Boolean
    return:
      type: System.Boolean
      description: true if the current instance receives a signal. If the current instance is never signaled, <xref href="System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" data-throw-if-not-resolved="false"></xref> never returns.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.InvalidOperationException
    description: The current instance is a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitOne(System.Int32)
  id: WaitOne(System.Int32)
  parent: System.Threading.WaitHandle
  name: WaitOne(Int32)
  fullName: System.Threading.WaitHandle.WaitOne(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 203
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Blocks the current thread until the current <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.
  syntax:
    content: public virtual bool WaitOne(int millisecondsTimeout)
    content.vb: Public Overridable Function WaitOne(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the current instance receives a signal; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.InvalidOperationException
    description: The current instance is a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  id: WaitOne(System.TimeSpan)
  parent: System.Threading.WaitHandle
  name: WaitOne(TimeSpan)
  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 208
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Blocks the current thread until the current instance receives a signal, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> to specify the time interval.
  syntax:
    content: public virtual bool WaitOne(TimeSpan timeout)
    content.vb: Public Overridable Function WaitOne(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the current instance receives a signal; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    description: '*timeout* is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-*timeout* is greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.'
  - type: System.Threading.AbandonedMutexException
    description: The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.
  - type: System.InvalidOperationException
    description: The current instance is a transparent proxy for a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> in another application domain.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.WaitHandle[]
  isExternal: false
  name: WaitHandle[]
  name.vb: WaitHandle()
  fullName: System.Threading.WaitHandle[]
  fullName.vb: System.Threading.WaitHandle()
  spec.csharp:
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    fullName: System.Threading.WaitHandle
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    fullName: System.Threading.WaitHandle
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.DuplicateWaitObjectException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ApplicationException
- uid: System.Threading.AbandonedMutexException
  isExternal: false
  name: AbandonedMutexException
  fullName: System.Threading.AbandonedMutexException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
